{"version":3,"file":"app.aaa278969a7741c94309.js","mappings":"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","sources":["webpack://@edx/frontend-app-account/./src/account-settings/AccountSettingsPage.messages.jsx","webpack://@edx/frontend-app-account/./src/account-settings/data/utils/reduxUtils.js","webpack://@edx/frontend-app-account/./src/account-settings/data/utils/sagaUtils.js","webpack://@edx/frontend-app-account/./src/account-settings/data/utils/serviceUtils.js","webpack://@edx/frontend-app-account/./src/account-settings/data/actions.js","webpack://@edx/frontend-app-account/./src/account-settings/site-language/actions.js","webpack://@edx/frontend-app-account/./src/account-settings/site-language/reducers.js","webpack://@edx/frontend-app-account/./src/account-settings/site-language/constants.js","webpack://@edx/frontend-app-account/./src/account-settings/site-language/service.js","webpack://@edx/frontend-app-account/./src/account-settings/site-language/sagas.js","webpack://@edx/frontend-app-account/./src/account-settings/site-language/selectors.js","webpack://@edx/frontend-app-account/./src/utils.js","webpack://@edx/frontend-app-account/./src/account-settings/data/selectors.js","webpack://@edx/frontend-app-account/./src/account-settings/PageLoading.jsx","webpack://@edx/frontend-app-account/./src/notification-preferences/data/selectors.js","webpack://@edx/frontend-app-account/./src/account-settings/JumpNav.jsx","webpack://@edx/frontend-app-account/./src/account-settings/delete-account/data/actions.js","webpack://@edx/frontend-app-account/./src/account-settings/delete-account/messages.js","webpack://@edx/frontend-app-account/./src/account-settings/Alert.jsx","webpack://@edx/frontend-app-account/./src/account-settings/delete-account/PrintingInstructions.jsx","webpack://@edx/frontend-app-account/./src/account-settings/delete-account/ConfirmationModal.jsx","webpack://@edx/frontend-app-account/./src/account-settings/delete-account/SuccessModal.jsx","webpack://@edx/frontend-app-account/./src/account-settings/delete-account/BeforeProceedingBanner.jsx","webpack://@edx/frontend-app-account/./src/account-settings/delete-account/DeleteAccount.jsx","webpack://@edx/frontend-app-account/./src/account-settings/delete-account/data/reducers.js","webpack://@edx/frontend-app-account/./src/account-settings/delete-account/data/service.js","webpack://@edx/frontend-app-account/./src/account-settings/delete-account/data/sagas.js","webpack://@edx/frontend-app-account/./src/account-settings/SwitchContent.jsx","webpack://@edx/frontend-app-account/./src/account-settings/certificate-preference/messages.js","webpack://@edx/frontend-app-account/./src/account-settings/certificate-preference/CertificatePreference.jsx","webpack://@edx/frontend-app-account/./src/account-settings/EditableField.jsx","webpack://@edx/frontend-app-account/./src/account-settings/EditableSelectField.jsx","webpack://@edx/frontend-app-account/./src/account-settings/reset-password/data/actions.js","webpack://@edx/frontend-app-account/./src/account-settings/reset-password/messages.js","webpack://@edx/frontend-app-account/./src/account-settings/reset-password/ConfirmationAlert.jsx","webpack://@edx/frontend-app-account/./src/account-settings/reset-password/RequestInProgressAlert.jsx","webpack://@edx/frontend-app-account/./src/account-settings/reset-password/ResetPassword.jsx","webpack://@edx/frontend-app-account/./src/account-settings/reset-password/data/reducers.js","webpack://@edx/frontend-app-account/./src/account-settings/reset-password/data/service.js","webpack://@edx/frontend-app-account/./src/account-settings/reset-password/data/sagas.js","webpack://@edx/frontend-app-account/./src/account-settings/name-change/data/actions.js","webpack://@edx/frontend-app-account/./src/account-settings/name-change/messages.js","webpack://@edx/frontend-app-account/./src/account-settings/name-change/NameChange.jsx","webpack://@edx/frontend-app-account/./src/account-settings/name-change/data/reducers.js","webpack://@edx/frontend-app-account/./src/account-settings/third-party-auth/data/actions.js","webpack://@edx/frontend-app-account/./src/account-settings/third-party-auth/ThirdPartyAuth.jsx","webpack://@edx/frontend-app-account/./src/account-settings/third-party-auth/data/reducers.js","webpack://@edx/frontend-app-account/./src/account-settings/third-party-auth/data/service.js","webpack://@edx/frontend-app-account/./src/account-settings/third-party-auth/data/sagas.js","webpack://@edx/frontend-app-account/./src/account-settings/coaching/data/service.js","webpack://@edx/frontend-app-account/./src/account-settings/demographics/data/utils.js","webpack://@edx/frontend-app-account/./src/account-settings/demographics/data/service.js","webpack://@edx/frontend-app-account/./src/account-settings/data/service.js","webpack://@edx/frontend-app-account/./src/account-settings/certificate-preference/data/service.js","webpack://@edx/frontend-app-account/./src/account-settings/name-change/data/service.js","webpack://@edx/frontend-app-account/./src/account-settings/name-change/data/sagas.js","webpack://@edx/frontend-app-account/./src/account-settings/data/constants.js","webpack://@edx/frontend-app-account/./src/account-settings/BetaLanguageBanner.jsx","webpack://@edx/frontend-app-account/./src/account-settings/EmailField.jsx","webpack://@edx/frontend-app-account/./src/account-settings/OneTimeDismissibleAlert.jsx","webpack://@edx/frontend-app-account/./src/account-settings/DOBForm.jsx","webpack://@edx/frontend-app-account/./src/account-settings/coaching/CoachingToggle.messages.js","webpack://@edx/frontend-app-account/./src/account-settings/coaching/CoachingToggle.jsx","webpack://@edx/frontend-app-account/./src/account-settings/demographics/Checkboxes.jsx","webpack://@edx/frontend-app-account/./src/account-settings/demographics/DemographicsSection.messages.jsx","webpack://@edx/frontend-app-account/./src/account-settings/demographics/DemographicsSection.jsx","webpack://@edx/frontend-app-account/./src/notification-preferences/data/actions.js","webpack://@edx/frontend-app-account/./src/notification-preferences/data/service.js","webpack://@edx/frontend-app-account/./src/notification-preferences/data/thunks.js","webpack://@edx/frontend-app-account/./src/account-settings/AccountSettingsPage.jsx","webpack://@edx/frontend-app-account/./src/account-settings/data/reducers.js","webpack://@edx/frontend-app-account/./src/account-settings/data/sagas.js","webpack://@edx/frontend-app-account/./src/account-settings/NotFoundPage.jsx","webpack://@edx/frontend-app-account/./src/constants.js","webpack://@edx/frontend-app-account/./src/notification-preferences/data/reducers.js","webpack://@edx/frontend-app-account/./src/data/sagas.js","webpack://@edx/frontend-app-account/./src/data/configureStore.js","webpack://@edx/frontend-app-account/./src/data/reducers.js","webpack://@edx/frontend-app-account/./src/id-verification/data/selectors.js","webpack://@edx/frontend-app-account/./src/id-verification/getUserMediaShim.js","webpack://@edx/frontend-app-account/./src/hooks.js","webpack://@edx/frontend-app-account/./src/id-verification/data/service.js","webpack://@edx/frontend-app-account/./src/id-verification/IdVerification.messages.js","webpack://@edx/frontend-app-account/./src/id-verification/IdVerificationContext.jsx","webpack://@edx/frontend-app-account/./src/id-verification/AccessBlocked.jsx","webpack://@edx/frontend-app-account/./src/id-verification/VerifiedNameContext.jsx","webpack://@edx/frontend-app-account/./src/id-verification/IdVerificationContextProvider.jsx","webpack://@edx/frontend-app-account/./src/id-verification/routing-utilities.js","webpack://@edx/frontend-app-account/./src/id-verification/panels/BasePanel.jsx","webpack://@edx/frontend-app-account/./src/id-verification/assets/example-card.png","webpack://@edx/frontend-app-account/./src/id-verification/panels/ReviewRequirementsPanel.jsx","webpack://@edx/frontend-app-account/./src/id-verification/panels/EnableCameraDirectionsPanel.jsx","webpack://@edx/frontend-app-account/./src/id-verification/panels/UnsupportedCameraDirectionsPanel.jsx","webpack://@edx/frontend-app-account/./src/id-verification/panels/RequestCameraAccessPanel.jsx","webpack://@edx/frontend-app-account/./src/id-verification/CameraHelp.jsx","webpack://@edx/frontend-app-account/./src/id-verification/panels/PortraitPhotoContextPanel.jsx","webpack://@edx/frontend-app-account/./src/id-verification/Camera.jsx","webpack://@edx/frontend-app-account/./src/id-verification/panels/TakePortraitPhotoPanel.jsx","webpack://@edx/frontend-app-account/./src/id-verification/panels/IdContextPanel.jsx","webpack://@edx/frontend-app-account/./src/id-verification/panels/GetNameIdPanel.jsx","webpack://@edx/frontend-app-account/./src/id-verification/ImagePreview.jsx","webpack://@edx/frontend-app-account/./src/id-verification/SupportedMediaTypes.jsx","webpack://@edx/frontend-app-account/./src/id-verification/ImageFileUpload.jsx","webpack://@edx/frontend-app-account/./src/id-verification/CollapsibleImageHelp.jsx","webpack://@edx/frontend-app-account/./src/id-verification/panels/TakeIdPhotoPanel.jsx","webpack://@edx/frontend-app-account/./src/id-verification/CameraHelpWithUpload.jsx","webpack://@edx/frontend-app-account/./src/id-verification/panels/SummaryPanel.jsx","webpack://@edx/frontend-app-account/./src/id-verification/panels/SubmittedPanel.jsx","webpack://@edx/frontend-app-account/./src/id-verification/IdVerificationPage.jsx","webpack://@edx/frontend-app-account/./src/account-settings/coaching/CoachingConsent.messages.js","webpack://@edx/frontend-app-account/./src/account-settings/coaching/CoachingConsentForm.jsx","webpack://@edx/frontend-app-account/./src/logo.svg","webpack://@edx/frontend-app-account/./src/account-settings/coaching/CoachingConsent.jsx","webpack://@edx/frontend-app-account/./src/i18n/index.js","webpack://@edx/frontend-app-account/./src/head/messages.js","webpack://@edx/frontend-app-account/./src/head/Head.jsx","webpack://@edx/frontend-app-account/./src/notification-preferences/messages.js","webpack://@edx/frontend-app-account/./src/notification-preferences/NotificationCourses.jsx","webpack://@edx/frontend-app-account/./src/notification-preferences/ToggleSwitch.jsx","webpack://@edx/frontend-app-account/./src/notification-preferences/NotificationPreferenceRow.jsx","webpack://@edx/frontend-app-account/./src/notification-preferences/NotificationPreferenceApp.jsx","webpack://@edx/frontend-app-account/./src/notification-preferences/NotificationPreferences.jsx","webpack://@edx/frontend-app-account/./src/index.jsx"],"sourcesContent":["import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  'account.settings.page.heading': {\n    id: 'account.settings.page.heading',\n    defaultMessage: 'Account Settings',\n    description: 'The page heading for the account settings page.',\n  },\n  'account.settings.loading.message': {\n    id: 'account.settings.loading.message',\n    defaultMessage: 'Loading...',\n    description: 'Message when data is being loaded',\n  },\n  'account.settings.loading.error': {\n    id: 'account.settings.loading.error',\n    defaultMessage: 'Error: {error}',\n    description: 'Message when data failed to load',\n  },\n  'account.settings.banner.beta.language': {\n    id: 'account.settings.banner.beta.language',\n    defaultMessage: 'You have set your language to {beta_language}, which is currently not fully translated. You can help us translate this language fully by joining the Transifex community and adding translations from English for learners that speak {beta_language}.',\n    description: 'Message when the user selects a beta language this is not yet fully translated.',\n  },\n  'account.settings.banner.beta.language.action.switch.back': {\n    id: 'account.settings.banner.beta.language.action.switch.back',\n    defaultMessage: 'Switch Back to {previous_language}',\n    description: 'Button on the beta language message to switch back to the previous language.',\n  },\n  'account.settings.banner.beta.language.action.help.translate': {\n    id: 'account.settings.banner.beta.language.action.help.translate',\n    defaultMessage: 'Help Translate into {beta_language}',\n    description: 'Button on the beta language message to help translate the beta language.',\n  },\n  'account.settings.section.account.information': {\n    id: 'account.settings.section.account.information',\n    defaultMessage: 'Account Information',\n    description: 'The basic account information section heading.',\n  },\n  'account.settings.section.account.information.description': {\n    id: 'account.settings.section.account.information.description',\n    defaultMessage: 'These settings include basic information about your account.',\n    description: 'The basic account information section heading description.',\n  },\n  'account.settings.section.profile.information': {\n    id: 'account.settings.section.profile.information',\n    defaultMessage: 'Profile Information',\n    description: 'The profile information section heading.',\n  },\n  'account.settings.section.demographics.information': {\n    id: 'account.settings.section.demographics.information',\n    defaultMessage: 'Optional Information',\n    description: 'The optional information section heading.',\n  },\n  'account.settings.section.site.preferences': {\n    id: 'account.settings.section.site.preferences',\n    defaultMessage: 'Site Preferences',\n    description: 'The site preferences section heading.',\n  },\n  'account.settings.section.linked.accounts': {\n    id: 'account.settings.section.linked.accounts',\n    defaultMessage: 'Linked Accounts',\n    description: 'The linked accounts section heading.',\n  },\n  'account.settings.section.linked.accounts.description': {\n    id: 'account.settings.section.linked.accounts.description',\n    defaultMessage: 'You can link your identity accounts to simplify signing in to {siteName}.',\n    description: 'The linked accounts section heading description.',\n  },\n  'account.settings.field.username': {\n    id: 'account.settings.field.username',\n    defaultMessage: 'Username',\n    description: 'Label for account settings username field.',\n  },\n  'account.settings.field.username.help.text': {\n    id: 'account.settings.field.username.help.text',\n    defaultMessage: 'The name that identifies you on {siteName}. You cannot change your username.',\n    description: 'Help text for the account settings username field.',\n  },\n  'account.settings.field.full.name': {\n    id: 'account.settings.field.full.name',\n    defaultMessage: 'Full name',\n    description: 'Label for account settings name field.',\n  },\n  'account.settings.field.full.name.empty': {\n    id: 'account.settings.field.full.name.empty',\n    defaultMessage: 'Add name',\n    description: 'Placeholder for empty account settings name field.',\n  },\n  'account.settings.field.full.name.help.text': {\n    id: 'account.settings.field.full.name.help.text',\n    defaultMessage: 'The name that is used for ID verification and that appears on your certificates.',\n    description: 'Help text for the account settings name field.',\n  },\n  'account.settings.field.full.name.help.text.default': {\n    id: 'account.settings.field.full.name.help.text.default',\n    defaultMessage: 'The name that appears on your public profile.',\n    description: 'Help text for the account settings name field.',\n  },\n  'account.settings.field.full.name.help.text.default.certificate': {\n    id: 'account.settings.field.full.name.help.text.default.certificate',\n    defaultMessage: 'This name is selected to appear on your certificates and public-facing records.',\n    description: 'Help text for the account settings name field.',\n  },\n  'account.settings.field.name.verified': {\n    id: 'account.settings.field.name.verified',\n    defaultMessage: 'Verified name',\n    description: 'Label for account settings verified name field.',\n  },\n  'account.settings.field.name.verified.help.text.verified': {\n    id: 'account.settings.field.name.verified.help.text.verified',\n    defaultMessage: 'This name has been verified by photo ID.',\n    description: 'Help text for the account settings verified name field when the name is verified.',\n  },\n  'account.settings.field.name.verified.help.text.verified.proctored': {\n    id: 'account.settings.field.name.verified.help.text.verified.proctored',\n    defaultMessage: 'This name has been verified by proctoring.',\n    description: 'Help text for the account settings verified name field when the name is verified through proctoring.',\n  },\n  'account.settings.field.name.verified.help.text.verified.certificate': {\n    id: 'account.settings.field.name.verified.help.text.verified.certificate',\n    defaultMessage: 'This name has been verified by photo ID, and is selected to appear on your certificates and public-facing records.',\n    description: 'Help text for the account settings verified name field when the name is selected for certificates.',\n  },\n  'account.settings.field.name.verified.help.text.verified.proctored.certificate': {\n    id: 'account.settings.field.name.verified.help.text.verified.proctored.certificate',\n    defaultMessage: 'This name has been verified by proctoring, and is selected to appear on your certificates and public-facing records.',\n    description: 'Help text for the account settings verified name field when the name is selected for certificates, and the name is verified through proctoring.',\n  },\n  'account.settings.field.name.verified.help.text.submitted': {\n    id: 'account.settings.field.name.verified.help.text.submitted',\n    defaultMessage: 'Verification has been submitted. This usually takes 48 hours or less. Verified name cannot be changed at this time.',\n    description: 'Help text for the account settings verified name field when a verified name has been submitted.',\n  },\n  'account.settings.field.name.verified.help.text.submitted.proctored': {\n    id: 'account.settings.field.name.verified.help.text.submitted.proctored',\n    defaultMessage: 'Your proctored exam has been submitted. Verified name cannot be changed at this time. Please check back in 2-5 days.',\n    description: 'Help text for the account settings verified name field when a verified name has been submitted through proctoring.',\n  },\n  'account.settings.field.name.verified.help.text.submitted.certificate': {\n    id: 'account.settings.field.name.verified.help.text.submitted.certificate',\n    defaultMessage: 'When identity verification is successful, this name will appear on your certificates and public-facing records. Verified name cannot be changed at this time.',\n    description: 'Help text for the account settings verified name field when a verified name has been submitted and will appear on certificates.',\n  },\n  'account.settings.field.name.verified.help.text.submitted.proctored.certificate': {\n    id: 'account.settings.field.name.verified.help.text.submitted.proctored.certificate',\n    defaultMessage: 'Once your proctored exam passes review, this name will appear on your certificate and public-facing records. Verified Name cannot be changed at this time.',\n    description: 'Help text for the account settings verified name field when a verified name has been submitted through proctoring and will appear on certificates.',\n  },\n  'account.settings.field.name.verified.verification.alert': {\n    id: 'account.settings.field.name.verified.verification.help',\n    defaultMessage: 'Enter your name as it appears on your unexpired student, work, or government-issued identification card.',\n    description: 'Form label instructing the user to enter the name on their ID.',\n  },\n  'account.settings.field.full.name.help.text.submitted': {\n    id: 'account.settings.field.full.name.help.text.submitted',\n    defaultMessage: 'Verification has been submitted. This usually takes 48 hours or less. Full name cannot be changed at this time.',\n    description: 'Help text for the account settings full name field when a verified name has been submitted.',\n  },\n  'account.settings.field.full.name.help.text.submitted.proctored': {\n    id: 'account.settings.field.full.name.help.text.submitted.proctored',\n    defaultMessage: 'Your proctored exam has been submitted. Full name cannot be changed at this time. Please check back in 2-5 days.',\n    description: 'Help text for the account settings full name field when a verified name has been submitted through proctoring.',\n  },\n  'account.settings.field.full.name.help.text.submitted.certificate': {\n    id: 'account.settings.field.full.name.help.text.submitted.certificate',\n    defaultMessage: 'When identity verification is successful, this name will appear on your certificates and public-facing records. Full name cannot be changed at this time.',\n    description: 'Help text for the account settings full name field when a full name has been submitted and will appear on certificates.',\n  },\n  'account.settings.field.full.name.help.text.submitted.proctored.certificate': {\n    id: 'account.settings.field.full.name.help.text.submitted.proctored.certificate',\n    defaultMessage: 'Once your proctored exam passes review, this name will appear on your certificates and public-facing records. Full name cannot be changed at this time.',\n    description: 'Help text for the account settings full name field when a full name has been submitted and will appear on certificates.',\n  },\n  'account.settings.field.name.verified.success.message': {\n    id: 'account.settings.field.name.verified.success.message',\n    defaultMessage: 'Your identity verification request has successfully completed. You now have the option of selecting which name you prefer to appear on your certificates and public-records.',\n    description: 'The body of the success alert indicating that a user\\'s name has been verified',\n  },\n  'account.settings.field.name.verified.success.message.header': {\n    id: 'account.settings.field.name.verified.success.message.header',\n    defaultMessage: 'Your name change request is complete!',\n    description: 'The header of the success alert indicating that a user\\'s name has been verified',\n  },\n  'account.settings.field.name.verified.failure.message': {\n    id: 'account.settings.field.name.verified.failure.message',\n    defaultMessage: 'Your most recent identity verification attempt did not pass. Related account settings have been restored.',\n    description: 'The body of the failure alert indicating that a user\\'s name was not able to be verified',\n  },\n  'account.settings.field.name.verified.failure.message.header': {\n    id: 'account.settings.field.name.verified.failure.message.header',\n    defaultMessage: 'We were not able to verify your identity.',\n    description: 'The header of the failure alert indicating that a user\\'s name was not able to be verified',\n  },\n  'account.settings.field.name.verified.failure.message.help.link': {\n    id: 'account.settings.field.name.verified.failure.message.help.link',\n    defaultMessage: 'Learn more about ID verification',\n    description: 'The text of the button displayed when a user\\'s name was not able to be verified, intended to direct the user to a help article about ID verification.',\n  },\n  'account.settings.field.name.verified.submitted.message': {\n    id: 'account.settings.field.name.verified.submitted.message',\n    defaultMessage: 'Your identity verification request has been submitted and usually takes between 24 and 48 hours to complete.',\n    description: 'The body of the submitted alert indicating that a user\\'s name has been submitted for verification',\n  },\n  'account.settings.field.name.verified.submitted.message.certificate': {\n    id: 'account.settings.field.name.verified.submitted.message.certificate',\n    defaultMessage: 'When your request is approved, your updated name will appear on all associated certificates and public-facing records.',\n    description: 'The body of the submitted alert indicating that a user\\'s name will be updated on certificates.',\n  },\n  'account.settings.field.name.verified.submitted.message.header': {\n    id: 'account.settings.field.name.verified.submitted.message.header',\n    defaultMessage: 'Your name change request is almost complete!',\n    description: 'The header of the submitted alert indicating that a user\\'s name has been submitted for verification',\n  },\n  'account.settings.field.email': {\n    id: 'account.settings.field.email',\n    defaultMessage: 'Email address (Sign in)',\n    description: 'Label for account settings email field.',\n  },\n  'account.settings.field.email.empty': {\n    id: 'account.settings.field.email.empty',\n    defaultMessage: 'Add email address',\n    description: 'Placeholder for empty account settings email field.',\n  },\n  'account.settings.field.email.confirmation': {\n    id: 'account.settings.field.email.confirmation',\n    defaultMessage: 'We’ve sent a confirmation message to {value}. Click the link in the message to update your email address.',\n    description: 'Confirmation message for saving the account settings email field.',\n  },\n  'account.settings.field.email.help.text': {\n    id: 'account.settings.field.email.help.text',\n    defaultMessage: 'You receive messages from {siteName} and course teams at this address.',\n    description: 'Help text for the account settings email field.',\n  },\n  'account.settings.field.secondary.email': {\n    id: 'account.settings.field.secondary.email',\n    defaultMessage: 'Recovery email address',\n    description: 'Label for account settings recovery email field.',\n  },\n  'account.settings.field.secondary.email.empty': {\n    id: 'account.settings.field.secondary.email.empty',\n    defaultMessage: 'Add a recovery email address',\n    description: 'Placeholder for empty account settings recovery email field.',\n  },\n  'account.settings.field.secondary.email.confirmation': {\n    id: 'account.settings.field.secondary.email.confirmation',\n    defaultMessage: 'We’ve sent a confirmation message to {value}. Click the link in the message to update your recovery email address.',\n    description: 'Confirmation message for saving the account settings recovery email field.',\n  },\n  'account.settings.email.field.confirmation.header': {\n    id: 'account.settings.email.field.confirmation.header',\n    defaultMessage: 'One more step!',\n    description: 'The header of the confirmation alert saying we\\'ve sent a confirmation email',\n  },\n  'account.settings.field.dob': {\n    id: 'account.settings.field.dob',\n    defaultMessage: 'Year of birth',\n    description: 'Label for account settings year of birth field.',\n  },\n  'account.settings.field.dob.empty': {\n    id: 'account.settings.field.dob.empty',\n    defaultMessage: 'Add year of birth',\n    description: 'Placeholder for empty account settings year of birth field.',\n  },\n  'account.settings.field.year_of_birth.options.empty': {\n    id: 'account.settings.field.year_of_birth.options.empty',\n    defaultMessage: 'Select a year of birth',\n    description: 'Option for empty value on account settings year of birth field.',\n  },\n  'account.settings.field.dob.month': {\n    id: 'account.settings.field.dob.month',\n    defaultMessage: 'Month',\n    description: 'Label for account settings month of birth field.',\n  },\n  'account.settings.field.dob.year': {\n    id: 'account.settings.field.dob.year',\n    defaultMessage: 'Year',\n    description: 'Label for account settings year of birth field.',\n  },\n  'account.settings.field.dob.month.default': {\n    id: 'account.settings.field.month.year.default',\n    defaultMessage: 'Select month',\n    description: 'Default label for account settings month of birth field.',\n  },\n  'account.settings.field.dob.year.default': {\n    id: 'account.settings.field.dob.year.default',\n    defaultMessage: 'Select year',\n    description: 'Default label for account settings year of birth field.',\n  },\n  'account.settings.field.dob.form.button': {\n    id: 'account.settings.field.dob.form.button',\n    defaultMessage: 'Please confirm your date of birth',\n    description: 'Message to prompt user to enter dob',\n  },\n  'account.settings.field.dob.form.title': {\n    id: 'account.settings.field.dob.form.title',\n    defaultMessage: 'Enter your birth month and year',\n    description: 'Title of DOB form',\n  },\n  'account.settings.field.dob.form.help.text': {\n    id: 'account.settings.field.dob.form.help.text',\n    defaultMessage: 'We ask for birth month and year information to help us comply with our legal obligations.',\n    description: 'Help text for DOB form',\n  },\n  'account.settings.field.dob.form.success': {\n    id: 'account.settings.field.dob.form.success',\n    defaultMessage: 'Thank you for entering your information.',\n    description: 'Title of banner when date of birth is successfully entered',\n  },\n  'account.settings.field.month_of_birth.options.empty': {\n    id: 'account.settings.field.month_of_birth.options.empty',\n    defaultMessage: 'Select a month of birth',\n    description: 'Option for empty value on account settings month of birth field.',\n  },\n  'account.settingsfield.dob.error.general': {\n    id: 'account.settingsfield.dob.error.general',\n    defaultMessage: 'A technical error occurred. Please try again.',\n    description: 'Generic error message.',\n  },\n  'account.settings.field.country': {\n    id: 'account.settings.field.country',\n    defaultMessage: 'Country',\n    description: 'Label for account settings country field.',\n  },\n  'account.settings.field.country.empty': {\n    id: 'account.settings.field.country.empty',\n    defaultMessage: 'Add country',\n    description: 'Placeholder for empty account settings country field.',\n  },\n  'account.settings.field.country.options.empty': {\n    id: 'account.settings.field.country.options.empty',\n    defaultMessage: 'Select a Country',\n    description: 'Option for empty value on account settings country field.',\n  },\n  'account.settings.field.state': {\n    id: 'account.settings.field.state',\n    defaultMessage: 'State',\n    description: 'Label for account settings state field.',\n  },\n  'account.settings.field.state.empty': {\n    id: 'account.settings.field.state.empty',\n    defaultMessage: 'Add state',\n    description: 'Placeholder for empty account settings state field.',\n  },\n  'account.settings.field.state.options.empty': {\n    id: 'account.settings.field.state.options.empty',\n    defaultMessage: 'Select a State',\n    description: 'Option for empty value on account settings state field.',\n  },\n  'account.settings.field.site.language': {\n    id: 'account.settings.field.site.language',\n    defaultMessage: 'Site language',\n    description: 'Label for account settings site language field.',\n  },\n  'account.settings.field.site.language.help.text': {\n    id: 'account.settings.field.site.language.help.text',\n    defaultMessage: 'The language used throughout this site. This site is currently available in a limited number of languages.',\n    description: 'Help text for the site language field.',\n  },\n  'account.settings.field.education': {\n    id: 'account.settings.field.education',\n    defaultMessage: 'Education',\n    description: 'Label for account settings education field.',\n  },\n  'account.settings.field.education.empty': {\n    id: 'account.settings.field.education.empty',\n    defaultMessage: 'Add level of education',\n    description: 'Placeholder for empty account settings education field.',\n  },\n  'account.settings.field.education.levels.empty': {\n    id: 'account.settings.field.education.levels.empty',\n    defaultMessage: 'Select a level of education',\n    description: 'Placeholder for the education levels dropdown.',\n  },\n  'account.settings.field.education.levels.p': {\n    id: 'account.settings.field.education.levels.p',\n    defaultMessage: 'Doctorate',\n    description: 'Selected by the user if their highest level of education is a doctorate degree.',\n  },\n  'account.settings.field.education.levels.m': {\n    id: 'account.settings.field.education.levels.m',\n    defaultMessage: \"Master's or professional degree\",\n    description: \"Selected by the user if their highest level of education is a master's or professional degree from a college or university.\",\n  },\n  'account.settings.field.education.levels.b': {\n    id: 'account.settings.field.education.levels.b',\n    defaultMessage: \"Bachelor's Degree\",\n    description: \"Selected by the user if their highest level of education is a four year college or university bachelor's degree.\",\n  },\n  'account.settings.field.education.levels.a': {\n    id: 'account.settings.field.education.levels.a',\n    defaultMessage: \"Associate's degree\",\n    description: \"Selected by the user if their highest level of education is an associate's degree. 1-2 years of college or university.\",\n  },\n  'account.settings.field.education.levels.hs': {\n    id: 'account.settings.field.education.levels.hs',\n    defaultMessage: 'Secondary/high school',\n    description: 'Selected by the user if their highest level of education is secondary or high school.  9-12 years of education.',\n  },\n  'account.settings.field.education.levels.jhs': {\n    id: 'account.settings.field.education.levels.jhs',\n    defaultMessage: 'Junior secondary/junior high/middle school',\n    description: 'Selected by the user if their highest level of education is junior or middle school. 6-8 years of education.',\n  },\n  'account.settings.field.education.levels.el': {\n    id: 'account.settings.field.education.levels.el',\n    defaultMessage: 'Elementary/primary school',\n    description: 'Selected by the user if their highest level of education is elementary or primary school.  1-5 years of education.',\n  },\n  'account.settings.field.education.levels.none': {\n    id: 'account.settings.field.education.levels.none',\n    defaultMessage: 'No formal education',\n    description: 'Selected by the user to describe their education.',\n  },\n  'account.settings.field.education.levels.o': {\n    id: 'account.settings.field.education.levels.o',\n    defaultMessage: 'Other education',\n    description: 'Selected by the user if they have a type of education not described by the other choices.',\n  },\n\n  'account.settings.field.gender': {\n    id: 'account.settings.field.gender',\n    defaultMessage: 'Gender',\n    description: 'Label for account settings gender field.',\n  },\n  'account.settings.field.gender.empty': {\n    id: 'account.settings.field.gender.empty',\n    defaultMessage: 'Add gender',\n    description: 'Placeholder for empty account settings gender field.',\n  },\n  'account.settings.field.gender.options.empty': {\n    id: 'account.settings.field.gender.options.empty',\n    defaultMessage: 'Select a gender',\n    description: 'Placeholder for the gender options dropdown.',\n  },\n  'account.settings.field.gender.options.f': {\n    id: 'account.settings.field.gender.options.f',\n    defaultMessage: 'Female',\n    description: 'The label for the female gender option.',\n  },\n  'account.settings.field.gender.options.m': {\n    id: 'account.settings.field.gender.options.m',\n    defaultMessage: 'Male',\n    description: 'The label for the male gender option.',\n  },\n  'account.settings.field.gender.options.o': {\n    id: 'account.settings.field.gender.options.o',\n    defaultMessage: 'Other',\n    description: 'The label for catch-all gender option.',\n  },\n  'account.settings.field.language.proficiencies': {\n    id: 'account.settings.field.language.proficiencies',\n    defaultMessage: 'Spoken language',\n    description: 'Label for account settings spoken language field.',\n  },\n  'account.settings.field.language.proficiencies.empty': {\n    id: 'account.settings.field.language.proficiencies.empty',\n    defaultMessage: 'Add a spoken language',\n    description: 'Placeholder for empty account settings spoken language field.',\n  },\n  'account.settings.field.language_proficiencies.options.empty': {\n    id: 'account.settings.field.language_proficiencies.options.empty',\n    defaultMessage: 'Select a Language',\n    description: 'Option for an empty value on account settings spoken language field.',\n  },\n\n  'account.settings.field.time.zone': {\n    id: 'account.settings.field.time.zone',\n    defaultMessage: 'Time zone',\n    description: 'Label for time zone settings field.',\n  },\n  'account.settings.field.time.zone.empty': {\n    id: 'account.settings.field.time.zone.empty',\n    defaultMessage: 'Set time zone',\n    description: 'Placeholder for empty for time zone settings field.',\n  },\n  'account.settings.field.time.zone.description': {\n    id: 'account.settings.field.time.zone.description',\n    defaultMessage: 'Select the time zone for displaying course dates. If you do not specify a time zone, course dates, including assignment deadlines, will be displayed in your browser’s local time zone.',\n    description: 'Description for time zone settings field.',\n  },\n  'account.settings.field.time.zone.default': {\n    id: 'account.settings.field.time.zone.default',\n    defaultMessage: 'Default (Local Time Zone)',\n    description: 'The default option for a time zone.',\n  },\n  'account.settings.field.time.zone.all': {\n    id: 'account.settings.field.time.zone.all',\n    defaultMessage: 'All time zones',\n    description: 'The label for the group of options for all time zones.',\n  },\n  'account.settings.field.time.zone.country': {\n    id: 'account.settings.field.time.zone.country',\n    defaultMessage: 'Country time zones',\n    description: 'The group of time zone options for a country.',\n  },\n\n  'account.settings.section.social.media': {\n    id: 'account.settings.section.social.media',\n    defaultMessage: 'Social Media Links',\n    description: 'Section header for social media links settings',\n  },\n  'account.settings.section.social.media.description': {\n    id: 'account.settings.section.social.media.description',\n    defaultMessage: 'Optionally, link your personal accounts to the social media icons on your {siteName} profile.',\n    description: 'Section subheader for social media links settings',\n  },\n  'account.settings.field.social.platform.name.linkedin': {\n    id: 'account.settings.field.social.platform.name.linkedin',\n    defaultMessage: 'LinkedIn',\n    description: 'Label for LinkedIn',\n  },\n  'account.settings.field.social.platform.name.linkedin.empty': {\n    id: 'account.settings.field.social.platform.name.linkedin.empty',\n    defaultMessage: 'Add LinkedIn profile',\n    description: 'Placeholder for an empty LinkedIn field',\n  },\n  'account.settings.jump.nav.delete.account': {\n    id: 'account.settings.jump.nav.delete.account',\n    defaultMessage: 'Delete My Account',\n    description: 'Header for the user account deletion area',\n  },\n  'account.settings.field.social.platform.name.twitter': {\n    id: 'account.settings.field.social.platform.name.twitter',\n    defaultMessage: 'Twitter',\n    description: 'Label for Twitter',\n  },\n  'account.settings.field.social.platform.name.twitter.empty': {\n    id: 'account.settings.field.social.platform.name.twitter.empty',\n    defaultMessage: 'Add Twitter profile',\n    description: 'Placeholder for an empty Twitter field',\n  },\n\n  'account.settings.field.social.platform.name.facebook': {\n    id: 'account.settings.field.social.platform.name.facebook',\n    defaultMessage: 'Facebook',\n    description: 'Label for Facebook',\n  },\n  'account.settings.field.social.platform.name.facebook.empty': {\n    id: 'account.settings.field.social.platform.name.facebook.empty',\n    defaultMessage: 'Add Facebook profile',\n    description: 'Placeholder for an empty Facebook field',\n  },\n  'account.settings.editable.field.action.save': {\n    id: 'account.settings.editable.field.action.save',\n    defaultMessage: 'Save',\n    description: 'The save button on an editable field',\n  },\n  'account.settings.editable.field.action.cancel': {\n    id: 'account.settings.editable.field.action.cancel',\n    defaultMessage: 'Cancel',\n    description: 'The cancel button on an editable field',\n  },\n  'account.settings.editable.field.action.edit': {\n    id: 'account.settings.editable.field.action.edit',\n    defaultMessage: 'Edit',\n    description: 'The edit button on an editable field',\n  },\n  'account.settings.static.field.empty': {\n    id: 'account.settings.static.field.empty',\n    defaultMessage: 'No value set. Contact your {enterprise} administrator to make changes.',\n    description: 'The placeholder for an empty but uneditable field',\n  },\n  'account.settings.static.field.empty.no.admin': {\n    id: 'account.settings.static.field.empty.no.admin',\n    defaultMessage: 'No value set.',\n    description: 'The placeholder for an empty but uneditable field when there is no administrator',\n  },\n  'notification.preferences.notifications.label': {\n    id: 'notification.preferences.notifications.label',\n    defaultMessage: 'Notifications',\n    description: 'Label for Notifications',\n  },\n});\n\nexport default messages;\n","/**\n * Helper class to save time when writing out action types for asynchronous methods.  Also helps\n * ensure that actions are namespaced.\n */\nexport class AsyncActionType {\n  constructor(topic, name) {\n    this.topic = topic;\n    this.name = name;\n  }\n\n  get BASE() {\n    return `${this.topic}__${this.name}`;\n  }\n\n  get BEGIN() {\n    return `${this.topic}__${this.name}__BEGIN`;\n  }\n\n  get SUCCESS() {\n    return `${this.topic}__${this.name}__SUCCESS`;\n  }\n\n  get FAILURE() {\n    return `${this.topic}__${this.name}__FAILURE`;\n  }\n\n  get RESET() {\n    return `${this.topic}__${this.name}__RESET`;\n  }\n\n  get FORBIDDEN() {\n    return `${this.topic}__${this.name}__FORBIDDEN`;\n  }\n}\n\n/**\n * Given a state tree and an array representing a set of keys to traverse in that tree, returns\n * the portion of the tree at that key path.\n *\n * Example:\n *\n * const result = getModuleState(\n *   {\n *     first: { red: { awesome: 'sauce' }, blue: { weak: 'sauce' } },\n *     second: { other: 'data', }\n *   },\n *   ['first', 'red']\n * );\n *\n * result will be:\n *\n * {\n *   awesome: 'sauce'\n * }\n */\nexport function getModuleState(state, originalPath) {\n  const path = [...originalPath]; // don't modify your argument\n  if (path.length < 1) {\n    return state;\n  }\n  const key = path.shift();\n  if (state[key] === undefined) {\n    throw new Error(`Unexpected state key ${key} given to getModuleState. Is your state path set up correctly?`);\n  }\n  return getModuleState(state[key], path);\n}\n","import { put } from 'redux-saga/effects';\nimport { logError } from '@edx/frontend-platform/logging';\nimport { history } from '@edx/frontend-platform';\n\nexport default function* handleFailure(error, failureAction = null, failureRedirectPath = null) {\n  if (error.fieldErrors && failureAction !== null) {\n    yield put(failureAction({ fieldErrors: error.fieldErrors }));\n  }\n  logError(error);\n  if (failureAction !== null) {\n    yield put(failureAction(error.message));\n  }\n  if (failureRedirectPath !== null) {\n    history.push(failureRedirectPath);\n  }\n}\n","/**\n * Turns field errors of the form:\n *\n * {\n *   \"name\":{\n *     \"developer_message\": \"Nerdy message here\",\n *     \"user_message\": \"This value is invalid.\"\n *   },\n *   \"other_field\": {\n *     \"developer_message\": \"Other Nerdy message here\",\n *     \"user_message\": \"This other value is invalid.\"\n *   }\n * }\n *\n * Into:\n *\n * {\n *   \"name\": \"This value is invalid.\",\n *   \"other_field\": \"This other value is invalid\"\n * }\n */\nexport function unpackFieldErrors(fieldErrors) {\n  return Object.entries(fieldErrors).reduce((acc, [k, v]) => {\n    acc[k] = v.user_message;\n    return acc;\n  }, {});\n}\n\n/**\n * Processes and re-throws request errors.  If the response contains a field_errors field, will\n * massage the data into a form expected by the client.\n *\n * Field errors will be packaged as an api error with a fieldErrors field usable by the client.\n * Takes an optional unpack function which is used to process the field errors,\n * otherwise uses the default unpackFieldErrors function.\n *\n * @param error The original error object.\n * @param unpackFunction (Optional) A function to use to unpack the field errors as a replacement\n * for the default.\n */\nexport function handleRequestError(error, unpackFunction = unpackFieldErrors) {\n  if (error.response && error.response.data.field_errors) {\n    const apiError = Object.create(error);\n    apiError.fieldErrors = unpackFunction(error.response.data.field_errors);\n    throw apiError;\n  }\n  throw error;\n}\n","import { AsyncActionType } from './utils';\n\nexport const FETCH_SETTINGS = new AsyncActionType('ACCOUNT_SETTINGS', 'FETCH_SETTINGS');\nexport const SAVE_SETTINGS = new AsyncActionType('ACCOUNT_SETTINGS', 'SAVE_SETTINGS');\nexport const SAVE_MULTIPLE_SETTINGS = new AsyncActionType('ACCOUNT_SETTINGS', 'SAVE_MULTIPLE_SETTINGS');\nexport const FETCH_TIME_ZONES = new AsyncActionType('ACCOUNT_SETTINGS', 'FETCH_TIME_ZONES');\nexport const SAVE_PREVIOUS_SITE_LANGUAGE = 'SAVE_PREVIOUS_SITE_LANGUAGE';\nexport const OPEN_FORM = 'OPEN_FORM';\nexport const CLOSE_FORM = 'CLOSE_FORM';\nexport const UPDATE_DRAFT = 'UPDATE_DRAFT';\nexport const RESET_DRAFTS = 'RESET_DRAFTS';\nexport const BEGIN_NAME_CHANGE = 'BEGIN_NAME_CHANGE';\n\n// FETCH SETTINGS ACTIONS\n\nexport const fetchSettings = () => ({\n  type: FETCH_SETTINGS.BASE,\n});\n\nexport const fetchSettingsBegin = () => ({\n  type: FETCH_SETTINGS.BEGIN,\n});\n\nexport const fetchSettingsSuccess = ({\n  values,\n  thirdPartyAuthProviders,\n  profileDataManager,\n  timeZones,\n  verifiedNameHistory,\n}) => ({\n  type: FETCH_SETTINGS.SUCCESS,\n  payload: {\n    values,\n    thirdPartyAuthProviders,\n    profileDataManager,\n    timeZones,\n    verifiedNameHistory,\n  },\n});\n\nexport const fetchSettingsFailure = error => ({\n  type: FETCH_SETTINGS.FAILURE,\n  payload: { error },\n});\n\nexport const fetchSettingsReset = () => ({\n  type: FETCH_SETTINGS.RESET,\n});\n\n// FORM STATE ACTIONS\n\nexport const openForm = formId => ({\n  type: OPEN_FORM,\n  payload: { formId },\n});\n\nexport const closeForm = formId => ({\n  type: CLOSE_FORM,\n  payload: { formId },\n});\n\nexport const updateDraft = (name, value) => ({\n  type: UPDATE_DRAFT,\n  payload: {\n    name,\n    value,\n  },\n});\n\nexport const resetDrafts = () => ({\n  type: RESET_DRAFTS,\n});\n\nexport const beginNameChange = (formId) => ({\n  type: BEGIN_NAME_CHANGE,\n  payload: { formId },\n});\n// SAVE SETTINGS ACTIONS\n\nexport const saveSettings = (formId, commitValues) => ({\n  type: SAVE_SETTINGS.BASE,\n  payload: { formId, commitValues },\n});\n\nexport const saveSettingsBegin = () => ({\n  type: SAVE_SETTINGS.BEGIN,\n});\n\nexport const saveSettingsSuccess = (values, confirmationValues) => ({\n  type: SAVE_SETTINGS.SUCCESS,\n  payload: { values, confirmationValues },\n});\n\nexport const saveSettingsReset = () => ({\n  type: SAVE_SETTINGS.RESET,\n});\n\nexport const saveSettingsFailure = ({ fieldErrors, message }) => ({\n  type: SAVE_SETTINGS.FAILURE,\n  payload: { errors: fieldErrors, message },\n});\n\nexport const savePreviousSiteLanguage = previousSiteLanguage => ({\n  type: SAVE_PREVIOUS_SITE_LANGUAGE,\n  payload: { previousSiteLanguage },\n});\n\nexport const saveMultipleSettings = (settingsArray, form = null) => ({\n  type: SAVE_MULTIPLE_SETTINGS.BASE,\n  payload: { settingsArray, form },\n});\n\nexport const saveMultipleSettingsBegin = () => ({\n  type: SAVE_MULTIPLE_SETTINGS.BEGIN,\n});\n\nexport const saveMultipleSettingsSuccess = settingsArray => ({\n  type: SAVE_MULTIPLE_SETTINGS.SUCCESS,\n  payload: { settingsArray },\n});\n\nexport const saveMultipleSettingsFailure = ({ fieldErrors, message }) => ({\n  type: SAVE_MULTIPLE_SETTINGS.FAILURE,\n  payload: { errors: fieldErrors, message },\n});\n\n// FETCH TIME_ZONE ACTIONS\n\nexport const fetchTimeZones = country => ({\n  type: FETCH_TIME_ZONES.BASE,\n  payload: { country },\n});\n\nexport const fetchTimeZonesSuccess = timeZones => ({\n  type: FETCH_TIME_ZONES.SUCCESS,\n  payload: { timeZones },\n});\n","import { AsyncActionType } from '../data/utils';\n\nexport const FETCH_SITE_LANGUAGES = new AsyncActionType('SITE_LANGUAGE', 'FETCH_SITE_LANGUAGES');\n\nexport const fetchSiteLanguages = () => ({\n  type: FETCH_SITE_LANGUAGES.BASE,\n});\n\nexport const fetchSiteLanguagesBegin = () => ({\n  type: FETCH_SITE_LANGUAGES.BEGIN,\n});\n\nexport const fetchSiteLanguagesSuccess = siteLanguageList => ({\n  type: FETCH_SITE_LANGUAGES.SUCCESS,\n  payload: { siteLanguageList },\n});\n\nexport const fetchSiteLanguagesFailure = error => ({\n  type: FETCH_SITE_LANGUAGES.FAILURE,\n  payload: { error },\n});\n\nexport const fetchSiteLanguagesReset = () => ({\n  type: FETCH_SITE_LANGUAGES.RESET,\n});\n","import { FETCH_SITE_LANGUAGES } from './actions';\n\nexport const defaultState = {\n  loading: false,\n  loaded: false,\n  loadingError: null,\n  siteLanguageList: [],\n};\n\nconst reducer = (state = defaultState, action = null) => {\n  if (action !== null) {\n    switch (action.type) {\n      case FETCH_SITE_LANGUAGES.BEGIN:\n        return {\n          ...state,\n          loading: true,\n          loaded: false,\n          loadingError: null,\n        };\n      case FETCH_SITE_LANGUAGES.SUCCESS:\n        return {\n          ...state,\n          siteLanguageList: action.payload.siteLanguageList,\n          loading: false,\n          loaded: true,\n          loadingError: null,\n        };\n      case FETCH_SITE_LANGUAGES.FAILURE:\n        return {\n          ...state,\n          loading: false,\n          loaded: false,\n          loadingError: action.payload.error,\n        };\n      case FETCH_SITE_LANGUAGES.RESET:\n        return {\n          ...state,\n          loading: false,\n          loaded: false,\n          loadingError: null,\n        };\n      default:\n    }\n  }\n  return state;\n};\n\nexport default reducer;\n","const siteLanguageList = [\n  {\n    code: 'en',\n    name: 'English',\n    released: true,\n  },\n  {\n    code: 'ar',\n    name: 'العربية',\n    released: true,\n  },\n  {\n    code: 'ca',\n    name: 'Català',\n    released: false,\n  },\n  {\n    code: 'es-419',\n    name: 'Español (Latinoamérica)',\n    released: true,\n  },\n  {\n    code: 'fa-ir',\n    name: 'فارسی',\n    released: true,\n  },\n  {\n    code: 'fr',\n    name: 'Français',\n    released: true,\n  },\n  {\n    code: 'he',\n    name: 'עברית',\n    released: false,\n  },\n  {\n    code: 'id',\n    name: 'Bahasa Indonesia',\n    released: false,\n  },\n  {\n    code: 'ko-kr',\n    name: '한국어 (대한민국)',\n    released: false,\n  },\n  {\n    code: 'pl',\n    name: 'Polski',\n    released: false,\n  },\n  {\n    code: 'pt-br',\n    name: 'Português (Brasil)',\n    released: false,\n  },\n  {\n    code: 'ru',\n    name: 'Русский',\n    released: false,\n  },\n  {\n    code: 'th',\n    name: 'ไทย',\n    released: false,\n  },\n  {\n    code: 'uk',\n    name: 'Українська',\n    released: false,\n  },\n  {\n    code: 'zh-cn',\n    name: '中文 (简体)',\n    released: true,\n  },\n  {\n    code: 'pt',\n    name: 'Português',\n    released: true,\n  },\n  {\n    code: 'it',\n    name: 'Italian',\n    released: true,\n  },\n  {\n    code: 'de',\n    name: 'German',\n    released: true,\n  },\n  {\n    code: 'hi',\n    name: 'Hindi',\n    released: true,\n  },\n  {\n    code: 'fr-ca',\n    name: 'French (CA)',\n    released: true,\n  },\n];\n\nexport default siteLanguageList;\n","import { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport { convertKeyNames, snakeCaseObject } from '@edx/frontend-platform/utils';\nimport siteLanguageList from './constants';\n\nexport async function getSiteLanguageList() {\n  return siteLanguageList;\n}\n\nexport async function patchPreferences(username, params) {\n  let processedParams = snakeCaseObject(params);\n  processedParams = convertKeyNames(processedParams, {\n    pref_lang: 'pref-lang',\n  });\n\n  await getAuthenticatedHttpClient()\n    .patch(`${getConfig().LMS_BASE_URL}/api/user/v1/preferences/${username}`, processedParams, {\n      headers: { 'Content-Type': 'application/merge-patch+json' },\n    });\n\n  return params; // TODO: Once the server returns the updated preferences object, return that.\n}\n\nexport async function postSetLang(code) {\n  const formData = new FormData();\n  formData.append('language', code);\n\n  await getAuthenticatedHttpClient()\n    .post(`${getConfig().LMS_BASE_URL}/i18n/setlang/`, formData, {\n      headers: { 'X-Requested-With': 'XMLHttpRequest' },\n    });\n}\n","import { call, put, takeEvery } from 'redux-saga/effects';\n\nimport {\n  fetchSiteLanguagesBegin,\n  fetchSiteLanguagesSuccess,\n  fetchSiteLanguagesFailure,\n  FETCH_SITE_LANGUAGES,\n} from './actions';\n\nimport { getSiteLanguageList } from './service';\nimport { handleFailure } from '../data/utils';\n\nfunction* handleFetchSiteLanguages() {\n  try {\n    yield put(fetchSiteLanguagesBegin());\n    const siteLanguageList = yield call(getSiteLanguageList);\n    yield put(fetchSiteLanguagesSuccess(siteLanguageList));\n  } catch (e) {\n    yield call(handleFailure, e, fetchSiteLanguagesFailure);\n  }\n}\n\nexport default function* saga() {\n  yield takeEvery(FETCH_SITE_LANGUAGES.BASE, handleFetchSiteLanguages);\n}\n","import { createSelector } from 'reselect';\nimport { getModuleState } from '../data/utils';\n\nexport const storePath = ['accountSettings', 'siteLanguage'];\n\nconst siteLanguageSelector = state => getModuleState(state, storePath);\n\nexport const siteLanguageListSelector = createSelector(\n  siteLanguageSelector,\n  siteLanguage => siteLanguage.siteLanguageList,\n);\n\nexport const siteLanguageOptionsSelector = createSelector(\n  siteLanguageSelector,\n  siteLanguage => siteLanguage.siteLanguageList.map(({ code, name }) => ({\n    value: code,\n    label: name,\n  })),\n);\n","/**\n * Compare two dates.\n * @param {*} a the first date\n * @param {*} b the second date\n * @returns a negative integer if a > b, a positive integer if a < b, or 0 if a = b\n */\nexport function compareVerifiedNamesByCreatedDate(a, b) {\n  const aTimeSinceEpoch = new Date(a.created).getTime();\n  const bTimeSinceEpoch = new Date(b.created).getTime();\n  return bTimeSinceEpoch - aTimeSinceEpoch;\n}\n\n/**\n *\n * @param {*} verifiedNames a list of verified name objects, where each object has at least the\n *                          following keys: created, status, and verified_name.\n * @returns the most recent verified name object from the list parameter with the 'pending' or\n *          'accepted' status, if one exists; otherwise, null\n */\nexport function getMostRecentApprovedOrPendingVerifiedName(verifiedNames) {\n  // clone array so as not to modify original array\n  const names = [...verifiedNames];\n\n  if (Array.isArray(names)) {\n    names.sort(compareVerifiedNamesByCreatedDate);\n  }\n\n  // We only want to consider a subset of verified names when determining the value of nameOnAccount.\n  // approved: consider this status, as the name has been verified by IDV and should supersede the full name\n  //           (profile name).\n  // pending: consider this status, as the learner has started the name change process through the\n  //          Account Settings page, and has been navigated to IDV to complete the name change process.\n  // submitted: do not consider this status, as the name has already been submitted for verification through\n  //            IDV but has not yet been verified\n  // denied: do not consider this status because the name was already denied via the IDV process\n  const applicableNames = names.filter(name => ['approved', 'pending'].includes(name.status));\n  const applicableName = applicableNames.length > 0 ? applicableNames[0].verified_name : null;\n\n  return applicableName;\n}\n","import { createSelector, createStructuredSelector } from 'reselect';\nimport { siteLanguageListSelector, siteLanguageOptionsSelector } from '../site-language';\nimport { compareVerifiedNamesByCreatedDate } from '../../utils';\n\nexport const storeName = 'accountSettings';\n\nexport const accountSettingsSelector = state => ({ ...state[storeName] });\n\nconst editableFieldNameSelector = (state, props) => props.name;\n\nconst verifiedNameSettingsSelector = createSelector(\n  accountSettingsSelector,\n  accountSettings => ({\n    history: accountSettings.verifiedNameHistory.results,\n    useVerifiedNameForCerts: accountSettings?.verifiedNameHistory.use_verified_name_for_certs,\n  }),\n);\n\nconst sortedVerifiedNameHistorySelector = createSelector(\n  verifiedNameSettingsSelector,\n  verifiedNameSettings => {\n    const { history } = verifiedNameSettings;\n\n    if (Array.isArray(history)) {\n      return history.sort(compareVerifiedNamesByCreatedDate);\n    }\n\n    return [];\n  },\n);\n\nconst mostRecentVerifiedNameSelector = createSelector(\n  sortedVerifiedNameHistorySelector,\n  sortedHistory => (sortedHistory.length > 0 ? sortedHistory[0] : null),\n);\n\nconst mostRecentApprovedVerifiedNameValueSelector = createSelector(\n  sortedVerifiedNameHistorySelector,\n  mostRecentVerifiedNameSelector,\n  (sortedHistory, mostRecentVerifiedName) => {\n    const approvedVerifiedNames = sortedHistory.filter(name => name.status === 'approved');\n    const approvedVerifiedName = approvedVerifiedNames.length > 0 ? approvedVerifiedNames[0] : null;\n\n    let verifiedName = null;\n    switch (mostRecentVerifiedName && mostRecentVerifiedName.status) {\n      case 'approved':\n      case 'denied':\n      case 'pending':\n        verifiedName = approvedVerifiedName;\n        break;\n      case 'submitted':\n        verifiedName = mostRecentVerifiedName;\n        break;\n      default:\n        verifiedName = null;\n    }\n    return verifiedName;\n  },\n);\n\nconst valuesSelector = createSelector(\n  accountSettingsSelector,\n  mostRecentApprovedVerifiedNameValueSelector,\n  (accountSettings, mostRecentApprovedVerifiedNameValue) => {\n    let useVerifiedNameForCerts = (\n      accountSettings.verifiedNameHistory?.use_verified_name_for_certs || false\n    );\n\n    if (Object.keys(accountSettings.confirmationValues).includes('useVerifiedNameForCerts')) {\n      useVerifiedNameForCerts = accountSettings.confirmationValues.useVerifiedNameForCerts;\n    }\n\n    return {\n      ...accountSettings.values,\n      verified_name: mostRecentApprovedVerifiedNameValue?.verified_name,\n      useVerifiedNameForCerts,\n    };\n  },\n);\n\nconst draftsSelector = createSelector(\n  accountSettingsSelector,\n  accountSettings => accountSettings.drafts,\n);\n\nconst previousSiteLanguageSelector = createSelector(\n  accountSettingsSelector,\n  accountSettings => accountSettings.previousSiteLanguage,\n);\n\nconst editableFieldErrorSelector = createSelector(\n  editableFieldNameSelector,\n  accountSettingsSelector,\n  (name, accountSettings) => accountSettings.errors[name],\n);\n\nconst editableFieldConfirmationValuesSelector = createSelector(\n  editableFieldNameSelector,\n  accountSettingsSelector,\n  (name, accountSettings) => accountSettings.confirmationValues[name],\n);\n\nconst isEditingSelector = createSelector(\n  editableFieldNameSelector,\n  accountSettingsSelector,\n  (name, accountSettings) => accountSettings.openFormId === name,\n);\n\nconst confirmationValuesSelector = createSelector(\n  accountSettingsSelector,\n  accountSettings => accountSettings.confirmationValues,\n);\n\nconst errorSelector = createSelector(\n  accountSettingsSelector,\n  accountSettings => accountSettings.errors,\n);\n\nconst nameChangeModalSelector = createSelector(\n  accountSettingsSelector,\n  accountSettings => accountSettings.nameChangeModal,\n);\n\nconst saveStateSelector = createSelector(\n  accountSettingsSelector,\n  accountSettings => accountSettings.saveState,\n);\n\nexport const editableFieldSelector = createStructuredSelector({\n  error: editableFieldErrorSelector,\n  confirmationValue: editableFieldConfirmationValuesSelector,\n  saveState: saveStateSelector,\n  isEditing: isEditingSelector,\n});\n\nexport const profileDataManagerSelector = createSelector(\n  accountSettingsSelector,\n  accountSettings => accountSettings.profileDataManager,\n);\n\nexport const staticFieldsSelector = createSelector(\n  accountSettingsSelector,\n  mostRecentVerifiedNameSelector,\n  (accountSettings, verifiedName) => {\n    const staticFields = [];\n    if (accountSettings.profileDataManager) {\n      staticFields.push('name', 'email', 'country');\n    }\n    if (verifiedName && ['submitted'].includes(verifiedName.status)) {\n      staticFields.push('verifiedName');\n    }\n\n    return staticFields;\n  },\n);\n\n/**\n * If there's no draft present at all (undefined), use the original committed value.\n */\nfunction chooseFormValue(draft, committed) {\n  return draft !== undefined ? draft : committed;\n}\n\nconst formValuesSelector = createSelector(\n  valuesSelector,\n  draftsSelector,\n  (values, drafts) => {\n    const formValues = {};\n    Object.entries(values).forEach(([name, value]) => {\n      if (typeof value === 'boolean') {\n        formValues[name] = chooseFormValue(drafts[name], value);\n      } else {\n        formValues[name] = chooseFormValue(drafts[name], value) || '';\n      }\n    });\n    return formValues;\n  },\n);\n\nconst transformTimeZonesToOptions = timeZoneArr => timeZoneArr\n  .map(({ time_zone, description }) => ({ // eslint-disable-line camelcase\n    value: time_zone, label: description, // eslint-disable-line camelcase\n  }));\n\nconst timeZonesSelector = createSelector(\n  accountSettingsSelector,\n  accountSettings => transformTimeZonesToOptions(accountSettings.timeZones),\n);\n\nconst countryTimeZonesSelector = createSelector(\n  accountSettingsSelector,\n  accountSettings => transformTimeZonesToOptions(accountSettings.countryTimeZones),\n);\n\nconst activeAccountSelector = createSelector(\n  accountSettingsSelector,\n  accountSettings => accountSettings.values.is_active,\n);\n\nexport const siteLanguageSelector = createSelector(\n  previousSiteLanguageSelector,\n  draftsSelector,\n  (previousValue, drafts) => ({\n    previousValue,\n    draft: drafts.siteLanguage,\n  }),\n);\n\nexport const betaLanguageBannerSelector = createStructuredSelector({\n  siteLanguageList: siteLanguageListSelector,\n  siteLanguage: siteLanguageSelector,\n});\n\nexport const accountSettingsPageSelector = createSelector(\n  accountSettingsSelector,\n  siteLanguageOptionsSelector,\n  siteLanguageSelector,\n  formValuesSelector,\n  valuesSelector,\n  draftsSelector,\n  errorSelector,\n  profileDataManagerSelector,\n  staticFieldsSelector,\n  timeZonesSelector,\n  countryTimeZonesSelector,\n  activeAccountSelector,\n  nameChangeModalSelector,\n  mostRecentApprovedVerifiedNameValueSelector,\n  mostRecentVerifiedNameSelector,\n  sortedVerifiedNameHistorySelector,\n  (\n    accountSettings,\n    siteLanguageOptions,\n    siteLanguage,\n    formValues,\n    committedValues,\n    drafts,\n    formErrors,\n    profileDataManager,\n    staticFields,\n    timeZoneOptions,\n    countryTimeZoneOptions,\n    activeAccount,\n    nameChangeModal,\n    verifiedName,\n    mostRecentVerifiedName,\n    verifiedNameHistory,\n  ) => ({\n    siteLanguageOptions,\n    siteLanguage,\n    loading: accountSettings.loading,\n    loaded: accountSettings.loaded,\n    loadingError: accountSettings.loadingError,\n    timeZoneOptions,\n    countryTimeZoneOptions,\n    isActive: activeAccount,\n    formValues,\n    committedValues,\n    drafts,\n    formErrors,\n    profileDataManager,\n    staticFields,\n    tpaProviders: accountSettings.thirdPartyAuth.providers,\n    nameChangeModal,\n    verifiedName,\n    mostRecentVerifiedName,\n    verifiedNameHistory,\n  }),\n);\n\nexport const certPreferenceSelector = createSelector(\n  valuesSelector,\n  formValuesSelector,\n  mostRecentApprovedVerifiedNameValueSelector,\n  saveStateSelector,\n  errorSelector,\n  (\n    committedValues,\n    formValues,\n    mostRecentApprovedVerifiedNameValue,\n    saveState,\n    errors,\n  ) => ({\n    originalFullName: committedValues?.name || '',\n    originalVerifiedName: mostRecentApprovedVerifiedNameValue?.verified_name || '',\n    useVerifiedNameForCerts: formValues.useVerifiedNameForCerts || false,\n    saveState,\n    formErrors: errors,\n  }),\n);\n\nexport const coachingConsentPageSelector = createSelector(\n  accountSettingsSelector,\n  formValuesSelector,\n  activeAccountSelector,\n  profileDataManagerSelector,\n  saveStateSelector,\n  confirmationValuesSelector,\n  errorSelector,\n  (\n    accountSettings,\n    formValues,\n    activeAccount,\n    profileDataManager,\n    saveState,\n    confirmationValues,\n    errors,\n  ) => ({\n    loading: accountSettings.loading,\n    loaded: accountSettings.loaded,\n    loadingError: accountSettings.loadingError,\n    isActive: activeAccount,\n    profileDataManager,\n    formValues,\n    saveState,\n    confirmationValues,\n    formErrors: errors,\n  }),\n);\n\nexport const demographicsSectionSelector = createSelector(\n  formValuesSelector,\n  draftsSelector,\n  errorSelector,\n  (\n    formValues,\n    drafts,\n    errors,\n  ) => ({\n    formValues,\n    drafts,\n    formErrors: errors,\n  }),\n);\n\nexport const nameChangeSelector = createSelector(\n  accountSettingsSelector,\n  formValuesSelector,\n  (accountSettings, formValues) => ({\n    ...accountSettings.nameChange,\n    formValues,\n  }),\n);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class PageLoading extends Component {\n  renderSrMessage() {\n    if (!this.props.srMessage) {\n      return null;\n    }\n\n    return (\n      <span className=\"sr-only\">\n        {this.props.srMessage}\n      </span>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div\n          className=\"d-flex justify-content-center align-items-center flex-column\"\n          style={{\n            height: '50vh',\n          }}\n        >\n          <div className=\"spinner-border text-primary\" role=\"status\">\n            {this.renderSrMessage()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPageLoading.propTypes = {\n  srMessage: PropTypes.string.isRequired,\n};\n","export const selectNotificationPreferencesStatus = () => state => (\n  state.notificationPreferences.preferences.status\n);\n\nexport const selectPreferences = () => state => (\n  state.notificationPreferences.preferences?.preferences\n);\n\nexport const selectCourseListStatus = () => state => (\n  state.notificationPreferences.courses.status\n);\n\nexport const selectCourseList = () => state => (\n  state.notificationPreferences.courses.courses\n);\n\nexport const selectCourse = courseId => state => (\n  selectCourseList()(state).find(\n    course => course.id === courseId,\n  )\n);\n\nexport const selectPreferenceAppsId = () => state => (\n  state.notificationPreferences.preferences.apps.map(app => app.id)\n);\n\nexport const selectPreferencesOfApp = appId => state => (\n  selectPreferences()(state).filter(preference => (\n    preference.appId === appId\n  ))\n);\n\nexport const selectPreferenceApp = appId => state => (\n  state.notificationPreferences.preferences.apps.find(app => (\n    app.id === appId\n  ))\n);\n\nexport const selectPreferenceAppToggleValue = appId => state => (\n  selectPreferenceApp(appId)(state).enabled\n);\n\nexport const selectPreference = (appId, name) => state => (\n  selectPreferences()(state).find((preference) => (\n    preference.id === name && preference.appId === appId\n  ))\n);\n\nexport const selectPreferenceNonEditableChannels = (appId, name) => state => (\n  state?.notificationPreferences.preferences.nonEditable[appId]?.[name] || []\n);\n\nexport const selectSelectedCourseId = () => state => (\n  state.notificationPreferences.preferences.selectedCourse\n);\n\nexport const selectPagination = () => state => (\n  state.notificationPreferences.courses.pagination\n);\n\nexport const selectShowPreferences = () => state => (\n  state.notificationPreferences.showPreferences\n);\n","import { getConfig } from '@edx/frontend-platform';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { breakpoints, useWindowSize, Icon } from '@edx/paragon';\nimport { OpenInNew } from '@edx/paragon/icons';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { NavHashLink } from 'react-router-hash-link';\nimport Scrollspy from 'react-scrollspy';\nimport { Link } from 'react-router-dom';\nimport messages from './AccountSettingsPage.messages';\nimport { selectShowPreferences } from '../notification-preferences/data/selectors';\n\nconst JumpNav = ({\n  intl,\n  displayDemographicsLink,\n}) => {\n  const stickToTop = useWindowSize().width > breakpoints.small.minWidth;\n  const showPreferences = useSelector(selectShowPreferences());\n\n  return (\n    <div className={classNames('jump-nav px-2.25', { 'jump-nav-sm position-sticky pt-3': stickToTop })}>\n      <Scrollspy\n        items={[\n          'basic-information',\n          'profile-information',\n          'demographics-information',\n          'social-media',\n          'site-preferences',\n          'linked-accounts',\n          'delete-account',\n        ]}\n        className=\"list-unstyled\"\n        currentClassName=\"font-weight-bold\"\n      >\n        <li>\n          <NavHashLink to=\"#basic-information\">\n            {intl.formatMessage(messages['account.settings.section.account.information'])}\n          </NavHashLink>\n        </li>\n        <li>\n          <NavHashLink to=\"#profile-information\">\n            {intl.formatMessage(messages['account.settings.section.profile.information'])}\n          </NavHashLink>\n        </li>\n        {getConfig().ENABLE_DEMOGRAPHICS_COLLECTION && displayDemographicsLink\n          && (\n          <li>\n            <NavHashLink to=\"#demographics-information\">\n              {intl.formatMessage(messages['account.settings.section.demographics.information'])}\n            </NavHashLink>\n          </li>\n          )}\n        <li>\n          <NavHashLink to=\"#social-media\">\n            {intl.formatMessage(messages['account.settings.section.social.media'])}\n          </NavHashLink>\n        </li>\n        <li>\n          <NavHashLink to=\"#site-preferences\">\n            {intl.formatMessage(messages['account.settings.section.site.preferences'])}\n          </NavHashLink>\n        </li>\n        <li>\n          <NavHashLink to=\"#linked-accounts\">\n            {intl.formatMessage(messages['account.settings.section.linked.accounts'])}\n          </NavHashLink>\n        </li>\n        <li>\n          <NavHashLink to=\"#delete-account\">\n            {intl.formatMessage(messages['account.settings.jump.nav.delete.account'])}\n          </NavHashLink>\n        </li>\n      </Scrollspy>\n      {showPreferences && (\n        <>\n          <hr />\n          <Scrollspy\n            className=\"list-unstyled\"\n          >\n            <li>\n              <Link to=\"/notifications\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <span>{intl.formatMessage(messages['notification.preferences.notifications.label'])}</span>\n                <Icon className=\"d-inline-block align-bottom ml-1\" src={OpenInNew} />\n              </Link>\n            </li>\n          </Scrollspy>\n        </>\n      )}\n    </div>\n  );\n};\n\nJumpNav.propTypes = {\n  intl: intlShape.isRequired,\n  displayDemographicsLink: PropTypes.bool.isRequired,\n};\n\nexport default injectIntl(JumpNav);\n","import { AsyncActionType } from '../../data/utils';\n\nexport const DELETE_ACCOUNT = new AsyncActionType('ACCOUNT_SETTINGS', 'DELETE_ACCOUNT');\nDELETE_ACCOUNT.CONFIRMATION = 'ACCOUNT_SETTINGS__DELETE_ACCOUNT__CONFIRMATION';\nDELETE_ACCOUNT.CANCEL = 'ACCOUNT_SETTINGS__DELETE_ACCOUNT__CANCEL';\n\nexport const deleteAccount = password => ({\n  type: DELETE_ACCOUNT.BASE,\n  payload: { password },\n});\n\nexport const deleteAccountConfirmation = () => ({\n  type: DELETE_ACCOUNT.CONFIRMATION,\n});\n\nexport const deleteAccountBegin = () => ({\n  type: DELETE_ACCOUNT.BEGIN,\n});\n\nexport const deleteAccountSuccess = () => ({\n  type: DELETE_ACCOUNT.SUCCESS,\n});\n\nexport const deleteAccountFailure = reason => ({\n  type: DELETE_ACCOUNT.FAILURE,\n  payload: { reason },\n});\n\n// to clear errors from the confirmation modal\nexport const deleteAccountReset = () => ({\n  type: DELETE_ACCOUNT.RESET,\n});\n\n// to close the modal\nexport const deleteAccountCancel = () => ({\n  type: DELETE_ACCOUNT.CANCEL,\n});\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  'account.settings.delete.account.header': {\n    id: 'account.settings.delete.account.header',\n    defaultMessage: 'Delete My Account',\n    description: 'Header for the user account deletion area',\n  },\n  'account.settings.delete.account.subheader': {\n    id: 'account.settings.delete.account.subheader',\n    defaultMessage: 'We\\'re sorry to see you go!',\n    description: 'A message in the user account deletion area',\n  },\n  'account.settings.delete.account.text.1': {\n    id: 'account.settings.delete.account.text.1',\n    defaultMessage: 'Please note: Deletion of your account and personal data is permanent and cannot be undone. {siteName} will not be able to recover your account or the data that is deleted.',\n    description: 'A message in the user account deletion area',\n  },\n  'account.settings.delete.account.text.2': {\n    id: 'account.settings.delete.account.text.2',\n    defaultMessage: 'Once your account is deleted, you cannot use it to take courses on {siteName}.',\n    description: 'A message in the user account deletion area',\n  },\n  'account.settings.delete.account.text.2.edX': {\n    id: 'account.settings.delete.account.text.2.edX',\n    defaultMessage: 'Once your account is deleted, you cannot use it to take courses on the edX app, edx.org, or any other site hosted by edX. This includes access to edx.org from your employer’s or university’s system and access to private sites offered by MIT Open Learning, Wharton Executive Education, and Harvard Medical School.',\n    description: 'A message in the user account deletion area',\n  },\n  'account.settings.delete.account.text.3.link': {\n    id: 'account.settings.delete.account.text.3.link',\n    defaultMessage: 'Follow these instructions for printing or downloading a certificate',\n    description: 'This text is a link to a technical support page where users can learn how to print or download their certificates.',\n  },\n  'account.settings.delete.account.text.warning': {\n    id: 'account.settings.delete.account.text.warning',\n    defaultMessage: 'Warning: Account deletion is permanent. Please read the above carefully before proceeding. This is an irreversible action, and you will no longer be able to use the same email on {siteName}.',\n    description: 'A message in the user account deletion area',\n  },\n  'account.settings.delete.account.text.change.instead': {\n    id: 'account.settings.delete.account.text.change.instead',\n    defaultMessage: 'Want to change your email, name, or password instead?',\n    description: 'A message in the user account deletion area',\n  },\n  'account.settings.delete.account.button': {\n    id: 'account.settings.delete.account.button',\n    defaultMessage: 'Delete My Account',\n    description: 'Button label to permanently delete your platform account',\n  },\n  'account.settings.delete.account.please.activate': {\n    id: 'account.settings.delete.account.please.activate',\n    defaultMessage: 'activate your account',\n    description: 'This is the text on a link that goes to the support page.  It is part of this sentence: Before proceeding, please activate your account.',\n  },\n  'account.settings.delete.account.please.confirm': {\n    id: 'account.settings.delete.account.please.confirm',\n    defaultMessage: 'confirm your account',\n    description: 'This is the text on a link that goes to the support page.  It is part of this sentence: Before proceeding, please confirm your account.',\n  },\n  'account.settings.delete.account.please.unlink': {\n    id: 'account.settings.delete.account.please.unlink',\n    defaultMessage: 'unlink all social media accounts',\n    description: 'This is the text on a link that goes to the support page.  It is part of this sentence: Before proceeding, please unlink all social media accounts.',\n  },\n  'account.settings.delete.account.modal.header': {\n    id: 'account.settings.delete.account.modal.header',\n    defaultMessage: 'Are you sure?',\n    description: 'Title of the dialog asking user to confirm that they want to delete their entire account',\n  },\n  'account.settings.delete.account.modal.text.1': {\n    id: 'account.settings.delete.account.modal.text.1',\n    defaultMessage: 'You have selected \"Delete My Account\". Deletion of your account and personal data is permanent and cannot be undone. {siteName} will not be able to recover your account or the data that is deleted.',\n    description: 'Messaging in the dialog asking user to confirm that they want to delete their entire account',\n  },\n  'account.settings.delete.account.modal.text.2': {\n    id: 'account.settings.delete.account.modal.text.2',\n    defaultMessage: 'If you proceed, you will be unable to use this account to take courses on {siteName}.',\n    description: 'Messaging in the dialog asking user to confirm that they want to delete their entire account',\n  },\n  'account.settings.delete.account.modal.text.2.edX': {\n    id: 'account.settings.delete.account.modal.text.2.edX',\n    defaultMessage: 'If you proceed, you will be unable to use this account to take courses on the edX app, edx.org, or any other site hosted by edX. This includes access to edx.org from your employer\\'s or university\\'s system and access to private sites offered by MIT Open Learning, Wharton Executive Education, and Harvard Medical School.',\n    description: 'Messaging in the dialog asking user to confirm that they want to delete their entire account',\n  },\n  'account.settings.delete.account.modal.enter.password': {\n    id: 'account.settings.delete.account.modal.enter.password',\n    defaultMessage: 'If you still wish to continue and delete your account, please enter your account password:',\n    description: 'Asking for the user\\'s account password',\n  },\n  'account.settings.delete.account.modal.confirm.delete': {\n    id: 'account.settings.delete.account.modal.confirm.delete',\n    defaultMessage: 'Yes, Delete',\n    description: 'Button label for user to confirm it is okay to delete their account',\n  },\n  'account.settings.delete.account.modal.confirm.cancel': {\n    id: 'account.settings.delete.account.modal.confirm.cancel',\n    defaultMessage: 'Cancel',\n    description: 'The cancel button on the delete my account modal confirmation',\n  },\n  'account.settings.delete.account.error.unable.to.delete': {\n    id: 'account.settings.delete.account.error.unable.to.delete',\n    defaultMessage: 'Unable to delete account',\n    description: 'Error message when account deletion failed',\n  },\n  'account.settings.delete.account.error.no.password': {\n    id: 'account.settings.delete.account.error.no.password',\n    defaultMessage: 'A password is required',\n    description: 'Error message when user has not entered their password',\n  },\n  'account.settings.delete.account.error.invalid.password': {\n    id: 'account.settings.delete.account.error.invalid.password',\n    defaultMessage: 'Password is incorrect',\n    description: 'Error message when user has entered incorrect password',\n  },\n  'account.settings.delete.account.error.unable.to.delete.details': {\n    id: 'account.settings.delete.account.error.unable.to.delete.details',\n    defaultMessage: 'Sorry, there was an error trying to process your request. Please try again later.',\n    description: 'Error message when account deletion failed',\n  },\n  'account.settings.delete.account.modal.after.header': {\n    id: 'account.settings.delete.account.modal.after.header',\n    defaultMessage: 'We\\'re sorry to see you go!  Your account will be deleted shortly.',\n    description: 'Title displayed after user account is deleted',\n  },\n  'account.settings.delete.account.modal.after.text': {\n    id: 'account.settings.delete.account.modal.after.text',\n    defaultMessage: 'Account deletion, including removal from email lists, may take a few weeks to fully process through our system. If you want to opt-out of emails before then, please unsubscribe from the footer of any email.',\n    description: 'Text displayed after user account is deleted',\n  },\n  'account.settings.delete.account.modal.after.button': {\n    id: 'account.settings.delete.account.modal.after.button',\n    defaultMessage: 'Close',\n    description: 'Label on button to close a dialog',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst Alert = (props) => (\n  <div className={classNames('alert d-flex align-items-start', props.className)}>\n    <div>\n      {props.icon}\n    </div>\n    <div>\n      {props.children}\n    </div>\n  </div>\n);\n\nAlert.propTypes = {\n  className: PropTypes.string,\n  icon: PropTypes.node,\n  children: PropTypes.node,\n};\n\nAlert.defaultProps = {\n  className: undefined,\n  icon: undefined,\n  children: undefined,\n};\n\nexport default Alert;\n","import React from 'react';\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Hyperlink } from '@edx/paragon';\n\nimport { getConfig } from '@edx/frontend-platform';\nimport messages from './messages';\n\nconst PrintingInstructions = (props) => {\n  const actionLink = (\n    <Hyperlink\n      // TODO: What would a generic version of this link look like?  Should\n      // CERTIFICATE_SHARING_HELP_URL really be a configuration variable?  In the meantime,\n      // We've removed the link from the default message.\n      destination=\"https://support.edx.org/hc/en-us/sections/115004173027-Receive-and-Share-edX-Certificates\"\n    >\n      {props.intl.formatMessage(messages['account.settings.delete.account.text.3.link'])}\n    </Hyperlink>\n  );\n\n  // TODO: We lack a good way of providing custom language for a particular site.  This is a hack\n  // to allow edx.org to mention MicroMasters certificates to fulfill its business requirements.\n  if (getConfig().SITE_NAME === 'edX') {\n    return (\n      <FormattedMessage\n        id=\"account.settings.delete.account.text.3.edX\"\n        defaultMessage=\"You may also lose access to verified certificates and other program credentials like MicroMasters certificates. You can make a copy of these for your records before proceeding with deletion. {actionLink}.\"\n        description=\"A message in the user account deletion area warning users that deleting their account will prevent them from accessing their certificates. 'actionLink' is a HTML link with a full sentence that describes how to print a certificate.\"\n        values={{ actionLink }}\n      />\n    );\n  }\n\n  return (\n    <FormattedMessage\n      id=\"account.settings.delete.account.text.3\"\n      defaultMessage=\"You may also lose access to verified certificates and other program credentials. You can make a copy of these for your records before proceeding with deletion.\"\n      description=\"A message in the user account deletion area warning users that deleting their account will prevent them from accessing their certificates.\"\n      values={{ actionLink }}\n    />\n  );\n};\n\nPrintingInstructions.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(PrintingInstructions);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  AlertModal,\n  Button, Input, ValidationFormGroup, ActionRow,\n} from '@edx/paragon';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { faExclamationCircle, faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { getConfig } from '@edx/frontend-platform';\nimport messages from './messages';\nimport Alert from '../Alert';\nimport PrintingInstructions from './PrintingInstructions';\n\nexport class ConfirmationModal extends Component {\n  /**\n   * @returns String The message id for a short description of the error, suitable for a header or\n   * as the error message under an input field.\n   */\n  getShortErrorMessageId(reason) {\n    switch (reason) {\n      case 'empty-password':\n        return 'account.settings.delete.account.error.no.password';\n      case 'invalid-password':\n        return 'account.settings.delete.account.error.invalid.password';\n      default:\n        return 'account.settings.delete.account.error.unable.to.delete';\n    }\n  }\n\n  renderError(reason) {\n    const { errorType, intl } = this.props;\n\n    if (errorType === null) {\n      return null;\n    }\n    const headerMessageId = this.getShortErrorMessageId(errorType);\n    const detailsMessageId = reason === 'empty-password'\n      ? null\n      : 'account.settings.delete.account.error.unable.to.delete.details';\n\n    return (\n      <Alert\n        className=\"alert-danger mt-n2\"\n        icon={<FontAwesomeIcon className=\"mr-2\" icon={faExclamationCircle} />}\n      >\n        <h6>{intl.formatMessage(messages[headerMessageId])}</h6>\n        {detailsMessageId ? (\n          <p className=\"text-danger\">{intl.formatMessage(messages[detailsMessageId])}</p>\n        ) : null}\n      </Alert>\n    );\n  }\n\n  render() {\n    const {\n      status,\n      errorType,\n      intl,\n      onCancel,\n      onChange,\n      onSubmit,\n      password,\n    } = this.props;\n    const open = ['confirming', 'pending', 'failed'].includes(status);\n    const passwordFieldId = 'passwordFieldId';\n    const invalidMessage = messages[this.getShortErrorMessageId(errorType)];\n\n    // TODO: We lack a good way of providing custom language for a particular site.  This is a hack\n    // to allow edx.org to fulfill its business requirements.\n    const deleteAccountModalText2MessageKey = getConfig().SITE_NAME === 'edX'\n      ? 'account.settings.delete.account.modal.text.2.edX'\n      : 'account.settings.delete.account.modal.text.2';\n\n    return (\n      <AlertModal\n        isOpen={open}\n        title={intl.formatMessage(messages['account.settings.delete.account.modal.header'])}\n        onClose={onCancel}\n        footerNode={(\n          <ActionRow>\n            <Button variant=\"link\" onClick={onCancel}>Cancel</Button>\n            <Button variant=\"danger\" onClick={onSubmit}>Yes, Delete</Button>\n          </ActionRow>\n        )}\n      >\n        <div className=\"p-3\">\n          {this.renderError()}\n          <Alert\n            className=\"alert-warning mt-n2\"\n            icon={<FontAwesomeIcon className=\"mr-2\" icon={faExclamationTriangle} />}\n          >\n            <h6>\n              {intl.formatMessage(\n                messages['account.settings.delete.account.modal.text.1'],\n                { siteName: getConfig().SITE_NAME },\n              )}\n            </h6>\n            <p>\n              {intl.formatMessage(\n                messages[deleteAccountModalText2MessageKey],\n                { siteName: getConfig().SITE_NAME },\n              )}\n            </p>\n            <p>\n              <PrintingInstructions />\n            </p>\n          </Alert>\n          <ValidationFormGroup\n            for={passwordFieldId}\n            invalid={errorType !== null}\n            invalidMessage={intl.formatMessage(invalidMessage)}\n          >\n            <label className=\"d-block\" htmlFor={passwordFieldId}>\n              {intl.formatMessage(messages['account.settings.delete.account.modal.enter.password'])}\n            </label>\n            <Input\n              name=\"password\"\n              id={passwordFieldId}\n              type=\"password\"\n              value={password}\n              onChange={onChange}\n            />\n          </ValidationFormGroup>\n        </div>\n\n      </AlertModal>\n    );\n  }\n}\n\nConfirmationModal.propTypes = {\n  status: PropTypes.oneOf(['confirming', 'pending', 'deleted', 'failed']),\n  errorType: PropTypes.oneOf(['empty-password', 'server']),\n  intl: intlShape.isRequired,\n  onCancel: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  password: PropTypes.string.isRequired,\n};\n\nConfirmationModal.defaultProps = {\n  status: null,\n  errorType: null,\n};\n\nexport default injectIntl(ConfirmationModal);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { ModalLayer, ModalCloseButton } from '@edx/paragon';\n\nimport messages from './messages';\n\nexport const SuccessModal = (props) => {\n  const { status, intl, onClose } = props;\n  return (\n\n    <ModalLayer isOpen={status === 'deleted'} onClose={onClose}>\n      <div className=\"mw-sm p-5 bg-white mx-auto my-3\">\n        <h3>\n          {intl.formatMessage(messages['account.settings.delete.account.modal.after.header'])}\n        </h3>\n        <div className=\"p-3\">\n          <p className=\"h6\">\n            {intl.formatMessage(messages['account.settings.delete.account.modal.after.text'])}\n          </p>\n        </div>\n        <p>\n          <ModalCloseButton className=\"float-right\" variant=\"link\">Close</ModalCloseButton>\n        </p>\n      </div>\n\n    </ModalLayer>\n\n  );\n};\n\nSuccessModal.propTypes = {\n  status: PropTypes.oneOf(['confirming', 'pending', 'deleted', 'failed']),\n  intl: intlShape.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nSuccessModal.defaultProps = {\n  status: null,\n};\n\nexport default injectIntl(SuccessModal);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Hyperlink } from '@edx/paragon';\n\n// Messages\nimport { getConfig } from '@edx/frontend-platform';\nimport messages from './messages';\n\n// Components\nimport Alert from '../Alert';\n\nconst BeforeProceedingBanner = (props) => {\n  const { instructionMessageId, intl, supportArticleUrl } = props;\n\n  return (\n    <Alert\n      className=\"alert-warning mt-n2\"\n      icon={<FontAwesomeIcon className=\"mr-2\" icon={faExclamationTriangle} />}\n    >\n      <FormattedMessage\n        id=\"account.settings.delete.account.before.proceeding\"\n        defaultMessage=\"Before proceeding, please {actionLink}.\"\n        description=\"Error that appears if you are trying to delete your account, but something about your account needs attention first.  The actionLink will be instructions, such as 'unlink your Facebook account'.\"\n        values={{\n          actionLink: (\n            <Hyperlink destination={supportArticleUrl}>\n              {intl.formatMessage(messages[instructionMessageId])}\n            </Hyperlink>\n          ),\n          siteName: getConfig().SITE_NAME,\n        }}\n      />\n    </Alert>\n  );\n};\n\nBeforeProceedingBanner.propTypes = {\n  instructionMessageId: PropTypes.string.isRequired,\n  intl: intlShape.isRequired,\n  supportArticleUrl: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(BeforeProceedingBanner);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getConfig } from '@edx/frontend-platform';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Button, Hyperlink } from '@edx/paragon';\n\n// Actions\nimport {\n  deleteAccount,\n  deleteAccountConfirmation,\n  deleteAccountFailure,\n  deleteAccountReset,\n  deleteAccountCancel,\n} from './data/actions';\n\n// Messages\nimport messages from './messages';\n\n// Components\nimport ConnectedConfirmationModal from './ConfirmationModal';\nimport PrintingInstructions from './PrintingInstructions';\nimport ConnectedSuccessModal from './SuccessModal';\nimport BeforeProceedingBanner from './BeforeProceedingBanner';\n\nexport class DeleteAccount extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: '',\n    };\n  }\n\n  handleSubmit = () => {\n    if (this.state.password === '') {\n      this.props.deleteAccountFailure('empty-password');\n    } else {\n      this.props.deleteAccount(this.state.password);\n    }\n  };\n\n  handleCancel = () => {\n    this.setState({ password: '' });\n    this.props.deleteAccountCancel();\n  };\n\n  handlePasswordChange = (e) => {\n    this.setState({ password: e.target.value.trim() });\n    this.props.deleteAccountReset();\n  };\n\n  handleFinalClose = () => {\n    global.location = getConfig().LOGOUT_URL;\n  };\n\n  render() {\n    const {\n      hasLinkedTPA, isVerifiedAccount, status, errorType, intl,\n    } = this.props;\n    const canDelete = isVerifiedAccount && !hasLinkedTPA;\n\n    // TODO: We lack a good way of providing custom language for a particular site.  This is a hack\n    // to allow edx.org to fulfill its business requirements.\n    const deleteAccountText2MessageKey = getConfig().SITE_NAME === 'edX'\n      ? 'account.settings.delete.account.text.2.edX'\n      : 'account.settings.delete.account.text.2';\n\n    const optInInstructionMessageId = getConfig().MARKETING_EMAILS_OPT_IN\n      ? 'account.settings.delete.account.please.confirm'\n      : 'account.settings.delete.account.please.activate';\n\n    return (\n      <div>\n        <h2 className=\"section-heading h4 mb-3\">\n          {intl.formatMessage(messages['account.settings.delete.account.header'])}\n        </h2>\n        <p>{intl.formatMessage(messages['account.settings.delete.account.subheader'])}</p>\n        <p>\n          {intl.formatMessage(\n            messages['account.settings.delete.account.text.1'],\n            { siteName: getConfig().SITE_NAME },\n          )}\n        </p>\n        <p>\n          {intl.formatMessage(\n            messages[deleteAccountText2MessageKey],\n            { siteName: getConfig().SITE_NAME },\n          )}\n        </p>\n        <p>\n          <PrintingInstructions />\n        </p>\n        <p className=\"text-danger h6\">\n          {intl.formatMessage(\n            messages['account.settings.delete.account.text.warning'],\n            { siteName: getConfig().SITE_NAME },\n          )}\n        </p>\n        <p>\n          <Hyperlink destination=\"https://support.edx.org/hc/en-us/sections/115004139268-Manage-Your-Account-Settings\">\n            {intl.formatMessage(messages['account.settings.delete.account.text.change.instead'])}\n          </Hyperlink>\n        </p>\n        <p>\n          <Button\n            variant=\"outline-danger\"\n            onClick={canDelete ? this.props.deleteAccountConfirmation : null}\n            disabled={!canDelete}\n          >\n            {intl.formatMessage(messages['account.settings.delete.account.button'])}\n          </Button>\n        </p>\n\n        {isVerifiedAccount ? null : (\n          <BeforeProceedingBanner\n            instructionMessageId={optInInstructionMessageId}\n            supportArticleUrl=\"https://support.edx.org/hc/en-us/articles/115000940568-How-do-I-confirm-my-email-\"\n          />\n        )}\n\n        {hasLinkedTPA ? (\n          <BeforeProceedingBanner\n            instructionMessageId=\"account.settings.delete.account.please.unlink\"\n            supportArticleUrl=\"https://support.edx.org/hc/en-us/articles/207206067\"\n          />\n        ) : null}\n\n        <ConnectedConfirmationModal\n          status={status}\n          errorType={errorType}\n          onSubmit={this.handleSubmit}\n          onCancel={this.handleCancel}\n          onChange={this.handlePasswordChange}\n          password={this.state.password}\n        />\n\n        <ConnectedSuccessModal status={status} onClose={this.handleFinalClose} />\n      </div>\n    );\n  }\n}\n\nDeleteAccount.propTypes = {\n  deleteAccount: PropTypes.func.isRequired,\n  deleteAccountConfirmation: PropTypes.func.isRequired,\n  deleteAccountFailure: PropTypes.func.isRequired,\n  deleteAccountReset: PropTypes.func.isRequired,\n  deleteAccountCancel: PropTypes.func.isRequired,\n  status: PropTypes.oneOf(['confirming', 'pending', 'deleted', 'failed']),\n  errorType: PropTypes.oneOf(['empty-password', 'server']),\n  hasLinkedTPA: PropTypes.bool,\n  isVerifiedAccount: PropTypes.bool,\n  intl: intlShape.isRequired,\n};\n\nDeleteAccount.defaultProps = {\n  hasLinkedTPA: false,\n  isVerifiedAccount: true,\n  status: null,\n  errorType: null,\n};\n\n// Assume we're part of the accountSettings state.\nconst mapStateToProps = state => state.accountSettings.deleteAccount;\n\nexport default connect(\n  mapStateToProps,\n  {\n    deleteAccount,\n    deleteAccountConfirmation,\n    deleteAccountFailure,\n    deleteAccountReset,\n    deleteAccountCancel,\n  },\n)(injectIntl(DeleteAccount));\n","import { DELETE_ACCOUNT } from './actions';\n\nexport const defaultState = {\n  status: null,\n  errorType: null,\n};\n\nconst reducer = (state = defaultState, action = null) => {\n  if (action !== null) {\n    switch (action.type) {\n      case DELETE_ACCOUNT.CONFIRMATION:\n        return {\n          ...state,\n          status: 'confirming',\n        };\n\n      case DELETE_ACCOUNT.BEGIN:\n        return {\n          ...state,\n          status: 'pending',\n        };\n\n      case DELETE_ACCOUNT.SUCCESS:\n        return {\n          ...state,\n          status: 'deleted',\n        };\n\n      case DELETE_ACCOUNT.FAILURE:\n        return {\n          ...state,\n          status: 'failed',\n          errorType: action.payload.reason || 'server',\n        };\n\n      case DELETE_ACCOUNT.RESET: {\n        const oldStatus = state.status;\n\n        return {\n          ...state,\n          // clear the error state if applicable, otherwise don't change state\n          status: oldStatus === 'failed' ? 'confirming' : oldStatus,\n          errorType: null,\n        };\n      }\n\n      case DELETE_ACCOUNT.CANCEL:\n        return {\n          ...state,\n          status: null,\n          errorType: null,\n        };\n\n      default:\n    }\n  }\n  return state;\n};\n\nexport default reducer;\n","import { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport formurlencoded from 'form-urlencoded';\nimport { handleRequestError } from '../../data/utils';\n\n/**\n * Request deletion of the user's account.\n */\n// eslint-disable-next-line import/prefer-default-export\nexport async function postDeleteAccount(password) {\n  const { data } = await getAuthenticatedHttpClient()\n    .post(\n      `${getConfig().LMS_BASE_URL}/api/user/v1/accounts/deactivate_logout/`,\n      formurlencoded({ password }),\n      {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      },\n    )\n    .catch(handleRequestError);\n  return data;\n}\n","import { put, call, takeEvery } from 'redux-saga/effects';\n\nimport {\n  DELETE_ACCOUNT,\n  deleteAccountBegin,\n  deleteAccountSuccess,\n  deleteAccountFailure,\n} from './actions';\n\nimport { postDeleteAccount } from './service';\n\nexport function* handleDeleteAccount(action) {\n  try {\n    yield put(deleteAccountBegin());\n    const response = yield call(postDeleteAccount, action.payload.password);\n    yield put(deleteAccountSuccess(response));\n  } catch (e) {\n    if (e.response.status === 403) {\n      yield put(deleteAccountFailure('invalid-password'));\n    } else if (typeof e.response.data === 'string') {\n      yield put(deleteAccountFailure());\n    } else {\n      throw e;\n    }\n  }\n}\n\nexport default function* saga() {\n  yield takeEvery(DELETE_ACCOUNT.BASE, handleDeleteAccount);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TransitionReplace } from '@edx/paragon';\n\nconst onChildExit = (htmlNode) => {\n  // If the leaving child has focus, take control and redirect it\n  if (htmlNode.contains(document.activeElement)) {\n    // Get the newly entering sibling.\n    // It's the previousSibling, but not for any explicit reason. So checking for both.\n    const enteringChild = htmlNode.previousSibling || htmlNode.nextSibling;\n\n    // There's no replacement, do nothing.\n    if (!enteringChild) {\n      return;\n    }\n\n    // Get all the focusable elements in the entering child and focus the first one\n    const focusableElements = enteringChild.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n    if (focusableElements.length) {\n      focusableElements[0].focus();\n    }\n  }\n};\n\nconst SwitchContent = ({ expression, cases, className }) => {\n  const getContent = (caseKey) => {\n    if (cases[caseKey]) {\n      if (typeof cases[caseKey] === 'string') {\n        return getContent(cases[caseKey]);\n      }\n      return React.cloneElement(cases[caseKey], { key: caseKey });\n    }\n    if (cases.default) {\n      if (typeof cases.default === 'string') {\n        return getContent(cases.default);\n      }\n      React.cloneElement(cases.default, { key: 'default' });\n    }\n\n    return null;\n  };\n\n  return (\n    <TransitionReplace\n      className={className}\n      onChildExit={onChildExit}\n    >\n      {getContent(expression)}\n    </TransitionReplace>\n  );\n};\n\nSwitchContent.propTypes = {\n  expression: PropTypes.string,\n  cases: PropTypes.objectOf(PropTypes.node).isRequired,\n  className: PropTypes.string,\n};\n\nSwitchContent.defaultProps = {\n  expression: null,\n  className: null,\n};\n\nexport default SwitchContent;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  'account.settings.field.name.checkbox.certificate.select': {\n    id: 'account.settings.field.name.certificate.select',\n    defaultMessage: 'If checked, this name will appear on your certificates and public-facing records.',\n    description: 'Label for checkbox describing that the selected name will appear on the user‘s certificates.',\n  },\n  'account.settings.field.name.modal.certificate.title': {\n    id: 'account.settings.field.name.modal.certificate.title',\n    defaultMessage: 'Choose a preferred name for certificates and public-facing records',\n    description: 'Title instructing the user to choose a preferred name.',\n  },\n  'account.settings.field.name.modal.certificate.select': {\n    id: 'account.settings.field.name.modal.certificate.select',\n    defaultMessage: 'Select a name',\n    description: 'Label instructing the user to select a name.',\n  },\n  'account.settings.field.name.modal.certificate.option.full': {\n    id: 'account.settings.field.name.modal.certificate.option.full',\n    defaultMessage: 'Full Name',\n    description: 'Option representing the user’s full name.',\n  },\n  'account.settings.field.name.modal.certificate.option.verified': {\n    id: 'account.settings.field.name.modal.certificate.option.verified',\n    defaultMessage: 'Verified Name',\n    description: 'Option representing the user’s verified name.',\n  },\n  'account.settings.field.name.modal.certificate.button.choose': {\n    id: 'account.settings.field.name.modal.certificate.button.choose',\n    defaultMessage: 'Choose name',\n    description: 'Button to confirm the user’s name choice.',\n  },\n});\n\nexport default messages;\n","import React, { useState, useEffect } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport {\n  ActionRow,\n  Form,\n  ModalDialog,\n  StatefulButton,\n} from '@edx/paragon';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport {\n  closeForm,\n  resetDrafts,\n  saveSettings,\n  updateDraft,\n} from '../data/actions';\nimport { certPreferenceSelector } from '../data/selectors';\n\nimport commonMessages from '../AccountSettingsPage.messages';\nimport messages from './messages';\n\nconst CertificatePreference = ({\n  intl,\n  fieldName,\n  originalFullName,\n  originalVerifiedName,\n  saveState,\n  useVerifiedNameForCerts,\n}) => {\n  const dispatch = useDispatch();\n  const [checked, setChecked] = useState(false);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const formId = 'useVerifiedNameForCerts';\n\n  const handleCheckboxChange = () => {\n    if (!checked) {\n      if (fieldName === 'verified_name') {\n        dispatch(updateDraft(formId, true));\n      } else {\n        dispatch(updateDraft(formId, false));\n      }\n    } else {\n      setModalIsOpen(true);\n    }\n  };\n\n  const handleCancel = () => {\n    setModalIsOpen(false);\n    dispatch(resetDrafts());\n  };\n\n  const handleModalChange = (e) => {\n    if (e.target.value === 'fullName') {\n      dispatch(updateDraft(formId, false));\n    } else {\n      dispatch(updateDraft(formId, true));\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (saveState === 'pending') {\n      return;\n    }\n\n    dispatch(saveSettings(formId, useVerifiedNameForCerts));\n  };\n\n  useEffect(() => {\n    if (originalVerifiedName) {\n      if (fieldName === 'verified_name') {\n        setChecked(useVerifiedNameForCerts);\n      } else {\n        setChecked(!useVerifiedNameForCerts);\n      }\n    }\n  }, [originalVerifiedName, fieldName, useVerifiedNameForCerts]);\n\n  useEffect(() => {\n    if (originalVerifiedName) {\n      if (modalIsOpen && saveState === 'complete') {\n        setModalIsOpen(false);\n        dispatch(closeForm(fieldName));\n      }\n    }\n  }, [dispatch, originalVerifiedName, fieldName, modalIsOpen, saveState]);\n\n  // If the user doesn't have an approved verified name, do not display this component\n\n  return originalVerifiedName ? (\n    <>\n      <Form.Checkbox className=\"mt-1 mb-4\" checked={checked} onChange={handleCheckboxChange}>\n        {intl.formatMessage(messages['account.settings.field.name.checkbox.certificate.select'])}\n      </Form.Checkbox>\n\n      <ModalDialog\n        title={intl.formatMessage(messages['account.settings.field.name.modal.certificate.title'])}\n        isOpen={modalIsOpen}\n        onClose={handleCancel}\n        size=\"lg\"\n        hasCloseButton\n        isFullscreenOnMobile\n      >\n        <Form onSubmit={handleSubmit}>\n          <ModalDialog.Header>\n            <ModalDialog.Title>\n              {intl.formatMessage(messages['account.settings.field.name.modal.certificate.title'])}\n            </ModalDialog.Title>\n          </ModalDialog.Header>\n\n          <ModalDialog.Body className=\"overflow-hidden\">\n            <Form.Group className=\"mb-4\">\n              <Form.Label>\n                {intl.formatMessage(messages['account.settings.field.name.modal.certificate.select'])}\n              </Form.Label>\n              <Form.RadioSet\n                name={formId}\n                value={useVerifiedNameForCerts ? 'verifiedName' : 'fullName'}\n                onChange={handleModalChange}\n              >\n                <Form.Radio value=\"fullName\">\n                  {originalFullName}{' '}\n                  ({intl.formatMessage(messages['account.settings.field.name.modal.certificate.option.full'])})\n                </Form.Radio>\n                <Form.Radio value=\"verifiedName\">\n                  {originalVerifiedName}{' '}\n                  ({intl.formatMessage(messages['account.settings.field.name.modal.certificate.option.verified'])})\n                </Form.Radio>\n              </Form.RadioSet>\n            </Form.Group>\n          </ModalDialog.Body>\n\n          <ModalDialog.Footer>\n            <ActionRow>\n              <ModalDialog.CloseButton variant=\"outline-primary\" disabled={saveState === 'pending'}>\n                {intl.formatMessage(commonMessages['account.settings.editable.field.action.cancel'])}\n              </ModalDialog.CloseButton>\n              <StatefulButton\n                type=\"submit\"\n                state={saveState}\n                labels={{\n                  default: intl.formatMessage(messages['account.settings.field.name.modal.certificate.button.choose']),\n                }}\n                disabledStates={[]}\n              />\n            </ActionRow>\n          </ModalDialog.Footer>\n        </Form>\n      </ModalDialog>\n    </>\n  ) : null;\n};\n\nCertificatePreference.propTypes = {\n  intl: intlShape.isRequired,\n  fieldName: PropTypes.string.isRequired,\n  originalFullName: PropTypes.string,\n  originalVerifiedName: PropTypes.string,\n  saveState: PropTypes.string,\n  useVerifiedNameForCerts: PropTypes.bool,\n};\n\nCertificatePreference.defaultProps = {\n  originalFullName: '',\n  originalVerifiedName: '',\n  saveState: null,\n  useVerifiedNameForCerts: false,\n};\n\nexport default connect(certPreferenceSelector)(injectIntl(CertificatePreference));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Button, Form, StatefulButton,\n} from '@edx/paragon';\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport SwitchContent from './SwitchContent';\nimport messages from './AccountSettingsPage.messages';\n\nimport {\n  openForm,\n  closeForm,\n} from './data/actions';\nimport { editableFieldSelector } from './data/selectors';\nimport CertificatePreference from './certificate-preference/CertificatePreference';\n\nconst EditableField = (props) => {\n  const {\n    name,\n    label,\n    emptyLabel,\n    type,\n    value,\n    userSuppliedValue,\n    saveState,\n    error,\n    confirmationMessageDefinition,\n    confirmationValue,\n    helpText,\n    onEdit,\n    onCancel,\n    onSubmit,\n    onChange,\n    isEditing,\n    isEditable,\n    isGrayedOut,\n    intl,\n    ...others\n  } = props;\n  const id = `field-${name}`;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(name, new FormData(e.target).get(name));\n  };\n\n  const handleChange = (e) => {\n    onChange(name, e.target.value);\n  };\n\n  const handleEdit = () => {\n    onEdit(name);\n  };\n\n  const handleCancel = () => {\n    onCancel(name);\n  };\n\n  const renderEmptyLabel = () => {\n    if (isEditable) {\n      return <Button variant=\"link\" onClick={handleEdit} className=\"p-0\">{emptyLabel}</Button>;\n    }\n    return <span className=\"text-muted\">{emptyLabel}</span>;\n  };\n\n  const renderValue = (rawValue) => {\n    if (!rawValue) {\n      return renderEmptyLabel();\n    }\n    let finalValue = rawValue;\n\n    if (userSuppliedValue) {\n      finalValue += `: ${userSuppliedValue}`;\n    }\n\n    return finalValue;\n  };\n\n  const renderConfirmationMessage = () => {\n    if (!confirmationMessageDefinition || !confirmationValue) {\n      return null;\n    }\n    return intl.formatMessage(confirmationMessageDefinition, {\n      value: confirmationValue,\n    });\n  };\n\n  return (\n    <SwitchContent\n      expression={isEditing ? 'editing' : 'default'}\n      cases={{\n        editing: (\n          <>\n            <form onSubmit={handleSubmit}>\n              <Form.Group\n                controlId={id}\n                isInvalid={error != null}\n              >\n                <Form.Label size=\"sm\" className=\"h6 d-block\" htmlFor={id}>{label}</Form.Label>\n                <Form.Control\n                  data-hj-suppress\n                  name={name}\n                  id={id}\n                  type={type}\n                  value={value}\n                  onChange={handleChange}\n                  {...others}\n                />\n                {!!helpText && <Form.Text>{helpText}</Form.Text>}\n                {error != null && <Form.Control.Feedback hasIcon={false}>{error}</Form.Control.Feedback>}\n                {others.children}\n              </Form.Group>\n              <p>\n                <StatefulButton\n                  type=\"submit\"\n                  className=\"mr-2\"\n                  state={saveState}\n                  labels={{\n                    default: intl.formatMessage(messages['account.settings.editable.field.action.save']),\n                  }}\n                  onClick={(e) => {\n                    // Swallow clicks if the state is pending.\n                    // We do this instead of disabling the button to prevent\n                    // it from losing focus (disabled elements cannot have focus).\n                    // Disabling it would causes upstream issues in focus management.\n                    // Swallowing the onSubmit event on the form would be better, but\n                    // we would have to add that logic for every field given our\n                    // current structure of the application.\n                    if (saveState === 'pending') { e.preventDefault(); }\n                  }}\n                  disabledStates={[]}\n                />\n                <Button\n                  variant=\"outline-primary\"\n                  onClick={handleCancel}\n                >\n                  {intl.formatMessage(messages['account.settings.editable.field.action.cancel'])}\n                </Button>\n              </p>\n            </form>\n            {['name', 'verified_name'].includes(name) && <CertificatePreference fieldName={name} />}\n          </>\n        ),\n        default: (\n          <div className=\"form-group\">\n            <div className=\"d-flex align-items-start\">\n              <h6 aria-level=\"3\">{label}</h6>\n              {isEditable ? (\n                <Button variant=\"link\" onClick={handleEdit} className=\"ml-3\">\n                  <FontAwesomeIcon className=\"mr-1\" icon={faPencilAlt} />{intl.formatMessage(messages['account.settings.editable.field.action.edit'])}\n                </Button>\n              ) : null}\n            </div>\n            <p data-hj-suppress className={isGrayedOut ? 'grayed-out' : null}>{renderValue(value)}</p>\n            <p className=\"small text-muted mt-n2\">{renderConfirmationMessage() || helpText}</p>\n          </div>\n        ),\n      }}\n    />\n  );\n};\n\nEditableField.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.node]),\n  emptyLabel: PropTypes.node,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  userSuppliedValue: PropTypes.string,\n  saveState: PropTypes.oneOf(['default', 'pending', 'complete', 'error']),\n  error: PropTypes.string,\n  confirmationMessageDefinition: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    defaultMessage: PropTypes.string.isRequired,\n    description: PropTypes.string,\n  }),\n  confirmationValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  helpText: PropTypes.node,\n  onEdit: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  isEditing: PropTypes.bool,\n  isEditable: PropTypes.bool,\n  isGrayedOut: PropTypes.bool,\n  intl: intlShape.isRequired,\n};\n\nEditableField.defaultProps = {\n  value: undefined,\n  saveState: undefined,\n  label: undefined,\n  emptyLabel: undefined,\n  error: undefined,\n  confirmationMessageDefinition: undefined,\n  confirmationValue: undefined,\n  helpText: undefined,\n  isEditing: false,\n  isEditable: true,\n  isGrayedOut: false,\n  userSuppliedValue: undefined,\n};\n\nexport default connect(editableFieldSelector, {\n  onEdit: openForm,\n  onCancel: closeForm,\n})(injectIntl(EditableField));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Button, Form, StatefulButton,\n} from '@edx/paragon';\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport SwitchContent from './SwitchContent';\nimport messages from './AccountSettingsPage.messages';\n\nimport {\n  openForm,\n  closeForm,\n} from './data/actions';\nimport { editableFieldSelector } from './data/selectors';\nimport CertificatePreference from './certificate-preference/CertificatePreference';\n\nconst EditableSelectField = (props) => {\n  const {\n    name,\n    label,\n    emptyLabel,\n    type,\n    value,\n    userSuppliedValue,\n    options,\n    saveState,\n    error,\n    confirmationMessageDefinition,\n    confirmationValue,\n    helpText,\n    onEdit,\n    onCancel,\n    onSubmit,\n    onChange,\n    isEditing,\n    isEditable,\n    isGrayedOut,\n    intl,\n    ...others\n  } = props;\n  const id = `field-${name}`;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(name, new FormData(e.target).get(name));\n  };\n\n  const handleChange = (e) => {\n    onChange(name, e.target.value);\n  };\n\n  const handleEdit = () => {\n    onEdit(name);\n  };\n\n  const handleCancel = () => {\n    onCancel(name);\n  };\n\n  const renderEmptyLabel = () => {\n    if (isEditable) {\n      return <Button variant=\"link\" onClick={handleEdit} className=\"p-0\">{emptyLabel}</Button>;\n    }\n    return <span className=\"text-muted\">{emptyLabel}</span>;\n  };\n\n  const renderValue = (rawValue) => {\n    if (!rawValue) {\n      return renderEmptyLabel();\n    }\n    let finalValue = rawValue;\n\n    if (options) {\n      // Use == instead of === to prevent issues when HTML casts numbers as strings\n      // eslint-disable-next-line eqeqeq\n      const selectedOption = options.find(option => option.value == rawValue);\n      if (selectedOption) {\n        finalValue = selectedOption.label;\n      }\n    }\n\n    if (userSuppliedValue) {\n      finalValue += `: ${userSuppliedValue}`;\n    }\n\n    return finalValue;\n  };\n\n  const renderConfirmationMessage = () => {\n    if (!confirmationMessageDefinition || !confirmationValue) {\n      return null;\n    }\n    return intl.formatMessage(confirmationMessageDefinition, {\n      value: confirmationValue,\n    });\n  };\n  const selectOptions = options.map(option => (\n    <option value={option.value} key={`${option.value}-${option.label}`}>{option.label}</option>\n  ));\n\n  return (\n    <SwitchContent\n      expression={isEditing ? 'editing' : 'default'}\n      cases={{\n        editing: (\n          <>\n            <form onSubmit={handleSubmit}>\n              <Form.Group\n                controlId={id}\n                isInvalid={error != null}\n              >\n                <Form.Label size=\"sm\" className=\"h6 d-block\" htmlFor={id}>{label}</Form.Label>\n                <Form.Control\n                  data-hj-suppress\n                  name={name}\n                  id={id}\n                  type={type}\n                  as={type}\n                  value={value}\n                  onChange={handleChange}\n                  {...others}\n                >\n                  {options.length > 0 && selectOptions}\n                </Form.Control>\n                {!!helpText && <Form.Text>{helpText}</Form.Text>}\n                {error != null && <Form.Control.Feedback>{error}</Form.Control.Feedback>}\n                {others.children}\n              </Form.Group>\n              <p>\n                <StatefulButton\n                  type=\"submit\"\n                  className=\"mr-2\"\n                  state={saveState}\n                  labels={{\n                    default: intl.formatMessage(messages['account.settings.editable.field.action.save']),\n                  }}\n                  onClick={(e) => {\n                    // Swallow clicks if the state is pending.\n                    // We do this instead of disabling the button to prevent\n                    // it from losing focus (disabled elements cannot have focus).\n                    // Disabling it would causes upstream issues in focus management.\n                    // Swallowing the onSubmit event on the form would be better, but\n                    // we would have to add that logic for every field given our\n                    // current structure of the application.\n                    if (saveState === 'pending') { e.preventDefault(); }\n                  }}\n                  disabledStates={[]}\n                />\n                <Button\n                  variant=\"outline-primary\"\n                  onClick={handleCancel}\n                >\n                  {intl.formatMessage(messages['account.settings.editable.field.action.cancel'])}\n                </Button>\n              </p>\n            </form>\n            {['name', 'verified_name'].includes(name) && <CertificatePreference fieldName={name} />}\n          </>\n        ),\n        default: (\n          <div className=\"form-group\">\n            <div className=\"d-flex align-items-start\">\n              <h6 aria-level=\"3\">{label}</h6>\n              {isEditable ? (\n                <Button variant=\"link\" onClick={handleEdit} className=\"ml-3\">\n                  <FontAwesomeIcon className=\"mr-1\" icon={faPencilAlt} />{intl.formatMessage(messages['account.settings.editable.field.action.edit'])}\n                </Button>\n              ) : null}\n            </div>\n            <p data-hj-suppress className={isGrayedOut ? 'grayed-out' : null}>{renderValue(value)}</p>\n            <p className=\"small text-muted mt-n2\">{renderConfirmationMessage() || helpText}</p>\n          </div>\n        ),\n      }}\n    />\n  );\n};\n\nEditableSelectField.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.node]),\n  emptyLabel: PropTypes.node,\n  type: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  userSuppliedValue: PropTypes.string,\n  options: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  })),\n  saveState: PropTypes.oneOf(['default', 'pending', 'complete', 'error']),\n  error: PropTypes.string,\n  confirmationMessageDefinition: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    defaultMessage: PropTypes.string.isRequired,\n    description: PropTypes.string,\n  }),\n  confirmationValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  helpText: PropTypes.node,\n  onEdit: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  isEditing: PropTypes.bool,\n  isEditable: PropTypes.bool,\n  isGrayedOut: PropTypes.bool,\n  intl: intlShape.isRequired,\n};\n\nEditableSelectField.defaultProps = {\n  value: undefined,\n  options: [],\n  saveState: undefined,\n  label: undefined,\n  emptyLabel: undefined,\n  error: undefined,\n  confirmationMessageDefinition: undefined,\n  confirmationValue: undefined,\n  helpText: undefined,\n  isEditing: false,\n  isEditable: true,\n  isGrayedOut: false,\n  userSuppliedValue: undefined,\n};\n\nexport default connect(editableFieldSelector, {\n  onEdit: openForm,\n  onCancel: closeForm,\n})(injectIntl(EditableSelectField));\n","import { AsyncActionType } from '../../data/utils';\n\nexport const RESET_PASSWORD = new AsyncActionType('ACCOUNT_SETTINGS', 'RESET_PASSWORD');\n\nexport const resetPassword = email => ({\n  type: RESET_PASSWORD.BASE,\n  payload: { email },\n});\n\nexport const resetPasswordBegin = () => ({\n  type: RESET_PASSWORD.BEGIN,\n});\n\nexport const resetPasswordSuccess = () => ({\n  type: RESET_PASSWORD.SUCCESS,\n});\n\nexport const resetPasswordReset = () => ({\n  type: RESET_PASSWORD.RESET,\n});\n\nexport const resetPasswordForbidden = () => ({\n  type: RESET_PASSWORD.FORBIDDEN,\n});\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  'account.settings.editable.field.password.reset.button': {\n    id: 'account.settings.editable.field.password.reset.button',\n    defaultMessage: 'Reset Password',\n    description: 'The password reset button in account settings',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getConfig } from '@edx/frontend-platform';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { Hyperlink } from '@edx/paragon';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\n\nimport Alert from '../Alert';\n\nconst ConfirmationAlert = (props) => {\n  const { email } = props;\n\n  const technicalSupportLink = (\n    <Hyperlink\n      destination={getConfig().PASSWORD_RESET_SUPPORT_LINK}\n    >\n      <FormattedMessage\n        id=\"account.settings.editable.field.password.reset.button.confirmation.support.link\"\n        defaultMessage=\"technical support\"\n        description=\"link text used in message: account.settings.editable.field.password.reset.button.confirmation 'Contact technical support.'\"\n      />\n    </Hyperlink>\n  );\n\n  return (\n    <Alert\n      className=\"alert-warning mt-n2\"\n      icon={<FontAwesomeIcon className=\"mr-2\" icon={faExclamationTriangle} />}\n    >\n      <FormattedMessage\n        id=\"account.settings.editable.field.password.reset.button.confirmation\"\n        defaultMessage=\"We've sent a message to {email}. Click the link in the message to reset your password. Didn't receive the message? Contact {technicalSupportLink}.\"\n        description=\"The password reset button in account settings\"\n        values={{\n          email,\n          technicalSupportLink,\n        }}\n      />\n    </Alert>\n  );\n};\n\nConfirmationAlert.propTypes = {\n  email: PropTypes.string.isRequired,\n};\n\nexport default ConfirmationAlert;\n","import React from 'react';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\n\nimport Alert from '../Alert';\n\nconst RequestInProgressAlert = () => (\n  <Alert\n    className=\"alert-warning mt-n2\"\n    icon={<FontAwesomeIcon className=\"mr-2\" icon={faExclamationTriangle} />}\n  >\n    <FormattedMessage\n      id=\"account.settings.editable.field.password.reset.button.forbidden\"\n      defaultMessage=\"Your previous request is in progress, please try again in few moments.\"\n      description=\"A message displayed when a previous password reset request is still in progress.\"\n    />\n  </Alert>\n);\n\nexport default RequestInProgressAlert;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { injectIntl, intlShape, FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { StatefulButton } from '@edx/paragon';\n\nimport { resetPassword } from './data/actions';\nimport messages from './messages';\nimport ConfirmationAlert from './ConfirmationAlert';\nimport RequestInProgressAlert from './RequestInProgressAlert';\n\nconst ResetPassword = (props) => {\n  const { email, intl, status } = props;\n  return (\n    <div className=\"form-group\">\n      <h6 aria-level=\"3\">\n        <FormattedMessage\n          id=\"account.settings.editable.field.password.reset.label\"\n          defaultMessage=\"Password\"\n          description=\"The password label in account settings\"\n        />\n      </h6>\n      <p>\n        <StatefulButton\n          variant=\"link\"\n          state={status}\n          onClick={(e) => {\n            // Swallow clicks if the state is pending.\n            // We do this instead of disabling the button to prevent\n            // it from losing focus (disabled elements cannot have focus).\n            // Disabling it would causes upstream issues in focus management.\n            // Swallowing the onSubmit event on the form would be better, but\n            // we would have to add that logic for every field given our\n            // current structure of the application.\n            if (status === 'pending') {\n              e.preventDefault();\n            }\n            props.resetPassword(email);\n          }}\n          disabledStates={[]}\n          labels={{\n            default: intl.formatMessage(messages['account.settings.editable.field.password.reset.button']),\n          }}\n        />\n      </p>\n      {status === 'complete' ? <ConfirmationAlert email={email} /> : null}\n      {status === 'forbidden' ? <RequestInProgressAlert /> : null}\n    </div>\n  );\n};\n\nResetPassword.propTypes = {\n  email: PropTypes.string,\n  intl: intlShape.isRequired,\n  resetPassword: PropTypes.func.isRequired,\n  status: PropTypes.string,\n};\n\nResetPassword.defaultProps = {\n  email: '',\n  status: null,\n};\n\nconst mapStateToProps = state => state.accountSettings.resetPassword;\n\nexport default connect(\n  mapStateToProps,\n  {\n    resetPassword,\n  },\n)(injectIntl(ResetPassword));\n","import { RESET_PASSWORD } from './actions';\n\nexport const defaultState = {\n  status: null,\n};\n\nconst reducer = (state = defaultState, action = null) => {\n  if (action !== null) {\n    switch (action.type) {\n      case RESET_PASSWORD.BEGIN:\n        return {\n          ...state,\n          status: 'pending',\n        };\n      case RESET_PASSWORD.SUCCESS:\n        return {\n          ...state,\n          status: 'complete',\n        };\n      case RESET_PASSWORD.FORBIDDEN:\n        return {\n          ...state,\n          status: 'forbidden',\n        };\n\n      default:\n    }\n  }\n  return state;\n};\n\nexport default reducer;\n","import { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport formurlencoded from 'form-urlencoded';\nimport { handleRequestError } from '../../data/utils';\n\n// eslint-disable-next-line import/prefer-default-export\nexport async function postResetPassword(email) {\n  const { data } = await getAuthenticatedHttpClient()\n    .post(\n      `${getConfig().LMS_BASE_URL}/password_reset/`,\n      formurlencoded({ email }),\n      {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      },\n    )\n    .catch(handleRequestError);\n\n  return data;\n}\n","import { put, call, takeEvery } from 'redux-saga/effects';\n\nimport {\n  resetPasswordBegin, resetPasswordForbidden, resetPasswordSuccess, RESET_PASSWORD,\n} from './actions';\nimport { postResetPassword } from './service';\n\nfunction* handleResetPassword(action) {\n  yield put(resetPasswordBegin());\n  try {\n    const response = yield call(postResetPassword, action.payload.email);\n    yield put(resetPasswordSuccess(response));\n  } catch (error) {\n    if (error.response && error.response.status === 403) {\n      yield put(resetPasswordForbidden(error));\n    } else {\n      throw error;\n    }\n  }\n}\n\nexport default function* saga() {\n  yield takeEvery(RESET_PASSWORD.BASE, handleResetPassword);\n}\n","import { AsyncActionType } from '../../data/utils';\n\nexport const REQUEST_NAME_CHANGE = new AsyncActionType('ACCOUNT_SETTINGS', 'REQUEST_NAME_CHANGE');\n\nexport const requestNameChange = (username, profileName, verifiedName) => ({\n  type: REQUEST_NAME_CHANGE.BASE,\n  payload: { username, profileName, verifiedName },\n});\n\nexport const requestNameChangeBegin = () => ({\n  type: REQUEST_NAME_CHANGE.BEGIN,\n});\n\nexport const requestNameChangeSuccess = () => ({\n  type: REQUEST_NAME_CHANGE.SUCCESS,\n});\n\nexport const requestNameChangeFailure = errors => ({\n  type: REQUEST_NAME_CHANGE.FAILURE,\n  payload: { errors },\n});\n\nexport const requestNameChangeReset = () => ({\n  type: REQUEST_NAME_CHANGE.RESET,\n});\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  'account.settings.name.change.title.id': {\n    id: 'account.settings.name.change.title.id',\n    defaultMessage: 'This name change requires identity verification',\n    description: 'Inform the user that changing their name requires identity verification',\n  },\n  'account.settings.name.change.title.begin': {\n    id: 'account.settings.name.change.title.begin',\n    defaultMessage: 'Before we begin',\n    description: 'Title before beginning the ID verification process',\n  },\n  'account.settings.name.change.warning.one': {\n    id: 'account.settings.name.change.warning.one',\n    defaultMessage: 'Warning: This action updates the name that appears on all certificates that have been earned on this account in the past and any certificates you are currently earning or will earn in the future.',\n    description: 'Warning informing the user that a name change will update the name on all of their certificates.',\n  },\n  'account.settings.name.change.warning.two': {\n    id: 'account.settings.name.change.warning.two',\n    defaultMessage: 'This action cannot be undone without verifying your identity.',\n    description: 'Warning informing the user that a name change cannot be undone without ID verification.',\n  },\n  'account.settings.name.change.id.name.label': {\n    id: 'account.settings.name.change.id.name.label',\n    defaultMessage: 'Enter your name as it appears on your unexpired student, work, or government-issued identification card.',\n    description: 'Form label instructing the user to enter the name on their ID.',\n  },\n  'account.settings.name.change.id.name.placeholder': {\n    id: 'account.settings.name.change.id.name.placeholder',\n    defaultMessage: 'Enter the name on your photo ID',\n    description: 'Form label instructing the user to enter the name on their ID.',\n  },\n  'account.settings.name.change.error.valid.name': {\n    id: 'account.settings.name.change.error.valid.name',\n    defaultMessage: 'Please enter a valid name.',\n    description: 'Error that appears when the user doesn’t enter a valid name.',\n  },\n  'account.settings.name.change.error.general': {\n    id: 'account.settings.name.change.error.general',\n    defaultMessage: 'A technical error occurred. Please try again.',\n    description: 'Generic error message.',\n  },\n  'account.settings.name.change.continue': {\n    id: 'account.settings.name.change.continue',\n    defaultMessage: 'Continue',\n    description: 'Continue button.',\n  },\n  'account.settings.name.change.cancel': {\n    id: 'account.settings.name.change.cancel',\n    defaultMessage: 'Cancel',\n    description: 'Cancel button.',\n  },\n});\n\nexport default messages;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  ActionRow,\n  Alert,\n  Button,\n  Col,\n  Form,\n  ModalDialog,\n  StatefulButton,\n} from '@edx/paragon';\n\nimport { closeForm, saveSettingsReset } from '../data/actions';\nimport { nameChangeSelector } from '../data/selectors';\n\nimport { requestNameChange, requestNameChangeFailure, requestNameChangeReset } from './data/actions';\nimport messages from './messages';\n\nconst NameChangeModal = ({\n  targetFormId,\n  errors,\n  formValues,\n  intl,\n  saveState,\n}) => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const { username } = getAuthenticatedUser();\n  const [verifiedNameInput, setVerifiedNameInput] = useState(formValues.verified_name || '');\n  const [confirmedWarning, setConfirmedWarning] = useState(false);\n\n  const resetLocalState = useCallback(() => {\n    setConfirmedWarning(false);\n    dispatch(requestNameChangeReset());\n  }, [dispatch]);\n\n  const handleChange = (e) => {\n    setVerifiedNameInput(e.target.value);\n  };\n\n  const handleClose = useCallback(() => {\n    resetLocalState();\n    dispatch(closeForm(targetFormId));\n    dispatch(saveSettingsReset());\n  }, [dispatch, resetLocalState, targetFormId]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (saveState === 'pending') {\n      return;\n    }\n\n    if (!verifiedNameInput) {\n      dispatch(requestNameChangeFailure({\n        verified_name: intl.formatMessage(messages['account.settings.name.change.error.valid.name']),\n      }));\n    } else {\n      const draftProfileName = targetFormId === 'name' ? formValues.name : null;\n      dispatch(requestNameChange(username, draftProfileName, verifiedNameInput));\n    }\n  };\n\n  useEffect(() => {\n    if (saveState === 'complete') {\n      handleClose();\n      push(`/id-verification?next=${encodeURIComponent('account/settings')}`);\n    }\n  }, [handleClose, push, saveState]);\n\n  function renderErrors() {\n    if (Object.keys(errors).length > 0) {\n      return (\n        <>\n          {Object.entries(errors).map(([key, value]) => (\n            <Form.Control.Feedback type=\"invalid\" key={key}>\n              {\n                key === 'general_error'\n                  ? intl.formatMessage(messages['account.settings.name.change.error.general'])\n                  : value\n              }\n            </Form.Control.Feedback>\n          ))}\n        </>\n      );\n    }\n    return null;\n  }\n\n  function renderTitle() {\n    if (!confirmedWarning) {\n      return intl.formatMessage(messages['account.settings.name.change.title.id']);\n    }\n\n    return intl.formatMessage(messages['account.settings.name.change.title.begin']);\n  }\n\n  function renderBody() {\n    if (!confirmedWarning) {\n      return (\n        <Alert variant=\"warning\">\n          <p>\n            {intl.formatMessage(messages['account.settings.name.change.warning.one'])}\n          </p>\n          <p>\n            {intl.formatMessage(messages['account.settings.name.change.warning.two'])}\n          </p>\n        </Alert>\n      );\n    }\n\n    return (\n      <Form.Group as={Col} isInvalid={Object.keys(errors).length > 0}>\n        <Form.Label>\n          {intl.formatMessage(messages['account.settings.name.change.id.name.label'])}\n        </Form.Label>\n        <Form.Control\n          type=\"text\"\n          name=\"verifiedName\"\n          placeholder={intl.formatMessage(messages['account.settings.name.change.id.name.placeholder'])}\n          value={verifiedNameInput}\n          onChange={handleChange}\n        />\n        {renderErrors()}\n      </Form.Group>\n    );\n  }\n\n  function renderContinueButton() {\n    if (!confirmedWarning) {\n      return (\n        <Button variant=\"primary\" onClick={() => setConfirmedWarning(true)}>\n          {intl.formatMessage(messages['account.settings.name.change.continue'])}\n        </Button>\n      );\n    }\n\n    return (\n      <StatefulButton\n        type=\"submit\"\n        state={saveState}\n        labels={{\n          default: intl.formatMessage(messages['account.settings.name.change.continue']),\n        }}\n        disabledStates={[]}\n      />\n    );\n  }\n\n  return (\n    <ModalDialog\n      title={renderTitle()}\n      isOpen\n      hasCloseButton={false}\n      onClose={handleClose}\n    >\n\n      <Form onSubmit={handleSubmit}>\n        <ModalDialog.Header>\n          <ModalDialog.Title>\n            {renderTitle()}\n          </ModalDialog.Title>\n        </ModalDialog.Header>\n\n        <ModalDialog.Body className=\"mb-3 overflow-hidden\">\n          {renderBody()}\n        </ModalDialog.Body>\n\n        <ModalDialog.Footer>\n          <ActionRow>\n            <ModalDialog.CloseButton variant=\"tertiary\">\n              {intl.formatMessage(messages['account.settings.name.change.cancel'])}\n            </ModalDialog.CloseButton>\n            {renderContinueButton()}\n          </ActionRow>\n        </ModalDialog.Footer>\n      </Form>\n\n    </ModalDialog>\n  );\n};\n\nNameChangeModal.propTypes = {\n  targetFormId: PropTypes.string.isRequired,\n  errors: PropTypes.shape({}).isRequired,\n  formValues: PropTypes.shape({\n    name: PropTypes.string,\n    verified_name: PropTypes.string,\n  }).isRequired,\n  saveState: PropTypes.string,\n  intl: intlShape.isRequired,\n};\n\nNameChangeModal.defaultProps = {\n  saveState: null,\n};\n\nexport default connect(nameChangeSelector)(injectIntl(NameChangeModal));\n","import { REQUEST_NAME_CHANGE } from './actions';\n\nexport const defaultState = {\n  saveState: null,\n  errors: {},\n};\n\nconst reducer = (state = defaultState, action = null) => {\n  if (action !== null) {\n    switch (action.type) {\n      case REQUEST_NAME_CHANGE.BEGIN:\n        return {\n          ...state,\n          saveState: 'pending',\n          errors: {},\n        };\n\n      case REQUEST_NAME_CHANGE.SUCCESS:\n        return {\n          ...state,\n          saveState: 'complete',\n        };\n\n      case REQUEST_NAME_CHANGE.FAILURE:\n        return {\n          ...state,\n          saveState: 'error',\n          errors: action.payload.errors || { general_error: 'A technical error occurred. Please try again.' },\n        };\n\n      case REQUEST_NAME_CHANGE.RESET:\n        return {\n          ...state,\n          saveState: null,\n          errors: {},\n        };\n\n      default:\n    }\n  }\n  return state;\n};\n\nexport default reducer;\n","import { AsyncActionType } from '../../data/utils';\n\nexport const DISCONNECT_AUTH = new AsyncActionType('ACCOUNT_SETTINGS', 'DISCONNECT_AUTH');\n\nexport const disconnectAuth = (url, providerId) => ({\n  type: DISCONNECT_AUTH.BASE, payload: { url, providerId },\n});\nexport const disconnectAuthBegin = providerId => ({\n  type: DISCONNECT_AUTH.BEGIN, payload: { providerId },\n});\nexport const disconnectAuthSuccess = (providerId, thirdPartyAuthProviders) => ({\n  type: DISCONNECT_AUTH.SUCCESS,\n  payload: { providerId, thirdPartyAuthProviders },\n});\nexport const disconnectAuthFailure = providerId => ({\n  type: DISCONNECT_AUTH.FAILURE, payload: { providerId },\n});\nexport const disconnectAuthReset = providerId => ({\n  type: DISCONNECT_AUTH.RESET, payload: { providerId },\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { Hyperlink, StatefulButton } from '@edx/paragon';\n\nimport Alert from '../Alert';\nimport { disconnectAuth } from './data/actions';\n\nclass ThirdPartyAuth extends Component {\n  onClickDisconnect = (e) => {\n    e.preventDefault();\n    const providerId = e.currentTarget.getAttribute('data-provider-id');\n    if (this.props.disconnectionStatuses[providerId] === 'pending') {\n      return;\n    }\n    const disconnectUrl = e.currentTarget.getAttribute('data-disconnect-url');\n    this.props.disconnectAuth(disconnectUrl, providerId);\n  };\n\n  renderUnconnectedProvider(url, name) {\n    return (\n      <>\n        <h6 aria-level=\"3\">{name}</h6>\n        <Hyperlink destination={url} className=\"btn btn-outline-primary\">\n          <FormattedMessage\n            id=\"account.settings.sso.link.account\"\n            defaultMessage=\"Sign in with {name}\"\n            description=\"An action link to link a connected third party account.m {name} will be Google, Facebook, etc.\"\n            values={{ name }}\n          />\n        </Hyperlink>\n      </>\n    );\n  }\n\n  renderConnectedProvider(url, name, id) {\n    const hasError = this.props.errors[id];\n\n    return (\n      <>\n        <h6 aria-level=\"3\">\n          {name}\n          <span className=\"small font-weight-normal text-muted ml-2\">\n            <FormattedMessage\n              id=\"account.settings.sso.account.connected\"\n              defaultMessage=\"Linked\"\n              description=\"A badge to show that a third party account is linked\"\n            />\n          </span>\n        </h6>\n        {hasError ? (\n          <Alert className=\"alert-danger\">\n            <FormattedMessage\n              id=\"account.settings.sso.account.disconnect.error\"\n              defaultMessage=\"There was a problem disconnecting this account. Contact support if the problem persists.\"\n              description=\"A message displayed when an error occurred while disconnecting a third party account\"\n            />\n          </Alert>\n        ) : null}\n\n        <StatefulButton\n          variant=\"link\"\n          state={this.props.disconnectionStatuses[id]}\n          labels={{\n            default: (\n              <FormattedMessage\n                id=\"account.settings.sso.unlink.account\"\n                defaultMessage=\"Unlink {name} account\"\n                description=\"An action link to unlink a connected third party account\"\n                values={{ name }}\n              />\n            ),\n          }}\n          onClick={this.onClickDisconnect}\n          disabledStates={[]}\n          data-disconnect-url={url}\n          data-provider-id={id}\n        />\n      </>\n    );\n  }\n\n  renderProvider({\n    name, disconnectUrl, connectUrl, connected, id,\n  }) {\n    return (\n      <div className=\"form-group\" key={id}>\n        {\n          connected\n            ? this.renderConnectedProvider(disconnectUrl, name, id)\n            : this.renderUnconnectedProvider(connectUrl, name)\n        }\n      </div>\n    );\n  }\n\n  renderNoProviders() {\n    return (\n      <FormattedMessage\n        id=\"account.settings.sso.no.providers\"\n        defaultMessage=\"No accounts can be linked at this time.\"\n        description=\"Displayed when no third-party accounts are available for the user to link to their account on the platform.\"\n      />\n    );\n  }\n\n  render() {\n    if (this.props.providers === undefined) {\n      return null;\n    }\n\n    if (this.props.providers.length === 0) {\n      return this.renderNoProviders();\n    }\n\n    return this.props.providers.map(this.renderProvider, this);\n  }\n}\n\nThirdPartyAuth.propTypes = {\n  providers: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    disconnectUrl: PropTypes.string,\n    connectUrl: PropTypes.string,\n    connected: PropTypes.bool,\n    id: PropTypes.string,\n  })),\n  disconnectionStatuses: PropTypes.objectOf(PropTypes.oneOf([null, 'pending', 'complete', 'error'])),\n  errors: PropTypes.objectOf(PropTypes.bool),\n  disconnectAuth: PropTypes.func.isRequired,\n};\n\nThirdPartyAuth.defaultProps = {\n  providers: undefined,\n  disconnectionStatuses: {},\n  errors: {},\n};\n\nconst mapStateToProps = state => state.accountSettings.thirdPartyAuth;\n\nexport default connect(\n  mapStateToProps,\n  {\n    disconnectAuth,\n  },\n)(ThirdPartyAuth);\n","import { DISCONNECT_AUTH } from './actions';\n\nexport const defaultState = {\n  providers: [],\n  disconnectionStatuses: {},\n  errors: {},\n};\n\nconst reducer = (state = defaultState, action = null) => {\n  if (action !== null) {\n    switch (action.type) {\n      case DISCONNECT_AUTH.BEGIN:\n        return {\n          ...state,\n          disconnectionStatuses: {\n            ...state.disconnectionStatuses,\n            [action.payload.providerId]: 'pending',\n          },\n        };\n      case DISCONNECT_AUTH.SUCCESS:\n        return {\n          ...state,\n          disconnectionStatuses: {\n            ...state.disconnectionStatuses,\n            [action.payload.providerId]: 'complete',\n          },\n          providers: action.payload.thirdPartyAuthProviders,\n        };\n      case DISCONNECT_AUTH.FAILURE:\n        return {\n          ...state,\n          disconnectionStatuses: {\n            ...state.disconnectionStatuses,\n            [action.payload.providerId]: 'error',\n          },\n          errors: {\n            ...state.errors,\n            [action.payload.providerId]: true,\n          },\n        };\n      case DISCONNECT_AUTH.RESET:\n        return {\n          ...state,\n          disconnectionStatuses: {\n            ...state.disconnectionStatuses,\n            [action.payload.providerId]: null,\n          },\n          errors: {\n            ...state.errors,\n            [action.payload.providerId]: null,\n          },\n        };\n      default:\n    }\n  }\n  return state;\n};\n\nexport default reducer;\n","import { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nimport { handleRequestError } from '../../data/utils';\n\nexport async function getThirdPartyAuthProviders() {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(`${getConfig().LMS_BASE_URL}/api/third_party_auth/v0/providers/user_status`)\n    .catch(handleRequestError);\n\n  return data.map(({ connect_url: connectUrl, disconnect_url: disconnectUrl, ...provider }) => ({\n    ...provider,\n    connectUrl: `${getConfig().LMS_BASE_URL}${connectUrl}`,\n    disconnectUrl: `${getConfig().LMS_BASE_URL}${disconnectUrl}`,\n  }));\n}\n\nexport async function postDisconnectAuth(url) {\n  const { data } = await getAuthenticatedHttpClient()\n    .post(url)\n    .catch(handleRequestError);\n  return data;\n}\n","import { call, put, takeEvery } from 'redux-saga/effects';\nimport { logError } from '@edx/frontend-platform/logging';\n\nimport {\n  disconnectAuthReset,\n  disconnectAuthBegin,\n  disconnectAuthSuccess,\n  disconnectAuthFailure,\n  DISCONNECT_AUTH,\n} from './actions';\n\nimport {\n  getThirdPartyAuthProviders,\n  postDisconnectAuth,\n} from './service';\n\nfunction* handleDisconnectAuth(action) {\n  const { providerId } = action.payload;\n  try {\n    yield put(disconnectAuthReset(providerId));\n    yield put(disconnectAuthBegin(providerId));\n    yield call(postDisconnectAuth, action.payload.url);\n    const thirdPartyAuthProviders = yield call(getThirdPartyAuthProviders);\n    yield put(disconnectAuthSuccess(providerId, thirdPartyAuthProviders));\n  } catch (e) {\n    logError(e);\n    yield put(disconnectAuthFailure(providerId));\n  }\n}\n\nexport default function* saga() {\n  yield takeEvery(DISCONNECT_AUTH.BASE, handleDisconnectAuth);\n}\n","import { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport { getConfig } from '@edx/frontend-platform';\nimport get from 'lodash.get';\n\n/**\n * get all settings related to the coaching plugin. Settings used\n * by Microbachelors students.\n * @param {Number} userId users are identified in the api by LMS id\n */\nexport async function getCoachingPreferences(userId) {\n  let data = {};\n  try {\n    ({ data } = await getAuthenticatedHttpClient()\n      .get(`${getConfig().LMS_BASE_URL}/api/coaching/v1/users/${userId}/`));\n  } catch (error) {\n    // If a user isn't active the API call will fail with a lack of credentials.\n    data = {\n      coaching_consent: false,\n      user: userId,\n      eligible_for_coaching: false,\n      consent_form_seen: false,\n    };\n  }\n\n  return data;\n}\n\n/**\n * patch all of the settings related to coaching.\n * @param {Number} userId users are identified in the api by LMS id\n * @param {Object} commitValues { coaching }\n */\nexport async function patchCoachingPreferences(userId, commitValues) {\n  const requestUrl = `${getConfig().LMS_BASE_URL}/api/coaching/v1/users/${userId}/`;\n  const { coaching } = commitValues;\n  coaching.user = userId;\n\n  await getAuthenticatedHttpClient()\n    .patch(requestUrl, coaching)\n    .catch((error) => {\n      const apiError = Object.create(error);\n      apiError.fieldErrors = JSON.parse(error.customAttributes.httpErrorResponseData);\n      if (get(apiError, 'fieldErrors.phone_number')) {\n        // eslint-disable-next-line prefer-destructuring\n        apiError.fieldErrors.coaching = apiError.fieldErrors.phone_number[0];\n        delete apiError.fieldErrors.phone_number;\n      }\n      throw apiError;\n    });\n  return commitValues;\n}\n","export const TO = 'to';\nexport const FROM = 'from';\nexport const DEMOGRAPHICS_FIELDS = [\n  'demographics_gender',\n  'demographics_gender_description',\n  'demographics_income',\n  'demographics_learner_education_level',\n  'demographics_parent_education_level',\n  'demographics_military_history',\n  'demographics_work_status',\n  'demographics_work_status_description',\n  'demographics_current_work_sector',\n  'demographics_future_work_sector',\n  'demographics_user_ethnicity',\n];\n\n// Frontend wants (example):\n//    demographics_user_ethnicity: [\"asian\", \"white\", \"other\"]\n//\n// Demographics wants (example):\n//    user_ethnicity: [\n//      { ethnicity: \"asian\" },\n//      { ethnicity: \"white\" },\n//      { ethnicity: \"other\" }\n//    ]\nfunction convertEthnicity(ethnicityData, direction) {\n  if (direction === FROM) {\n    return ethnicityData.map(e => e.ethnicity);\n  }\n\n  if (direction === TO) {\n    return ethnicityData.map(e => ({ ethnicity: e }));\n  }\n\n  return ethnicityData;\n}\n\n// Handles conversion of data to/from Demographics IDA to/from format needed for\n// frontend\n//  * handles ethnicity field\n//  * adds/removes 'demographics' to/from key\n//  * replace `null` with empty string or empty string with null\nexport function convertData(dataObject, direction) {\n  const converted = {};\n\n  Object.entries(dataObject).forEach(([key, value]) => {\n    let newValue = value;\n\n    if (key.includes('ethnicity')) {\n      newValue = convertEthnicity(value, direction);\n    }\n\n    if (direction === TO) {\n      converted[key.replace('demographics_', '')] = newValue || null;\n    }\n\n    if (direction === FROM) {\n      converted[`demographics_${key}`] = newValue || '';\n    }\n  });\n\n  return converted;\n}\n","import { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport { getConfig } from '@edx/frontend-platform';\nimport get from 'lodash.get';\nimport { convertData, TO, FROM } from './utils';\n\n/**\n * Utility method that attempts to extract errors from the response of a PATCH request in order to\n * display a warning or otherwise meaningful message to the user.\n *\n * @param {Error} error\n */\nexport function createDemographicsError(error) {\n  const apiError = Object.create(error);\n  // If the error received has the `httpResponseData` field in it, then we should have reason to\n  // believe the Demographics service is alive and responding. Extract errors from fields where\n  // appropriate so we can display them to the user.\n  if (get(error, 'customAttributes.httpErrorResponseData')) {\n    apiError.fieldErrors = JSON.parse(error.customAttributes.httpErrorResponseData);\n    if (get(apiError, 'fieldErrors.gender_description')) {\n      // eslint-disable-next-line prefer-destructuring\n      apiError.fieldErrors.demographics_gender = apiError.fieldErrors.gender_description[0];\n      delete apiError.fieldErrors.gender_description;\n    } else if (get(apiError, 'fieldErrors.work_status_description')) {\n      // eslint-disable-next-line prefer-destructuring\n      apiError.fieldErrors.demographics_work_status = apiError.fieldErrors.work_status_description[0];\n      delete apiError.fieldErrors.work_status_description;\n    }\n  // Otherwise, when the service is down, the error response will not contain a\n  // `httpErrorResponseData` field. Add a generic 'demographicsError' field to the fieldErrors that\n  // will trigger showing an Alert to the user to them them know the update was unsuccessful.\n  } else {\n    apiError.fieldErrors = {\n      demographicsError: error.customAttributes.httpErrorType,\n    };\n  }\n\n  return apiError;\n}\n\n/**\n * post all of the data related to demographics.\n * @param {Number} userId users are identified in the api by LMS id\n * @param {Object} commitValues { demographics }\n */\nexport async function postDemographics(userId) {\n  const requestConfig = { headers: { 'Content-Type': 'application/json' } };\n  const requestUrl = `${getConfig().DEMOGRAPHICS_BASE_URL}/demographics/api/v1/demographics/`;\n  const commitValues = { user: userId };\n  let data = {};\n\n  ({ data } = await getAuthenticatedHttpClient()\n    .post(requestUrl, commitValues, requestConfig)\n    .catch((error) => {\n      const apiError = createDemographicsError(error);\n      throw apiError;\n    }));\n\n  return convertData(data, FROM);\n}\n\n/**\n * get all data related to the demographics.\n * @param {Number} userId users are identified in the api by LMS id\n */\nexport async function getDemographics(userId) {\n  const requestUrl = `${getConfig().DEMOGRAPHICS_BASE_URL}/demographics/api/v1/demographics/${userId}/`;\n  let data = {};\n\n  try {\n    ({ data } = await getAuthenticatedHttpClient()\n      .get(requestUrl));\n\n    data = convertData(data, FROM);\n  } catch (error) {\n    const apiError = Object.create(error);\n    // if the API called resulted in this user receiving a 404 then follow up with a POST call to\n    // try and create the demographics entity on the backend\n    if (apiError.customAttributes.httpErrorStatus) {\n      if (apiError.customAttributes.httpErrorStatus === 404) {\n        data = await postDemographics(userId);\n      }\n    } else {\n      data = {\n        user: userId,\n        demographics_gender: '',\n        demographics_gender_description: '',\n        demographics_income: '',\n        demographics_learner_education_level: '',\n        demographics_parent_education_level: '',\n        demographics_military_history: '',\n        demographics_work_status: '',\n        demographics_work_status_description: '',\n        demographics_current_work_sector: '',\n        demographics_future_work_sector: '',\n        demographics_user_ethnicity: [],\n      };\n    }\n  }\n\n  return data;\n}\n\n/**\n * patch all of the data related to demographics.\n * @param {Number} userId users are identified in the api by LMS id\n * @param {Object} commitValues { demographics }\n */\nexport async function patchDemographics(userId, commitValues) {\n  const requestUrl = `${getConfig().DEMOGRAPHICS_BASE_URL}/demographics/api/v1/demographics/${userId}/`;\n  const convertedCommitValues = convertData(commitValues, TO);\n  let data = {};\n\n  ({ data } = await getAuthenticatedHttpClient()\n    .patch(requestUrl, convertedCommitValues)\n    .catch((error) => {\n      const apiError = createDemographicsError(error);\n      throw apiError;\n    }));\n\n  return convertData(data, FROM);\n}\n\n/**\n * retrieve the options for each field from the Demographics API\n */\nexport async function getDemographicsOptions() {\n  const requestUrl = `${getConfig().DEMOGRAPHICS_BASE_URL}/demographics/api/v1/demographics/`;\n  let data = {};\n\n  try {\n    ({ data } = await getAuthenticatedHttpClient().options(requestUrl));\n  } catch (error) {\n    // We are catching and suppressing errors here on purpose. If an error occurs during the\n    // getDemographicsOptions call we will pass back an empty `data` object. Downstream we make\n    // the assumption that if the demographicsOptions object is empty that there was an issue or\n    // error communicating with the service/API.\n  }\n\n  return data;\n}\n","import { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport pick from 'lodash.pick';\nimport pickBy from 'lodash.pickby';\nimport omit from 'lodash.omit';\nimport isEmpty from 'lodash.isempty';\n\nimport { handleRequestError, unpackFieldErrors } from './utils';\nimport { getThirdPartyAuthProviders } from '../third-party-auth';\nimport { postVerifiedNameConfig } from '../certificate-preference/data/service';\nimport { getCoachingPreferences, patchCoachingPreferences } from '../coaching/data/service';\nimport { getDemographics, getDemographicsOptions, patchDemographics } from '../demographics/data/service';\nimport { DEMOGRAPHICS_FIELDS } from '../demographics/data/utils';\n\nconst SOCIAL_PLATFORMS = [\n  { id: 'twitter', key: 'social_link_twitter' },\n  { id: 'facebook', key: 'social_link_facebook' },\n  { id: 'linkedin', key: 'social_link_linkedin' },\n];\n\nfunction unpackAccountResponseData(data) {\n  const unpackedData = data;\n\n  // This is handled by preferences\n  delete unpackedData.time_zone;\n\n  SOCIAL_PLATFORMS.forEach(({ id, key }) => {\n    const platformData = data.social_links.find(({ platform }) => platform === id);\n    unpackedData[key] = typeof platformData === 'object' ? platformData.social_link : '';\n  });\n\n  if (Array.isArray(data.language_proficiencies)) {\n    if (data.language_proficiencies.length) {\n      unpackedData.language_proficiencies = data.language_proficiencies[0].code;\n    } else {\n      unpackedData.language_proficiencies = '';\n    }\n  }\n\n  return unpackedData;\n}\n\nfunction packAccountCommitData(commitData) {\n  const packedData = commitData;\n\n  SOCIAL_PLATFORMS.forEach(({ id, key }) => {\n    // Skip missing values. Empty strings are valid values and should be preserved.\n    if (commitData[key] === undefined) {\n      return;\n    }\n\n    packedData.social_links = [{ platform: id, social_link: commitData[key] }];\n    delete packedData[key];\n  });\n\n  if (commitData.language_proficiencies !== undefined) {\n    if (commitData.language_proficiencies) {\n      packedData.language_proficiencies = [{ code: commitData.language_proficiencies }];\n    } else {\n      // An empty string should be sent as an array.\n      packedData.language_proficiencies = [];\n    }\n  }\n\n  if (commitData.year_of_birth !== undefined) {\n    if (commitData.year_of_birth) {\n      packedData.year_of_birth = commitData.year_of_birth;\n    } else {\n      // An empty string should be sent as null.\n      packedData.year_of_birth = null;\n    }\n  }\n  return packedData;\n}\n\nexport async function getAccount(username) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(`${getConfig().LMS_BASE_URL}/api/user/v1/accounts/${username}`);\n  return unpackAccountResponseData(data);\n}\n\nexport async function patchAccount(username, commitValues) {\n  const requestConfig = {\n    headers: { 'Content-Type': 'application/merge-patch+json' },\n  };\n\n  const { data } = await getAuthenticatedHttpClient()\n    .patch(\n      `${getConfig().LMS_BASE_URL}/api/user/v1/accounts/${username}`,\n      packAccountCommitData(commitValues),\n      requestConfig,\n    )\n    .catch((error) => {\n      const unpackFunction = (fieldErrors) => {\n        const unpackedFieldErrors = fieldErrors;\n        if (fieldErrors.social_links) {\n          SOCIAL_PLATFORMS.forEach(({ key }) => {\n            unpackedFieldErrors[key] = fieldErrors.social_links;\n          });\n        }\n        return unpackFieldErrors(unpackedFieldErrors);\n      };\n      handleRequestError(error, unpackFunction);\n    });\n\n  return unpackAccountResponseData(data);\n}\n\nexport async function getPreferences(username) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(`${getConfig().LMS_BASE_URL}/api/user/v1/preferences/${username}`);\n  return data;\n}\n\nexport async function patchPreferences(username, commitValues) {\n  const requestConfig = { headers: { 'Content-Type': 'application/merge-patch+json' } };\n  const requestUrl = `${getConfig().LMS_BASE_URL}/api/user/v1/preferences/${username}`;\n\n  // Ignore the success response, the API does not currently return any data.\n  await getAuthenticatedHttpClient()\n    .patch(requestUrl, commitValues, requestConfig).catch(handleRequestError);\n\n  return commitValues;\n}\n\nexport async function getTimeZones(forCountry) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(`${getConfig().LMS_BASE_URL}/user_api/v1/preferences/time_zones/`, {\n      params: { country_code: forCountry },\n    })\n    .catch(handleRequestError);\n\n  return data;\n}\n\n/**\n * Determine if the user's profile data is managed by a third-party identity provider.\n */\nexport async function getProfileDataManager(username, userRoles) {\n  const userRoleNames = userRoles.map(role => role.split(':')[0]);\n\n  if (userRoleNames.includes('enterprise_learner')) {\n    const url = `${getConfig().LMS_BASE_URL}/enterprise/api/v1/enterprise-learner/?username=${username}`;\n    const { data } = await getAuthenticatedHttpClient().get(url).catch(handleRequestError);\n\n    if (data.results.length > 0) {\n      const enterprise = data.results[0] && data.results[0].enterprise_customer;\n      // To ensure that enterprise returned is current enterprise & it manages profile settings\n      if (enterprise && enterprise.sync_learner_profile_data) {\n        return enterprise.name;\n      }\n    }\n  }\n\n  return null;\n}\n\n/**\n * A function to determine if the Demographics questions should be displayed to the user. For the\n * MVP release of Demographics we are limiting the Demographics question visibility only to\n * MicroBachelors learners.\n */\nexport async function shouldDisplayDemographicsQuestions() {\n  const requestUrl = `${getConfig().LMS_BASE_URL}/api/demographics/v1/demographics/status/`;\n  let data = {};\n\n  try {\n    ({ data } = await getAuthenticatedHttpClient().get(requestUrl));\n    if (data.display) {\n      return data.display;\n    }\n  } catch (error) {\n    // if there was an error then we just hide the section\n    return false;\n  }\n\n  return false;\n}\n\nexport async function getVerifiedName() {\n  let data;\n  const client = getAuthenticatedHttpClient();\n  try {\n    const requestUrl = `${getConfig().LMS_BASE_URL}/api/edx_name_affirmation/v1/verified_name`;\n    ({ data } = await client.get(requestUrl));\n  } catch (error) {\n    return {};\n  }\n\n  return data;\n}\n\nexport async function getVerifiedNameHistory() {\n  let data;\n  const client = getAuthenticatedHttpClient();\n  try {\n    const requestUrl = `${getConfig().LMS_BASE_URL}/api/edx_name_affirmation/v1/verified_name/history`;\n    ({ data } = await client.get(requestUrl));\n  } catch (error) {\n    return {};\n  }\n\n  return data;\n}\n\nexport async function postVerifiedName(data) {\n  const requestConfig = { headers: { Accept: 'application/json' } };\n  const requestUrl = `${getConfig().LMS_BASE_URL}/api/edx_name_affirmation/v1/verified_name`;\n\n  await getAuthenticatedHttpClient()\n    .post(requestUrl, data, requestConfig)\n    .catch(error => handleRequestError(error));\n}\n\n/**\n * A single function to GET everything considered a setting.\n * Currently encapsulates Account, Preferences, Coaching, ThirdPartyAuth, and Demographics\n */\nexport async function getSettings(username, userRoles, userId) {\n  const [\n    account,\n    preferences,\n    thirdPartyAuthProviders,\n    profileDataManager,\n    timeZones,\n    coaching,\n    shouldDisplayDemographicsQuestionsResponse,\n    demographics,\n    demographicsOptions,\n  ] = await Promise.all([\n    getAccount(username),\n    getPreferences(username),\n    getThirdPartyAuthProviders(),\n    getProfileDataManager(username, userRoles),\n    getTimeZones(),\n    getConfig().COACHING_ENABLED && getCoachingPreferences(userId),\n    getConfig().ENABLE_DEMOGRAPHICS_COLLECTION && shouldDisplayDemographicsQuestions(),\n    getConfig().ENABLE_DEMOGRAPHICS_COLLECTION && getDemographics(userId),\n    getConfig().ENABLE_DEMOGRAPHICS_COLLECTION && getDemographicsOptions(),\n  ]);\n\n  return {\n    ...account,\n    ...preferences,\n    thirdPartyAuthProviders,\n    profileDataManager,\n    timeZones,\n    coaching,\n    shouldDisplayDemographicsSection: shouldDisplayDemographicsQuestionsResponse,\n    ...demographics,\n    demographicsOptions,\n  };\n}\n\n/**\n * A single function to PATCH everything considered a setting.\n * Currently encapsulates Account, Preferences, coaching and ThirdPartyAuth\n */\nexport async function patchSettings(username, commitValues, userId) {\n  // Note: time_zone exists in the return value from user/v1/accounts\n  // but it is always null and won't update. It also exists in\n  // user/v1/preferences where it does update. This is the one we use.\n  const preferenceKeys = ['time_zone'];\n  const coachingKeys = ['coaching'];\n  const demographicsKeys = DEMOGRAPHICS_FIELDS;\n  const certificateKeys = ['useVerifiedNameForCerts'];\n  const isDemographicsKey = (value, key) => key.includes('demographics');\n  const accountCommitValues = omit(\n    commitValues,\n    preferenceKeys,\n    coachingKeys,\n    demographicsKeys,\n    certificateKeys,\n  );\n  const preferenceCommitValues = pick(commitValues, preferenceKeys);\n  const coachingCommitValues = pick(commitValues, coachingKeys);\n  const demographicsCommitValues = pickBy(commitValues, isDemographicsKey);\n  const certCommitValues = pick(commitValues, certificateKeys);\n  const patchRequests = [];\n\n  if (!isEmpty(accountCommitValues)) {\n    patchRequests.push(patchAccount(username, accountCommitValues));\n  }\n  if (!isEmpty(preferenceCommitValues)) {\n    patchRequests.push(patchPreferences(username, preferenceCommitValues));\n  }\n  if (!isEmpty(coachingCommitValues)) {\n    patchRequests.push(patchCoachingPreferences(userId, coachingCommitValues));\n  }\n  if (!isEmpty(demographicsCommitValues)) {\n    patchRequests.push(patchDemographics(userId, demographicsCommitValues));\n  }\n  if (!isEmpty(certCommitValues)) {\n    patchRequests.push(postVerifiedNameConfig(username, certCommitValues));\n  }\n\n  const results = await Promise.all(patchRequests);\n  // Assigns in order of requests. Preference keys\n  // will override account keys. Notably time_zone.\n  const combinedResults = Object.assign({}, ...results);\n  return combinedResults;\n}\n","import { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nimport { handleRequestError } from '../../data/utils';\n\n// eslint-disable-next-line import/prefer-default-export\nexport async function postVerifiedNameConfig(username, commitValues) {\n  const requestConfig = { headers: { Accept: 'application/json' } };\n  const requestUrl = `${getConfig().LMS_BASE_URL}/api/edx_name_affirmation/v1/verified_name/config`;\n\n  const { useVerifiedNameForCerts } = commitValues;\n  const postValues = {\n    username,\n    use_verified_name_for_certs: useVerifiedNameForCerts,\n  };\n\n  const { data } = await getAuthenticatedHttpClient()\n    .post(requestUrl, postValues, requestConfig)\n    .catch(error => handleRequestError(error));\n\n  return data;\n}\n","import { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nimport { handleRequestError } from '../../data/utils';\n\n// eslint-disable-next-line import/prefer-default-export\nexport async function postNameChange(name) {\n  // Requests a pending name change, rather than saving the account name immediately\n  const requestConfig = { headers: { Accept: 'application/json' } };\n  const requestUrl = `${getConfig().LMS_BASE_URL}/api/user/v1/accounts/name_change/`;\n\n  const { data } = await getAuthenticatedHttpClient()\n    .post(requestUrl, { name }, requestConfig)\n    .catch(error => handleRequestError(error));\n\n  return data;\n}\n","import { put, call, takeEvery } from 'redux-saga/effects';\n\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\n\nimport { postVerifiedName } from '../../data/service';\n\nimport {\n  REQUEST_NAME_CHANGE,\n  requestNameChangeBegin,\n  requestNameChangeSuccess,\n  requestNameChangeFailure,\n} from './actions';\nimport { postNameChange } from './service';\n\nexport function* handleRequestNameChange(action) {\n  let { name: profileName } = getAuthenticatedUser();\n  try {\n    yield put(requestNameChangeBegin());\n    if (action.payload.profileName) {\n      yield call(postNameChange, action.payload.profileName);\n      profileName = action.payload.profileName;\n    }\n    yield call(postVerifiedName, {\n      username: action.payload.username,\n      verified_name: action.payload.verifiedName,\n      profile_name: profileName,\n    });\n    yield put(requestNameChangeSuccess());\n  } catch (err) {\n    if (err.customAttributes?.httpErrorResponseData) {\n      yield put(requestNameChangeFailure(JSON.parse(err.customAttributes.httpErrorResponseData)));\n    } else {\n      yield put(requestNameChangeFailure());\n    }\n  }\n}\n\nexport default function* saga() {\n  yield takeEvery(REQUEST_NAME_CHANGE.BASE, handleRequestNameChange);\n}\n","export const YEAR_OF_BIRTH_OPTIONS = (() => {\n  const currentYear = new Date().getFullYear();\n  const years = [];\n  let startYear = currentYear - 120;\n  while (startYear < currentYear) {\n    startYear += 1;\n\n    years.push({ value: startYear, label: startYear });\n  }\n  return years.reverse();\n})();\n\nexport const COPPA_COMPLIANCE_YEAR = (() => {\n  const currentYear = new Date().getFullYear();\n  return currentYear - 13;\n})();\n\nexport const EDUCATION_LEVELS = [\n  '',\n  'p',\n  'm',\n  'b',\n  'a',\n  'hs',\n  'jhs',\n  'el',\n  'none',\n  'o',\n];\n\nexport const GENDER_OPTIONS = [\n  '',\n  'f',\n  'm',\n  'o',\n];\n\nexport const COUNTRY_WITH_STATES = 'US';\n\nexport const TRANSIFEX_LANGUAGE_BASE_URL = 'https://www.transifex.com/open-edx/edx-platform/language/';\n\nconst COUNTRY_STATES_MAP = {\n  CA: [\n    { value: 'AB', label: 'Alberta' },\n    { value: 'BC', label: 'British Columbia' },\n    { value: 'MB', label: 'Manitoba' },\n    { value: 'NB', label: 'New Brunswick' },\n    { value: 'NL', label: 'Newfoundland and Labrador' },\n    { value: 'NS', label: 'Nova Scotia' },\n    { value: 'NT', label: 'Northwest Territories' },\n    { value: 'NU', label: 'Nunavut' },\n    { value: 'ON', label: 'Ontario' },\n    { value: 'PE', label: 'Prince Edward Island' },\n    { value: 'QC', label: 'Québec' },\n    { value: 'SK', label: 'Saskatchewan' },\n    { value: 'YT', label: 'Yukon' },\n  ],\n  US: [\n    { value: 'AL', label: 'Alabama' },\n    { value: 'AK', label: 'Alaska' },\n    { value: 'AZ', label: 'Arizona' },\n    { value: 'AR', label: 'Arkansas' },\n    { value: 'AA', label: 'Armed Forces Americas' },\n    { value: 'AE', label: 'Armed Forces Europe' },\n    { value: 'AP', label: 'Armed Forces Pacific' },\n    { value: 'CA', label: 'California' },\n    { value: 'CO', label: 'Colorado' },\n    { value: 'CT', label: 'Connecticut' },\n    { value: 'DE', label: 'Delaware' },\n    { value: 'DC', label: 'District Of Columbia' },\n    { value: 'FL', label: 'Florida' },\n    { value: 'GA', label: 'Georgia' },\n    { value: 'HI', label: 'Hawaii' },\n    { value: 'ID', label: 'Idaho' },\n    { value: 'IL', label: 'Illinois' },\n    { value: 'IN', label: 'Indiana' },\n    { value: 'IA', label: 'Iowa' },\n    { value: 'KS', label: 'Kansas' },\n    { value: 'KY', label: 'Kentucky' },\n    { value: 'LA', label: 'Louisiana' },\n    { value: 'ME', label: 'Maine' },\n    { value: 'MD', label: 'Maryland' },\n    { value: 'MA', label: 'Massachusetts' },\n    { value: 'MI', label: 'Michigan' },\n    { value: 'MN', label: 'Minnesota' },\n    { value: 'MS', label: 'Mississippi' },\n    { value: 'MO', label: 'Missouri' },\n    { value: 'MT', label: 'Montana' },\n    { value: 'NE', label: 'Nebraska' },\n    { value: 'NV', label: 'Nevada' },\n    { value: 'NH', label: 'New Hampshire' },\n    { value: 'NJ', label: 'New Jersey' },\n    { value: 'NM', label: 'New Mexico' },\n    { value: 'NY', label: 'New York' },\n    { value: 'NC', label: 'North Carolina' },\n    { value: 'ND', label: 'North Dakota' },\n    { value: 'OH', label: 'Ohio' },\n    { value: 'OK', label: 'Oklahoma' },\n    { value: 'OR', label: 'Oregon' },\n    { value: 'PA', label: 'Pennsylvania' },\n    { value: 'RI', label: 'Rhode Island' },\n    { value: 'SC', label: 'South Carolina' },\n    { value: 'SD', label: 'South Dakota' },\n    { value: 'TN', label: 'Tennessee' },\n    { value: 'TX', label: 'Texas' },\n    { value: 'UT', label: 'Utah' },\n    { value: 'VT', label: 'Vermont' },\n    { value: 'VA', label: 'Virginia' },\n    { value: 'WA', label: 'Washington' },\n    { value: 'WV', label: 'West Virginia' },\n    { value: 'WI', label: 'Wisconsin' },\n    { value: 'WY', label: 'Wyoming' },\n  ],\n};\n\nexport function getStatesList(country) {\n  return country && COUNTRY_STATES_MAP[country.toUpperCase()];\n}\n\nexport const DECLINED = 'declined';\nexport const SELF_DESCRIBE = 'self-describe';\nexport const OTHER = 'other';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { AppContext } from '@edx/frontend-platform/react';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { connect } from 'react-redux';\nimport { Button, Hyperlink } from '@edx/paragon';\n\nimport { betaLanguageBannerSelector } from './data/selectors';\nimport messages from './AccountSettingsPage.messages';\nimport { saveSettings } from './data/actions';\nimport { TRANSIFEX_LANGUAGE_BASE_URL } from './data/constants';\nimport Alert from './Alert';\n\nclass BetaLanguageBanner extends React.Component {\n  getSiteLanguageEntry(languageCode) {\n    return this.props.siteLanguageList.filter(l => l.code === languageCode)[0];\n  }\n\n  /**\n   * Returns a link to the Transifex URL where contributors can provide translations.\n   * This code is tightly coupled to how Transifex chooses to design its URLs.\n   */\n  getTransifexLink(languageCode) {\n    return TRANSIFEX_LANGUAGE_BASE_URL + this.getTransifexURLPath(languageCode);\n  }\n\n  /**\n   * Returns the URL path that Transifex chooses to use for its language sub-pages.\n   *\n   * For extended language codes, it returns the 2nd half capitalized, replacing\n   * hyphen (-) with underscore (_).\n   *     example: pt-br -> pt_BR\n   *\n   * For short language codes, it returns the code as is.\n   *     example: fr -> fr\n   */\n  getTransifexURLPath(languageCode) {\n    const tokenizedCode = languageCode.split('-');\n    if (tokenizedCode.length > 1) {\n      return `${tokenizedCode[0]}_${tokenizedCode[1].toUpperCase()}`;\n    }\n    return tokenizedCode[0];\n  }\n\n  handleRevertLanguage = () => {\n    const previousSiteLanguage = this.props.siteLanguage.previousValue;\n    this.props.saveSettings('siteLanguage', previousSiteLanguage);\n  };\n\n  render() {\n    const savedLanguage = this.getSiteLanguageEntry(this.context.locale);\n    if (!savedLanguage) {\n      return null;\n    }\n    const isSavedLanguageReleased = savedLanguage.released === true;\n    const noPreviousLanguageSet = this.props.siteLanguage.previousValue === null;\n    if (isSavedLanguageReleased || noPreviousLanguageSet) {\n      return null;\n    }\n\n    const previousLanguage = this.getSiteLanguageEntry(this.props.siteLanguage.previousValue);\n    return (\n      <div>\n        <Alert className=\"beta_language_alert alert alert-warning\" role=\"alert\">\n          <p>\n            {this.props.intl.formatMessage(messages['account.settings.banner.beta.language'], {\n              beta_language: savedLanguage.name,\n            })}\n          </p>\n          <div>\n            <Button onClick={this.handleRevertLanguage} className=\"mr-2\">\n              {this.props.intl.formatMessage(\n                messages['account.settings.banner.beta.language.action.switch.back'],\n                { previous_language: previousLanguage.name },\n              )}\n            </Button>\n            <Hyperlink\n              destination={this.getTransifexLink(savedLanguage.code)}\n              className=\"btn btn-outline-secondary\"\n              target=\"_blank\"\n            >\n              {this.props.intl.formatMessage(\n                messages['account.settings.banner.beta.language.action.help.translate'],\n                { beta_language: savedLanguage.name },\n              )}\n            </Hyperlink>\n          </div>\n        </Alert>\n      </div>\n    );\n  }\n}\n\nBetaLanguageBanner.contextType = AppContext;\n\nBetaLanguageBanner.propTypes = {\n  intl: intlShape.isRequired,\n  siteLanguage: PropTypes.shape({\n    previousValue: PropTypes.string,\n    draft: PropTypes.string,\n  }),\n  siteLanguageList: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    code: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    released: PropTypes.bool,\n  })).isRequired,\n  saveSettings: PropTypes.func.isRequired,\n};\n\nBetaLanguageBanner.defaultProps = {\n  siteLanguage: null,\n};\n\nexport default connect(\n  betaLanguageBannerSelector,\n  {\n    saveSettings,\n  },\n)(injectIntl(BetaLanguageBanner));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { injectIntl, intlShape, FormattedMessage } from '@edx/frontend-platform/i18n';\nimport {\n  Button, StatefulButton, Form,\n} from '@edx/paragon';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExclamationTriangle, faPencilAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport Alert from './Alert';\nimport SwitchContent from './SwitchContent';\nimport messages from './AccountSettingsPage.messages';\n\nimport {\n  openForm,\n  closeForm,\n} from './data/actions';\nimport { editableFieldSelector } from './data/selectors';\n\nconst EmailField = (props) => {\n  const {\n    name,\n    label,\n    emptyLabel,\n    value,\n    saveState,\n    error,\n    confirmationMessageDefinition,\n    confirmationValue,\n    helpText,\n    onEdit,\n    onCancel,\n    onSubmit,\n    onChange,\n    isEditing,\n    isEditable,\n    intl,\n  } = props;\n  const id = `field-${name}`;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(name, new FormData(e.target).get(name));\n  };\n\n  const handleChange = (e) => {\n    onChange(name, e.target.value);\n  };\n\n  const handleEdit = () => {\n    onEdit(name);\n  };\n\n  const handleCancel = () => {\n    onCancel(name);\n  };\n\n  const renderConfirmationMessage = () => {\n    if (!confirmationMessageDefinition || !confirmationValue) {\n      return null;\n    }\n    return (\n      <Alert\n        className=\"alert-warning mt-n2\"\n        icon={<FontAwesomeIcon className=\"mr-2 h6\" icon={faExclamationTriangle} />}\n      >\n        <h6 aria-level=\"3\">\n          {intl.formatMessage(messages['account.settings.email.field.confirmation.header'])}\n        </h6>\n        {intl.formatMessage(confirmationMessageDefinition, { value: confirmationValue })}\n      </Alert>\n    );\n  };\n\n  const renderConfirmationValue = () => (\n    <span>\n      {confirmationValue}\n      <span className=\"ml-3 text-muted small\">\n        <FormattedMessage\n          id=\"account.settings.email.field.confirmation.header\"\n          defaultMessage=\"Pending confirmation\"\n          description=\"The label next to a new pending email address\"\n        />\n      </span>\n    </span>\n  );\n\n  const renderEmptyLabel = () => {\n    if (isEditable) {\n      return <Button variant=\"link\" onClick={handleEdit} className=\"p-0\">{emptyLabel}</Button>;\n    }\n    return <span className=\"text-muted\">{emptyLabel}</span>;\n  };\n\n  const renderValue = () => {\n    if (confirmationValue) {\n      return renderConfirmationValue();\n    }\n    return value || renderEmptyLabel();\n  };\n\n  return (\n    <SwitchContent\n      expression={isEditing ? 'editing' : 'default'}\n      cases={{\n        editing: (\n          <form onSubmit={handleSubmit}>\n            <Form.Group\n              controlId={id}\n              isInvalid={error != null}\n            >\n              <Form.Label className=\"h6 d-block\" htmlFor={id}>{label}</Form.Label>\n              <Form.Control\n                data-hj-suppress\n                name={name}\n                id={id}\n                type=\"email\"\n                value={value}\n                onChange={handleChange}\n              />\n              {!!helpText && <Form.Text>{helpText}</Form.Text>}\n              {error != null && <Form.Control.Feedback hasIcon={false}>{error}</Form.Control.Feedback>}\n            </Form.Group>\n            <p>\n              <StatefulButton\n                type=\"submit\"\n                className=\"mr-2\"\n                state={saveState}\n                labels={{\n                  default: intl.formatMessage(messages['account.settings.editable.field.action.save']),\n                }}\n                onClick={(e) => {\n                  // Swallow clicks if the state is pending.\n                  // We do this instead of disabling the button to prevent\n                  // it from losing focus (disabled elements cannot have focus).\n                  // Disabling it would causes upstream issues in focus management.\n                  // Swallowing the onSubmit event on the form would be better, but\n                  // we would have to add that logic for every field given our\n                  // current structure of the application.\n                  if (saveState === 'pending') { e.preventDefault(); }\n                }}\n                disabledStates={[]}\n              />\n              <Button\n                variant=\"outline-primary\"\n                onClick={handleCancel}\n              >\n                {intl.formatMessage(messages['account.settings.editable.field.action.cancel'])}\n              </Button>\n            </p>\n          </form>\n        ),\n        default: (\n          <div className=\"form-group\">\n            <div className=\"d-flex align-items-start\">\n              <h6 aria-level=\"3\">{label}</h6>\n              {isEditable ? (\n                <Button variant=\"link\" onClick={handleEdit} className=\"ml-3\">\n                  <FontAwesomeIcon className=\"mr-1\" icon={faPencilAlt} />\n                  {intl.formatMessage(messages['account.settings.editable.field.action.edit'])}\n                </Button>\n              ) : null}\n            </div>\n            <p data-hj-suppress>{renderValue()}</p>\n            {renderConfirmationMessage() || <p className=\"small text-muted mt-n2\">{helpText}</p>}\n          </div>\n        ),\n      }}\n    />\n  );\n};\n\nEmailField.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  emptyLabel: PropTypes.node,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  saveState: PropTypes.oneOf(['default', 'pending', 'complete', 'error']),\n  error: PropTypes.string,\n  confirmationMessageDefinition: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    defaultMessage: PropTypes.string.isRequired,\n    description: PropTypes.string,\n  }),\n  confirmationValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  helpText: PropTypes.node,\n  onEdit: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  isEditing: PropTypes.bool,\n  isEditable: PropTypes.bool,\n  intl: intlShape.isRequired,\n};\n\nEmailField.defaultProps = {\n  value: undefined,\n  saveState: undefined,\n  label: undefined,\n  emptyLabel: undefined,\n  error: undefined,\n  confirmationMessageDefinition: undefined,\n  confirmationValue: undefined,\n  helpText: undefined,\n  isEditing: false,\n  isEditable: true,\n};\n\nexport default connect(editableFieldSelector, {\n  onEdit: openForm,\n  onCancel: closeForm,\n})(injectIntl(EmailField));\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Alert } from '@edx/paragon';\n\nconst OneTimeDismissibleAlert = (props) => {\n  const [dismissed, setDismissed] = useState(localStorage.getItem(props.id) !== 'true');\n\n  const onClose = () => {\n    localStorage.setItem(props.id, 'true');\n    setDismissed(false);\n  };\n\n  return (\n    <Alert\n      variant={props.variant}\n      dismissible\n      icon={props.icon}\n      onClose={onClose}\n      show={dismissed}\n    >\n      <Alert.Heading>{props.header}</Alert.Heading>\n      <p>\n        {props.body}\n      </p>\n    </Alert>\n  );\n};\n\nOneTimeDismissibleAlert.propTypes = {\n  id: PropTypes.string.isRequired,\n  variant: PropTypes.string,\n  icon: PropTypes.func,\n  header: PropTypes.string,\n  body: PropTypes.string,\n};\n\nOneTimeDismissibleAlert.defaultProps = {\n  variant: 'success',\n  icon: undefined,\n  header: undefined,\n  body: undefined,\n};\n\nexport default OneTimeDismissibleAlert;\n","import PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Form, StatefulButton, ModalDialog, ActionRow, useToggle, Button,\n} from '@edx/paragon';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport messages from './AccountSettingsPage.messages';\nimport { YEAR_OF_BIRTH_OPTIONS } from './data/constants';\nimport { editableFieldSelector } from './data/selectors';\nimport { saveSettingsReset } from './data/actions';\n\nconst DOBModal = (props) => {\n  const {\n    saveState,\n    error,\n    onSubmit,\n    intl,\n  } = props;\n\n  const dispatch = useDispatch();\n\n  // eslint-disable-next-line no-unused-vars\n  const [isOpen, open, close, toggle] = useToggle(true, {});\n  const [monthValue, setMonthValue] = useState('');\n  const [yearValue, setYearValue] = useState('');\n\n  const handleChange = (e) => {\n    e.preventDefault();\n\n    if (e.target.name === 'month') {\n      setMonthValue(e.target.value);\n    } else if (e.target.name === 'year') {\n      setYearValue(e.target.value);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const data = monthValue !== '' && yearValue !== '' ? [{ field_name: 'DOB', field_value: `${yearValue}-${monthValue}` }] : [];\n    onSubmit('extended_profile', data);\n  };\n\n  const handleComplete = useCallback(() => {\n    localStorage.setItem('submittedDOB', 'true');\n    close();\n    dispatch(saveSettingsReset());\n  }, [dispatch, close]);\n\n  const handleClose = useCallback(() => {\n    close();\n    dispatch(saveSettingsReset());\n  }, [dispatch, close]);\n\n  function renderErrors() {\n    if (saveState === 'error' || error) {\n      return (\n        <Form.Control.Feedback type=\"invalid\" key=\"general-error\">\n          {intl.formatMessage(messages['account.settingsfield.dob.error.general'])}\n        </Form.Control.Feedback>\n      );\n    }\n    return null;\n  }\n\n  useEffect(() => {\n    if (saveState === 'complete' && isOpen) {\n      handleComplete();\n    }\n  }, [handleComplete, saveState, isOpen, monthValue, yearValue]);\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={open}>\n        {intl.formatMessage(messages['account.settings.field.dob.form.button'])}\n      </Button>\n      <ModalDialog\n        title={intl.formatMessage(messages['account.settings.field.dob.form.title'])}\n        isOpen={isOpen}\n        onClose={handleClose}\n        hasCloseButton={false}\n        variant=\"default\"\n      >\n        <form onSubmit={handleSubmit}>\n\n          <ModalDialog.Header>\n            <ModalDialog.Title>\n              {intl.formatMessage(messages['account.settings.field.dob.form.title'])}\n            </ModalDialog.Title>\n          </ModalDialog.Header>\n\n          <ModalDialog.Body className=\"overflow-hidden\" style={{ padding: '1.5rem' }}>\n            <p>{intl.formatMessage(messages['account.settings.field.dob.form.help.text'])}</p>\n            <Form.Group>\n              <Form.Label>\n                {intl.formatMessage(messages['account.settings.field.dob.month'])}\n              </Form.Label>\n              <Form.Control\n                as=\"select\"\n                name=\"month\"\n                onChange={handleChange}\n              >\n                <option value=\"\">{intl.formatMessage(messages['account.settings.field.dob.month.default'])}</option>\n                {[...Array(12).keys()].map(month => (\n                  <option key={month + 1} value={month + 1}>{month + 1}</option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>\n                {intl.formatMessage(messages['account.settings.field.dob.year'])}\n              </Form.Label>\n              <Form.Control\n                as=\"select\"\n                name=\"year\"\n                onChange={handleChange}\n              >\n                <option value=\"\">{intl.formatMessage(messages['account.settings.field.dob.year.default'])}</option>\n                {YEAR_OF_BIRTH_OPTIONS.map(year => (\n                  <option key={year.value} value={year.value}>{year.label}</option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            {renderErrors()}\n          </ModalDialog.Body>\n\n          <ModalDialog.Footer>\n            <ActionRow>\n              <ModalDialog.CloseButton variant=\"tertiary\">\n                Cancel\n              </ModalDialog.CloseButton>\n              <StatefulButton\n                type=\"submit\"\n                state={!(monthValue && yearValue) ? 'unedited' : saveState}\n                labels={{\n                  default: intl.formatMessage(messages['account.settings.editable.field.action.save']),\n                }}\n                disabledStates={['unedited']}\n              />\n            </ActionRow>\n          </ModalDialog.Footer>\n\n        </form>\n      </ModalDialog>\n    </>\n  );\n};\n\nDOBModal.propTypes = {\n  saveState: PropTypes.oneOf(['default', 'pending', 'complete', 'error']),\n  error: PropTypes.string,\n  onSubmit: PropTypes.func.isRequired,\n  intl: intlShape.isRequired,\n};\n\nDOBModal.defaultProps = {\n  saveState: undefined,\n  error: undefined,\n};\n\nexport default connect(editableFieldSelector)(injectIntl(DOBModal));\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  'account.settings.field.phone_number': {\n    id: 'account.settings.field.phone_number',\n    defaultMessage: 'Phone Number',\n    description: 'The label for a phone numbers setting in the user profile',\n  },\n  'account.settings.field.phone_number.empty': {\n    id: 'account.settings.field.phone_number.empty',\n    defaultMessage: 'Add a phone number',\n    description: 'placeholder for a profiles empty phone number field',\n  },\n  'account.settings.field.coaching_consent': {\n    id: 'account.settings.field.coaching_consent',\n    defaultMessage: 'Coaching consent',\n    description: 'The label for the coaching consent setting in the user profile',\n  },\n  'account.settings.field.coaching_consent.tooltip': {\n    id: 'account.settings.field.coaching_consent.tooltip',\n    defaultMessage: 'MicroBachelors programs include text message based coaching that helps you pair educational experiences with your career goals through one-on-one advice. Coaching services are included at no additional cost, and are available to learners with U.S. mobile phone numbers. Standard messaging rates apply. Text ‘STOP’ at anytime to opt-out of messages.',\n    description: 'A tooltip explaining what coaching is and who it is for',\n  },\n  'account.settings.field.coaching_consent.error': {\n    id: 'account.settings.field.coaching_consent.error',\n    defaultMessage: 'A valid US phone number is required to opt into coaching',\n    description: 'An error message that displays when a user attempts to consent to coaching without first providing a phone number in their profile',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Form } from '@edx/paragon';\nimport messages from './CoachingToggle.messages';\nimport { editableFieldSelector } from '../data/selectors';\nimport { saveSettings, updateDraft, saveMultipleSettings } from '../data/actions';\nimport EditableField from '../EditableField';\n\nconst CoachingToggle = (props) => (\n  <>\n    <EditableField\n      name=\"phone_number\"\n      type=\"text\"\n      value={props.phone_number}\n      label={props.intl.formatMessage(messages['account.settings.field.phone_number'])}\n      emptyLabel={props.intl.formatMessage(messages['account.settings.field.phone_number.empty'])}\n      onChange={props.updateDraft}\n      onSubmit={() => {\n        const { coaching } = props;\n        if (coaching.coaching_consent === true) {\n          return props.saveMultipleSettings([\n            {\n              formId: 'coaching',\n              commitValues: {\n                ...coaching,\n                phone_number: props.phone_number,\n              },\n            },\n            {\n              formId: 'phone_number',\n              commitValues: props.phone_number,\n            },\n          ], 'phone_number');\n        }\n        return props.saveSettings('phone_number', props.phone_number);\n      }}\n    />\n    <Form.Group\n      isInvalid={!!props.error}\n      className=\"custom-control custom-switch\"\n    >\n      <Form.Switch\n        name={props.name}\n        className=\"custom-control-input\"\n        disabled={props.saveState === 'pending'}\n        type=\"checkbox\"\n        id=\"coachingConsent\"\n        checked={props.coaching.coaching_consent}\n        helperText={props.intl.formatMessage(messages['account.settings.field.coaching_consent.tooltip'])}\n        value={props.coaching.coaching_consent}\n        onChange={async (e) => {\n          const { name } = e.target;\n          // eslint-disable-next-line camelcase\n          const { user, eligible_for_coaching } = props.coaching;\n          const value = {\n            user,\n            // eslint-disable-next-line camelcase\n            eligible_for_coaching,\n            coaching_consent: e.target.checked,\n          };\n          props.saveSettings(name, value);\n        }}\n      >\n        {props.intl.formatMessage(messages['account.settings.field.coaching_consent'])}\n      </Form.Switch>\n      {!!props.error && (\n        <Form.Control.Feedback>\n          {props.intl.formatMessage(messages['account.settings.field.coaching_consent.error'])}\n        </Form.Control.Feedback>\n      )}\n    </Form.Group>\n  </>\n);\n\nCoachingToggle.defaultProps = {\n  phone_number: '',\n  error: '',\n  saveState: undefined,\n};\n\nCoachingToggle.propTypes = {\n  name: PropTypes.string.isRequired,\n  error: PropTypes.string,\n  coaching: PropTypes.shape({\n    coaching_consent: PropTypes.bool.isRequired,\n    user: PropTypes.number.isRequired,\n    eligible_for_coaching: PropTypes.bool.isRequired,\n  }).isRequired,\n  saveState: PropTypes.oneOf(['default', 'pending', 'complete', 'error']),\n  saveSettings: PropTypes.func.isRequired,\n  saveMultipleSettings: PropTypes.func.isRequired,\n  updateDraft: PropTypes.func.isRequired,\n  intl: intlShape.isRequired,\n  phone_number: PropTypes.string,\n};\n\nexport default connect(editableFieldSelector, {\n  saveSettings,\n  updateDraft,\n  saveMultipleSettings,\n})(injectIntl(CoachingToggle));\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from '@edx/paragon';\nimport { DECLINED } from '../data/constants';\n\nconst Checkboxes = (props) => {\n  const {\n    id,\n    options,\n    values,\n    onChange,\n  } = props;\n\n  const [selected, setSelected] = useState(values);\n  useEffect(() => {\n    onChange(id, selected);\n  }, [id, onChange, selected]);\n\n  const handleToggle = (value, option) => {\n    // If the user checked 'declined', uncheck all other options\n    if (value && option === DECLINED) {\n      setSelected([DECLINED]);\n      return;\n    }\n\n    // If option checked, make sure this option is in `selected` (and remove 'declined')\n    if (value && !selected.includes(option)) {\n      const newSelected = selected.filter(i => i !== DECLINED).concat(option);\n      setSelected(newSelected);\n    }\n\n    // If unchecked, make sure this option is NOT in `selected`\n    if (!value) {\n      setSelected(selected.filter(i => i !== option));\n    }\n  };\n\n  const renderCheckboxes = () => options.map((option, index) => {\n    const isFirst = index === 0;\n    const isChecked = selected.includes(option.value);\n    return (\n      <div key={option.value} className=\"checkboxOption\">\n        <Form.Checkbox\n          type=\"checkbox\"\n          id={option.value}\n          name={option.value}\n          value={option.value}\n          checked={isChecked}\n          autoFocus={isFirst}\n          onChange={(event) => handleToggle(event.target.checked, option.value)}\n        >\n          {option.label}\n        </Form.Checkbox>\n      </div>\n    );\n  });\n\n  return (\n    <div role=\"group\">\n      {renderCheckboxes()}\n    </div>\n  );\n};\n\nCheckboxes.propTypes = {\n  id: PropTypes.string.isRequired,\n  options: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.string,\n    label: PropTypes.string,\n  })),\n  values: PropTypes.arrayOf(PropTypes.string),\n  onChange: PropTypes.func.isRequired,\n};\n\nCheckboxes.defaultProps = {\n  options: [],\n  values: [],\n};\n\nexport default Checkboxes;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  /* Demographics section heading */\n  'account.settings.section.demographics.information': {\n    id: 'account.settings.section.demographics.information',\n    defaultMessage: 'Optional Information',\n    description: 'The optional information section heading.',\n  },\n  /* Gender identity */\n  'account.settings.field.demographics.gender': {\n    id: 'account.settings.field.demographics.gender',\n    defaultMessage: 'Gender identity',\n    description: 'Label for account settings gender identity field.',\n  },\n  'account.settings.field.demographics.gender.empty': {\n    id: 'account.settings.field.demographics.gender.empty',\n    defaultMessage: 'Add gender identity',\n    description: 'Placeholder for empty account settings gender identity field.',\n  },\n  'account.settings.field.demographics.gender.options.empty': {\n    id: 'account.settings.field.demographics.gender.options.empty',\n    defaultMessage: 'Select a gender identity',\n    description: 'Placeholder for the gender identity options dropdown.',\n  },\n  'account.settings.field.demographics.gender_description': {\n    id: 'account.settings.field.demographics.gender_description',\n    defaultMessage: 'Gender identity description',\n    description: 'Label for account settings gender identity description field.',\n  },\n  'account.settings.field.demographics.gender_description.empty': {\n    id: 'account.settings.field.demographics.gender_description.empty',\n    defaultMessage: 'Enter description',\n    description: 'Placeholder for empty account settings gender identity field.',\n  },\n  /* Ethnicity */\n  'account.settings.field.demographics.ethnicity': {\n    id: 'account.settings.field.demographics.ethnicity',\n    defaultMessage: 'Race/Ethnicity identity',\n    description: 'Label for account settings ethnic background field.',\n  },\n  'account.settings.field.demographics.ethnicity.empty': {\n    id: 'account.settings.field.demographics.ethnicity.empty',\n    defaultMessage: 'Add race/ethnicity identity',\n    description: 'Placeholder for empty account settings ethnic background field.',\n  },\n  'account.settings.field.demographics.ethnicity.options.empty': {\n    id: 'account.settings.field.demographics.ethnicity.options.empty',\n    defaultMessage: 'Select all that apply', // TODO: Is this the desired text?\n    description: 'Placeholder for the ethnic background options field.',\n  },\n  /* Income */\n  'account.settings.field.demographics.income': {\n    id: 'account.settings.field.demographics.income',\n    defaultMessage: 'Family income',\n    description: 'Label for account settings household income field.',\n  },\n  'account.settings.field.demographics.income.empty': {\n    id: 'account.settings.field.demographics.income.empty',\n    defaultMessage: 'Add family income',\n    description: 'Placeholder for empty account settings household income field.',\n  },\n  'account.settings.field.demographics.income.options.empty': {\n    id: 'account.settings.field.demographics.income.options.empty',\n    defaultMessage: 'Select a family income range',\n    description: 'Placeholder for the household income dropdown.',\n  },\n  /* Military history */\n  'account.settings.field.demographics.military_history': {\n    id: 'account.settings.field.demographics.military_history',\n    defaultMessage: 'U.S. Military status',\n    description: 'Label for account settings military history field.',\n  },\n  'account.settings.field.demographics.military_history.empty': {\n    id: 'account.settings.field.demographics.military_history.empty',\n    defaultMessage: 'Add military status',\n    description: 'Placeholder for empty account settings military history field.',\n  },\n  'account.settings.field.demographics.military_history.options.empty': {\n    id: 'account.settings.field.demographics.military_history.options.empty',\n    defaultMessage: 'Select military status',\n    description: 'Placeholder for the military history dropdown.',\n  },\n  /* Learner and family education level */\n  'account.settings.field.demographics.learner_education_level': {\n    id: 'account.settings.field.demographics.learner_education_level',\n    defaultMessage: 'Your education level',\n    description: 'Label for account settings learner education level field.',\n  },\n  'account.settings.field.demographics.learner_education_level.empty': {\n    id: 'account.settings.field.demographics.learner_education_level.empty',\n    defaultMessage: 'Add education level',\n    description: 'Placeholder for empty account settings learner education level field.',\n  },\n  'account.settings.field.demographics.parent_education_level': {\n    id: 'account.settings.field.demographics.parent_education_level',\n    defaultMessage: 'Parents/Guardians education level',\n    description: 'Label for account settings parent education level field.',\n  },\n  'account.settings.field.demographics.parent_education_level.empty': {\n    id: 'account.settings.field.demographics.parent_education_level.empty',\n    defaultMessage: 'Add education level',\n    description: 'Placeholder for empty account settings parent education level field.',\n  },\n  'account.settings.field.demographics.education_level.options.empty': {\n    id: 'account.settings.field.demographics.education_level.options.empty',\n    defaultMessage: 'Select education level',\n    description: 'Placeholder for the education level options dropdown.',\n  },\n  /* Work status */\n  'account.settings.field.demographics.work_status': {\n    id: 'account.settings.field.demographics.work_status',\n    defaultMessage: 'Employment status',\n    description: 'Label for account settings work status field.',\n  },\n  'account.settings.field.demographics.work_status.empty': {\n    id: 'account.settings.field.demographics.work_status.empty',\n    defaultMessage: 'Add employment status',\n    description: 'Placeholder for empty account settings work status field.',\n  },\n  'account.settings.field.demographics.work_status.options.empty': {\n    id: 'account.settings.field.demographics.work_status.options.empty',\n    defaultMessage: 'Select employment status',\n    description: 'Placeholder for the work status options dropdown.',\n  },\n  'account.settings.field.demographics.work_status_description': {\n    id: 'account.settings.field.demographics.work_status_description',\n    defaultMessage: 'Employment status description',\n    description: 'Label for account settings work status description field.',\n  },\n  'account.settings.field.demographics.work_status_description.empty': {\n    id: 'account.settings.field.demographics.work_status_description.empty',\n    defaultMessage: 'Enter description',\n    description: 'Placeholder for empty account settings work status description field.',\n  },\n  /* Work sector */\n  'account.settings.field.demographics.current_work_sector': {\n    id: 'account.settings.field.demographics.current_work_sector',\n    defaultMessage: 'Current work industry',\n    description: 'Label for account settings current work sector field.',\n  },\n  'account.settings.field.demographics.current_work_sector.empty': {\n    id: 'account.settings.field.demographics.current_work_sector.empty',\n    defaultMessage: 'Add work industry',\n    description: 'Placeholder for empty account settings current work sector field.',\n  },\n  'account.settings.field.demographics.future_work_sector': {\n    id: 'account.settings.field.demographics.future_work_sector',\n    defaultMessage: 'Future work industry',\n    description: 'Label for account settings future work sector field.',\n  },\n  'account.settings.field.demographics.future_work_sector.empty': {\n    id: 'account.settings.field.demographics.future_work_sector.empty',\n    defaultMessage: 'Add work industry',\n    description: 'Placeholder for empty account settings future work sector field.',\n  },\n  'account.settings.field.demographics.work_sector.options.empty': {\n    id: 'account.settings.field.demographics.work_sector.options.empty',\n    defaultMessage: 'Select work industry',\n    description: 'Placeholder for the work sector options dropdown.',\n  },\n  /* Legal copy link text */\n  'account.settings.section.demographics.why': {\n    id: 'account.settings.section.demographics.why',\n    defaultMessage: 'Why does {siteName} collect this information?',\n    description: 'Link text for a link to external legal text',\n  },\n});\n\nexport default messages;\n","import { getConfig } from '@edx/frontend-platform';\nimport {\n  FormattedMessage,\n  injectIntl,\n  intlShape,\n} from '@edx/frontend-platform/i18n';\n\nimport { Hyperlink, Form } from '@edx/paragon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport get from 'lodash.get';\nimport isEmpty from 'lodash.isempty';\nimport memoize from 'memoize-one';\nimport { demographicsSectionSelector } from '../data/selectors';\nimport EditableSelectField from '../EditableSelectField';\nimport Checkboxes from './Checkboxes';\nimport Alert from '../Alert';\nimport { saveMultipleSettings, updateDraft } from '../data/actions';\nimport {\n  OTHER,\n  SELF_DESCRIBE,\n} from '../data/constants';\nimport messages from './DemographicsSection.messages';\n\nclass DemographicsSection extends React.Component {\n  // We check the `demographicsOptions` prop to see if it is empty before we attempt to extract and\n  // format the available options for each question from the API response.\n  getApiOptions = memoize((demographicsOptions) => (this.hasRetrievedDemographicsOptions() && {\n    demographicsGenderOptions: this.addDefaultOption('account.settings.field.demographics.gender.options.empty')\n      .concat(demographicsOptions.actions.POST.gender.choices.map(key => ({\n        value: key.value,\n        label: key.display_name,\n      }))),\n    /* Ethnicity options don't need the blank/default option */\n    demographicsEthnicityOptions: demographicsOptions.actions.POST.user_ethnicity.child.children.ethnicity.choices.map(\n      key => ({\n        value: key.value,\n        label: key.display_name,\n      }),\n    ),\n    demographicsIncomeOptions: this.addDefaultOption('account.settings.field.demographics.income.options.empty')\n      .concat(demographicsOptions.actions.POST.income.choices.map(key => ({\n        value: key.value,\n        label: key.display_name,\n      }))),\n    demographicsMilitaryHistoryOptions: this.addDefaultOption('account.settings.field.demographics.military_history.options.empty')\n      .concat(demographicsOptions.actions.POST.military_history.choices.map(key => ({\n        value: key.value,\n        label: key.display_name,\n      }))),\n    demographicsEducationLevelOptions: this.addDefaultOption('account.settings.field.demographics.education_level.options.empty')\n      .concat(demographicsOptions.actions.POST.learner_education_level.choices.map(key => ({\n        value: key.value,\n        label: key.display_name,\n      }))),\n    demographicsWorkStatusOptions: this.addDefaultOption('account.settings.field.demographics.work_status.options.empty')\n      .concat(demographicsOptions.actions.POST.work_status.choices.map(key => ({\n        value: key.value,\n        label: key.display_name,\n      }))),\n    demographicsWorkSectorOptions: this.addDefaultOption('account.settings.field.demographics.work_sector.options.empty')\n      .concat(demographicsOptions.actions.POST.current_work_sector.choices.map(key => ({\n        value: key.value,\n        label: key.display_name,\n      }))),\n  }));\n\n  ethnicityFieldDisplay = (demographicsEthnicityOptions) => {\n    let ethnicities = [];\n    if (get(this, 'props.formValues.demographics_user_ethnicity')) {\n      ethnicities = this.props.formValues.demographics_user_ethnicity;\n    }\n    return ethnicities.map((e) => {\n      const matchingOption = demographicsEthnicityOptions.filter(option => option.value === e)[0];\n      return matchingOption && matchingOption.label;\n    }).join(', ');\n  };\n\n  handleEditableFieldChange = (name, value) => {\n    this.props.updateDraft(name, value);\n  };\n\n  handleSubmit = (formId) => {\n    // We have some custom fields in this section. Instead of relying on the\n    // submitted values, submit the values stored in 'drafts'.\n    const { drafts } = this.props;\n    const settingsArray = Object.entries(drafts).map(([field, value]) => ({\n      formId: field,\n      commitValues: value,\n    }));\n\n    this.props.saveMultipleSettings(settingsArray, formId);\n  };\n\n  /**\n   * Utility method that adds the specified message as a default option to the list of available\n   * choices.\n   *\n   * @param {*} messageId id of message matching desired default label text\n   */\n  addDefaultOption(messageId) {\n    return [{\n      value: '',\n      label: this.props.intl.formatMessage(messages[messageId]),\n    }];\n  }\n\n  /**\n   * Utility method that helps determine if we were able to retrieve the available options for\n   * the Demographics questions. Returns true if the `demographicsOptions` prop is _not_ empty,\n   * otherwise false. This prop being empty is indicative of a failure communicating with the\n   * Demographics IDA's API.\n   */\n  hasRetrievedDemographicsOptions() {\n    return !isEmpty(this.props.formValues.demographicsOptions);\n  }\n\n  /**\n   * If an error is encountered when trying to communicate with the Demographics IDA then we will\n   * display an Alert letting the user know that their info will not be displayed and temporarily\n   * cannot be updated.\n   */\n  renderDemographicsServiceIssueWarning() {\n    if (!isEmpty(this.props.formErrors.demographicsError)\n        || !this.hasRetrievedDemographicsOptions()) {\n      return (\n        <div\n          tabIndex=\"-1\"\n          ref={this.alertRef}\n        >\n          <Alert className=\"alert alert-danger\" role=\"alert\">\n            <FormattedMessage\n              id=\"account.settings.message.demographics.service.issue\"\n              defaultMessage=\"An error occurred attempting to retrieve or save your account information. Please try again later.\"\n              description=\"alert message informing the user that the there is a problem retrieving or updating information from the Demographics microservice\"\n            />\n          </Alert>\n        </div>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    const editableFieldProps = {\n      onChange: this.handleEditableFieldChange,\n      onSubmit: this.handleSubmit,\n    };\n\n    const {\n      demographicsGenderOptions,\n      demographicsEthnicityOptions,\n      demographicsIncomeOptions,\n      demographicsMilitaryHistoryOptions,\n      demographicsEducationLevelOptions,\n      demographicsWorkStatusOptions,\n      demographicsWorkSectorOptions,\n    } = this.getApiOptions(this.props.formValues.demographicsOptions);\n\n    const showSelfDescribe = this.props.formValues.demographics_gender === SELF_DESCRIBE;\n    const showWorkStatusDescribe = this.props.formValues.demographics_work_status === OTHER;\n\n    return (\n      <div className=\"account-section pt-3 mb-5\" id=\"demographics-information\" ref={this.props.forwardRef}>\n        <h2 className=\"section-heading h4 mb-3\">\n          {this.props.intl.formatMessage(messages['account.settings.section.demographics.information'])}\n        </h2>\n        <p>\n          <Hyperlink\n            destination={`${getConfig().MARKETING_SITE_BASE_URL}/demographics`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {this.props.intl.formatMessage(\n              messages['account.settings.section.demographics.why'],\n              {\n                siteName: getConfig().SITE_NAME,\n              },\n            )}\n          </Hyperlink>\n        </p>\n        {this.renderDemographicsServiceIssueWarning()}\n        {/*\n          If the demographicsOptions props are empty then there is no need to display the fields as\n          the user will not have any choices available to select, nor will they be able to update\n          their answers.\n        */}\n        {this.hasRetrievedDemographicsOptions() && (\n          <div id=\"demographics-fields\">\n            <EditableSelectField\n              name=\"demographics_gender\"\n              type=\"select\"\n              value={this.props.formValues.demographics_gender}\n              userSuppliedValue={showSelfDescribe ? this.props.formValues.demographics_gender_description : null}\n              options={demographicsGenderOptions}\n              label={this.props.intl.formatMessage(messages['account.settings.field.demographics.gender'])}\n              emptyLabel={this.props.intl.formatMessage(messages['account.settings.field.demographics.gender.empty'])}\n              {...editableFieldProps}\n            >\n              {showSelfDescribe && (\n                <Form.Control\n                  name=\"demographics_gender_description\"\n                  id=\"field-demographics_gender_description\"\n                  type=\"text\"\n                  placeholder={this.props.intl.formatMessage(messages['account.settings.field.demographics.gender_description.empty'])}\n                  value={this.props.formValues.demographics_gender_description}\n                  onChange={(e) => this.handleEditableFieldChange('demographics_gender_description', e.target.value)}\n                  aria-label={this.props.intl.formatMessage(messages['account.settings.field.demographics.gender_description'])}\n                  className=\"mt-1\"\n                />\n              )}\n            </EditableSelectField>\n            <EditableSelectField\n              name=\"demographics_user_ethnicity\"\n              type=\"select\"\n              hidden\n              value={this.ethnicityFieldDisplay(demographicsEthnicityOptions)}\n              label={this.props.intl.formatMessage(messages['account.settings.field.demographics.ethnicity'])}\n              emptyLabel={this.props.intl.formatMessage(messages['account.settings.field.demographics.ethnicity.empty'])}\n              {...editableFieldProps}\n            >\n              <Checkboxes\n                id=\"demographics_user_ethnicity\"\n                options={demographicsEthnicityOptions}\n                values={this.props.formValues.demographics_user_ethnicity}\n                {...editableFieldProps}\n              />\n            </EditableSelectField>\n            <EditableSelectField\n              name=\"demographics_income\"\n              type=\"select\"\n              value={this.props.formValues.demographics_income}\n              options={demographicsIncomeOptions}\n              label={this.props.intl.formatMessage(messages['account.settings.field.demographics.income'])}\n              emptyLabel={this.props.intl.formatMessage(messages['account.settings.field.demographics.income.empty'])}\n              {...editableFieldProps}\n            />\n            <EditableSelectField\n              name=\"demographics_military_history\"\n              type=\"select\"\n              value={this.props.formValues.demographics_military_history}\n              options={demographicsMilitaryHistoryOptions}\n              label={this.props.intl.formatMessage(messages['account.settings.field.demographics.military_history'])}\n              emptyLabel={this.props.intl.formatMessage(messages['account.settings.field.demographics.military_history.empty'])}\n              {...editableFieldProps}\n            />\n            <EditableSelectField\n              name=\"demographics_learner_education_level\"\n              type=\"select\"\n              value={this.props.formValues.demographics_learner_education_level}\n              options={demographicsEducationLevelOptions}\n              label={this.props.intl.formatMessage(messages['account.settings.field.demographics.learner_education_level'])}\n              emptyLabel={this.props.intl.formatMessage(messages['account.settings.field.demographics.learner_education_level.empty'])}\n              {...editableFieldProps}\n            />\n            <EditableSelectField\n              name=\"demographics_parent_education_level\"\n              type=\"select\"\n              value={this.props.formValues.demographics_parent_education_level}\n              options={demographicsEducationLevelOptions}\n              label={this.props.intl.formatMessage(messages['account.settings.field.demographics.parent_education_level'])}\n              emptyLabel={this.props.intl.formatMessage(messages['account.settings.field.demographics.parent_education_level.empty'])}\n              {...editableFieldProps}\n            />\n            <EditableSelectField\n              name=\"demographics_work_status\"\n              type=\"select\"\n              value={this.props.formValues.demographics_work_status}\n              userSuppliedValue={showWorkStatusDescribe\n                ? this.props.formValues.demographics_work_status_description\n                : null}\n              options={demographicsWorkStatusOptions}\n              label={this.props.intl.formatMessage(messages['account.settings.field.demographics.work_status'])}\n              emptyLabel={this.props.intl.formatMessage(messages['account.settings.field.demographics.work_status.empty'])}\n              {...editableFieldProps}\n            >\n              {showWorkStatusDescribe && (\n                <Form.Control\n                  name=\"demographics_work_status_description\"\n                  id=\"field-demographics_work_status_description\"\n                  type=\"text\"\n                  placeholder={this.props.intl.formatMessage(messages['account.settings.field.demographics.work_status_description.empty'])}\n                  value={this.props.formValues.demographics_work_status_description}\n                  onChange={(e) => this.handleEditableFieldChange('demographics_work_status_description', e.target.value)}\n                  aria-label={this.props.intl.formatMessage(messages['account.settings.field.demographics.work_status_description'])}\n                  className=\"mt-1\"\n                />\n              )}\n            </EditableSelectField>\n            <EditableSelectField\n              name=\"demographics_current_work_sector\"\n              type=\"select\"\n              value={this.props.formValues.demographics_current_work_sector}\n              options={demographicsWorkSectorOptions}\n              label={this.props.intl.formatMessage(messages['account.settings.field.demographics.current_work_sector'])}\n              emptyLabel={this.props.intl.formatMessage(messages['account.settings.field.demographics.current_work_sector.empty'])}\n              {...editableFieldProps}\n            />\n            <EditableSelectField\n              name=\"demographics_future_work_sector\"\n              type=\"select\"\n              value={this.props.formValues.demographics_future_work_sector}\n              options={demographicsWorkSectorOptions}\n              label={this.props.intl.formatMessage(messages['account.settings.field.demographics.future_work_sector'])}\n              emptyLabel={this.props.intl.formatMessage(messages['account.settings.field.demographics.future_work_sector.empty'])}\n              {...editableFieldProps}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nDemographicsSection.propTypes = {\n  intl: intlShape.isRequired,\n  formValues: PropTypes.shape({\n    demographics_gender: PropTypes.string,\n    demographics_user_ethnicity: PropTypes.shape([]),\n    demographics_income: PropTypes.string,\n    demographics_military_history: PropTypes.string,\n    demographics_learner_education_level: PropTypes.string,\n    demographics_parent_education_level: PropTypes.string,\n    demographics_work_status: PropTypes.string,\n    demographics_current_work_sector: PropTypes.string,\n    demographics_future_work_sector: PropTypes.string,\n    demographics_work_status_description: PropTypes.string,\n    demographics_gender_description: PropTypes.string,\n    demographicsOptions: PropTypes.shape({}),\n  }).isRequired,\n  drafts: PropTypes.shape({\n    demographics_gender: PropTypes.string,\n    demographics_user_ethnicity: PropTypes.shape([]),\n    demographics_income: PropTypes.string,\n    demographics_military_history: PropTypes.string,\n    demographics_learner_education_level: PropTypes.string,\n    demographics_parent_education_level: PropTypes.string,\n    demographics_work_status: PropTypes.string,\n    demographics_current_work_sector: PropTypes.string,\n    demographics_future_work_sector: PropTypes.string,\n    demographics_work_status_description: PropTypes.string,\n    demographics_gender_description: PropTypes.string,\n    demographicsOptions: PropTypes.shape({}),\n  }).isRequired,\n  formErrors: PropTypes.shape({\n    demographicsError: PropTypes.string,\n  }).isRequired,\n  forwardRef: PropTypes.func.isRequired,\n  updateDraft: PropTypes.func.isRequired,\n  saveMultipleSettings: PropTypes.func.isRequired,\n};\n\nexport default connect(demographicsSectionSelector, {\n  saveMultipleSettings,\n  updateDraft,\n})(injectIntl(DemographicsSection));\n","export const Actions = {\n  FETCHED_PREFERENCES: 'fetchedPreferences',\n  FETCHING_PREFERENCES: 'fetchingPreferences',\n  FAILED_PREFERENCES: 'failedPreferences',\n  FETCHING_COURSE_LIST: 'fetchingCourseList',\n  FETCHED_COURSE_LIST: 'fetchedCourseList',\n  FAILED_COURSE_LIST: 'failedCourseList',\n  UPDATE_SELECTED_COURSE: 'updateSelectedCourse',\n  UPDATE_PREFERENCE: 'updatePreference',\n  UPDATE_APP_PREFERENCE: 'updateAppValue',\n};\n\nexport const fetchNotificationPreferenceSuccess = (courseId, payload) => dispatch => (\n  dispatch({ type: Actions.FETCHED_PREFERENCES, courseId, payload })\n);\n\nexport const fetchNotificationPreferenceFetching = () => dispatch => (\n  dispatch({ type: Actions.FETCHING_PREFERENCES })\n);\n\nexport const fetchNotificationPreferenceFailed = () => dispatch => (\n  dispatch({ type: Actions.FAILED_PREFERENCES })\n);\n\nexport const fetchCourseListSuccess = payload => dispatch => (\n  dispatch({ type: Actions.FETCHED_COURSE_LIST, payload })\n);\n\nexport const fetchCourseListFetching = () => dispatch => (\n  dispatch({ type: Actions.FETCHING_COURSE_LIST })\n);\n\nexport const fetchCourseListFailed = () => dispatch => (\n  dispatch({ type: Actions.FAILED_COURSE_LIST })\n);\n\nexport const updateSelectedCourse = courseId => dispatch => (\n  dispatch({ type: Actions.UPDATE_SELECTED_COURSE, courseId })\n);\n\nexport const updatePreferenceValue = (appId, preferenceName, notificationChannel, value) => dispatch => (\n  dispatch({\n    type: Actions.UPDATE_PREFERENCE,\n    appId,\n    preferenceName,\n    notificationChannel,\n    value,\n  })\n);\n\nexport const updateAppToggle = (courseId, appId, value) => dispatch => (\n  dispatch({\n    type: Actions.UPDATE_APP_PREFERENCE,\n    courseId,\n    appId,\n    value,\n  })\n);\n","import { getConfig, snakeCaseObject } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport snakeCase from 'lodash.snakecase';\n\nexport const getCourseNotificationPreferences = async (courseId) => {\n  const url = `${getConfig().LMS_BASE_URL}/api/notifications/configurations/${courseId}`;\n  const { data } = await getAuthenticatedHttpClient().get(url);\n  return data;\n};\n\nexport const getCourseList = async (page, pageSize) => {\n  const params = snakeCaseObject({ page, pageSize });\n  const url = `${getConfig().LMS_BASE_URL}/api/notifications/enrollments/`;\n  const { data } = await getAuthenticatedHttpClient().get(url, { params });\n  return data;\n};\n\nexport const patchAppPreferenceToggle = async (courseId, appId, value) => {\n  const patchData = snakeCaseObject({\n    notificationApp: appId,\n    value,\n  });\n  const url = `${getConfig().LMS_BASE_URL}/api/notifications/configurations/${courseId}`;\n  const { data } = await getAuthenticatedHttpClient().patch(url, patchData);\n  return data;\n};\n\nexport const patchPreferenceToggle = async (\n  courseId,\n  notificationApp,\n  notificationType,\n  notificationChannel,\n  value,\n) => {\n  const patchData = snakeCaseObject({\n    notificationApp,\n    notificationType: snakeCase(notificationType),\n    notificationChannel,\n    value,\n  });\n  const url = `${getConfig().LMS_BASE_URL}/api/notifications/configurations/${courseId}`;\n  const { data } = await getAuthenticatedHttpClient().patch(url, patchData);\n  return data;\n};\n","import { camelCaseObject } from '@edx/frontend-platform';\nimport {\n  fetchCourseListSuccess,\n  fetchCourseListFetching,\n  fetchCourseListFailed,\n  fetchNotificationPreferenceFailed,\n  fetchNotificationPreferenceFetching,\n  fetchNotificationPreferenceSuccess,\n  updateAppToggle,\n  updatePreferenceValue,\n  updateSelectedCourse,\n} from './actions';\nimport {\n  getCourseList,\n  getCourseNotificationPreferences,\n  patchAppPreferenceToggle,\n  patchPreferenceToggle,\n} from './service';\n\nconst normalizeCourses = (responseData) => {\n  const courseList = responseData.results?.map((enrollment) => ({\n    id: enrollment.course.id,\n    name: enrollment.course.displayName,\n  })) || [];\n\n  const pagination = {\n    count: responseData.count,\n    currentPage: responseData.currentPage,\n    hasMore: Boolean(responseData.next),\n    totalPages: responseData.numPages,\n  };\n\n  return {\n    courseList,\n    pagination,\n    showPreferences: responseData.showPreferences,\n  };\n};\n\nconst normalizePreferences = (responseData) => {\n  const preferences = responseData.notificationPreferenceConfig;\n\n  const appKeys = Object.keys(preferences);\n  const apps = appKeys.map((appId) => ({\n    id: appId,\n    enabled: preferences[appId].enabled,\n  }));\n\n  const nonEditable = {};\n  const preferenceList = appKeys.map(appId => {\n    const preferencesKeys = Object.keys(preferences[appId].notificationTypes);\n    const flatPreferences = preferencesKeys.map(preferenceId => (\n      {\n        id: preferenceId,\n        appId,\n        web: preferences[appId].notificationTypes[preferenceId].web,\n        push: preferences[appId].notificationTypes[preferenceId].push,\n        email: preferences[appId].notificationTypes[preferenceId].email,\n        info: preferences[appId].notificationTypes[preferenceId].info || '',\n      }\n    ));\n    nonEditable[appId] = preferences[appId].nonEditable;\n\n    return flatPreferences;\n  }).flat();\n\n  const normalizedPreferences = {\n    apps,\n    preferences: preferenceList,\n    nonEditable,\n  };\n  return normalizedPreferences;\n};\n\nexport const fetchCourseList = (page, pageSize) => (\n  async (dispatch) => {\n    try {\n      dispatch(fetchCourseListFetching());\n      const data = await getCourseList(page, pageSize);\n      const normalizedData = normalizeCourses(camelCaseObject(data));\n      dispatch(fetchCourseListSuccess(normalizedData));\n    } catch (errors) {\n      dispatch(fetchCourseListFailed());\n    }\n  }\n);\n\nexport const fetchCourseNotificationPreferences = (courseId) => (\n  async (dispatch) => {\n    try {\n      dispatch(updateSelectedCourse(courseId));\n      dispatch(fetchNotificationPreferenceFetching());\n      const data = await getCourseNotificationPreferences(courseId);\n      const normalizedData = normalizePreferences(camelCaseObject(data));\n      dispatch(fetchNotificationPreferenceSuccess(courseId, normalizedData));\n    } catch (errors) {\n      dispatch(fetchNotificationPreferenceFailed());\n    }\n  }\n);\n\nexport const updateAppPreferenceToggle = (courseId, appId, value) => (\n  async (dispatch) => {\n    try {\n      dispatch(updateAppToggle(courseId, appId, value));\n      const data = await patchAppPreferenceToggle(courseId, appId, value);\n      const normalizedData = normalizePreferences(camelCaseObject(data));\n      dispatch(fetchNotificationPreferenceSuccess(courseId, normalizedData));\n    } catch (errors) {\n      dispatch(updateAppToggle(courseId, appId, !value));\n      dispatch(fetchNotificationPreferenceFailed());\n    }\n  }\n);\n\nexport const updatePreferenceToggle = (\n  courseId,\n  notificationApp,\n  notificationType,\n  notificationChannel,\n  value,\n) => (\n  async (dispatch) => {\n    try {\n      dispatch(updatePreferenceValue(\n        notificationApp,\n        notificationType,\n        notificationChannel,\n        value,\n      ));\n      const data = await patchPreferenceToggle(\n        courseId,\n        notificationApp,\n        notificationType,\n        notificationChannel,\n        value,\n      );\n      const normalizedData = normalizePreferences(camelCaseObject(data));\n      dispatch(fetchNotificationPreferenceSuccess(courseId, normalizedData));\n    } catch (errors) {\n      dispatch(updatePreferenceValue(\n        notificationApp,\n        notificationType,\n        notificationChannel,\n        !value,\n      ));\n      dispatch(fetchNotificationPreferenceFailed());\n    }\n  }\n);\n","import { AppContext } from '@edx/frontend-platform/react';\nimport { getConfig, history, getQueryParameters } from '@edx/frontend-platform';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport memoize from 'memoize-one';\nimport findIndex from 'lodash.findindex';\nimport { sendTrackingLogEvent } from '@edx/frontend-platform/analytics';\nimport {\n  injectIntl,\n  intlShape,\n  FormattedMessage,\n  getCountryList,\n  getLanguageList,\n} from '@edx/frontend-platform/i18n';\nimport {\n  Button, Hyperlink, Icon, Alert,\n} from '@edx/paragon';\nimport { CheckCircle, Error, WarningFilled } from '@edx/paragon/icons';\n\nimport messages from './AccountSettingsPage.messages';\nimport {\n  fetchSettings,\n  saveMultipleSettings,\n  saveSettings,\n  updateDraft,\n  beginNameChange,\n} from './data/actions';\nimport { accountSettingsPageSelector } from './data/selectors';\nimport PageLoading from './PageLoading';\nimport JumpNav from './JumpNav';\nimport DeleteAccount from './delete-account';\nimport EditableField from './EditableField';\nimport EditableSelectField from './EditableSelectField';\nimport ResetPassword from './reset-password';\nimport NameChange from './name-change';\nimport ThirdPartyAuth from './third-party-auth';\nimport BetaLanguageBanner from './BetaLanguageBanner';\nimport EmailField from './EmailField';\nimport OneTimeDismissibleAlert from './OneTimeDismissibleAlert';\nimport DOBModal from './DOBForm';\nimport {\n  YEAR_OF_BIRTH_OPTIONS,\n  EDUCATION_LEVELS,\n  GENDER_OPTIONS,\n  COUNTRY_WITH_STATES,\n  COPPA_COMPLIANCE_YEAR,\n  getStatesList,\n} from './data/constants';\nimport { fetchSiteLanguages } from './site-language';\nimport CoachingToggle from './coaching/CoachingToggle';\nimport DemographicsSection from './demographics/DemographicsSection';\nimport { fetchCourseList } from '../notification-preferences/data/thunks';\n\nclass AccountSettingsPage extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    // If there is a \"duplicate_provider\" query parameter, that's the backend's\n    // way of telling us that the provider account the user tried to link is already linked\n    // to another user account on the platform. We use this to display a message to that effect,\n    // and remove the parameter from the URL.\n    const duplicateTpaProvider = getQueryParameters().duplicate_provider;\n    if (duplicateTpaProvider !== undefined) {\n      history.replace(history.location.pathname);\n    }\n    this.state = {\n      duplicateTpaProvider,\n    };\n\n    this.navLinkRefs = {\n      '#basic-information': React.createRef(),\n      '#profile-information': React.createRef(),\n      '#demographics-information': React.createRef(),\n      '#social-media': React.createRef(),\n      '#site-preferences': React.createRef(),\n      '#linked-accounts': React.createRef(),\n      '#delete-account': React.createRef(),\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchCourseList();\n    this.props.fetchSettings();\n    this.props.fetchSiteLanguages();\n    sendTrackingLogEvent('edx.user.settings.viewed', {\n      page: 'account',\n      visibility: null,\n      user_id: this.context.authenticatedUser.userId,\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.loading && !prevProps.loaded && this.props.loaded) {\n      const locationHash = global.location.hash;\n      // Check for the locationHash in the URL and then scroll to it if it is in the\n      // NavLinks list\n      if (typeof locationHash !== 'string') {\n        return;\n      }\n      if (Object.keys(this.navLinkRefs).includes(locationHash) && this.navLinkRefs[locationHash].current) {\n        window.scrollTo(0, this.navLinkRefs[locationHash].current.offsetTop);\n      }\n    }\n  }\n\n  // NOTE: We need 'locale' for the memoization in getLocalizedTimeZoneOptions.  Don't remove it!\n  // eslint-disable-next-line no-unused-vars\n  getLocalizedTimeZoneOptions = memoize((timeZoneOptions, countryTimeZoneOptions, locale) => {\n    const concatTimeZoneOptions = [{\n      label: this.props.intl.formatMessage(messages['account.settings.field.time.zone.default']),\n      value: '',\n    }];\n    if (countryTimeZoneOptions.length) {\n      concatTimeZoneOptions.push({\n        label: this.props.intl.formatMessage(messages['account.settings.field.time.zone.country']),\n        group: countryTimeZoneOptions,\n      });\n    }\n    concatTimeZoneOptions.push({\n      label: this.props.intl.formatMessage(messages['account.settings.field.time.zone.all']),\n      group: timeZoneOptions,\n    });\n    return concatTimeZoneOptions;\n  });\n\n  getLocalizedOptions = memoize((locale, country) => ({\n    countryOptions: [{\n      value: '',\n      label: this.props.intl.formatMessage(messages['account.settings.field.country.options.empty']),\n    }].concat(getCountryList(locale).map(({ code, name }) => ({ value: code, label: name }))),\n    stateOptions: [{\n      value: '',\n      label: this.props.intl.formatMessage(messages['account.settings.field.state.options.empty']),\n    }].concat(getStatesList(country)),\n    languageProficiencyOptions: [{\n      value: '',\n      label: this.props.intl.formatMessage(messages['account.settings.field.language_proficiencies.options.empty']),\n    }].concat(getLanguageList(locale).map(({ code, name }) => ({ value: code, label: name }))),\n    yearOfBirthOptions: [{\n      value: '',\n      label: this.props.intl.formatMessage(messages['account.settings.field.year_of_birth.options.empty']),\n    }].concat(YEAR_OF_BIRTH_OPTIONS),\n    educationLevelOptions: EDUCATION_LEVELS.map(key => ({\n      value: key,\n      label: this.props.intl.formatMessage(messages[`account.settings.field.education.levels.${key || 'empty'}`]),\n    })),\n    genderOptions: GENDER_OPTIONS.map(key => ({\n      value: key,\n      label: this.props.intl.formatMessage(messages[`account.settings.field.gender.options.${key || 'empty'}`]),\n    })),\n  }));\n\n  handleEditableFieldChange = (name, value) => {\n    this.props.updateDraft(name, value);\n  };\n\n  handleSubmit = (formId, values) => {\n    this.props.saveSettings(formId, values);\n  };\n\n  handleSubmitProfileName = (formId, values) => {\n    if (Object.keys(this.props.drafts).includes('useVerifiedNameForCerts')) {\n      this.props.saveMultipleSettings([\n        {\n          formId,\n          commitValues: values,\n        },\n        {\n          formId: 'useVerifiedNameForCerts',\n          commitValues: this.props.formValues.useVerifiedNameForCerts,\n        },\n      ], formId);\n    } else {\n      this.props.saveSettings(formId, values);\n    }\n  };\n\n  handleSubmitVerifiedName = (formId, values) => {\n    if (Object.keys(this.props.drafts).includes('useVerifiedNameForCerts')) {\n      this.props.saveSettings('useVerifiedNameForCerts', this.props.formValues.useVerifiedNameForCerts);\n    }\n    if (values !== this.props.committedValues?.verified_name) {\n      this.props.beginNameChange(formId);\n    } else {\n      this.props.saveSettings(formId, values);\n    }\n  };\n\n  isEditable(fieldName) {\n    return !this.props.staticFields.includes(fieldName);\n  }\n\n  isManagedProfile() {\n    // Enterprise customer profiles are managed by their organizations. We determine whether\n    // a profile is managed or not by the presence of the profileDataManager prop.\n    return Boolean(this.props.profileDataManager);\n  }\n\n  renderDuplicateTpaProviderMessage() {\n    if (!this.state.duplicateTpaProvider) {\n      return null;\n    }\n\n    return (\n      <div>\n        <Alert variant=\"danger\">\n          <FormattedMessage\n            id=\"account.settings.message.duplicate.tpa.provider\"\n            defaultMessage=\"The {provider} account you selected is already linked to another {siteName} account.\"\n            description=\"alert message informing the user that the third-party account they attempted to link is already linked to another account\"\n            values={{\n              provider: <b>{this.state.duplicateTpaProvider}</b>,\n              siteName: getConfig().SITE_NAME,\n            }}\n          />\n        </Alert>\n      </div>\n    );\n  }\n\n  renderManagedProfileMessage() {\n    if (!this.isManagedProfile()) {\n      return null;\n    }\n\n    return (\n      <div>\n        <Alert variant=\"info\">\n          <FormattedMessage\n            id=\"account.settings.message.managed.settings\"\n            defaultMessage=\"Your profile settings are managed by {managerTitle}. Contact your administrator or {support} for help.\"\n            description=\"alert message informing the user their account data is managed by a third party\"\n            values={{\n              managerTitle: <b>{this.props.profileDataManager}</b>,\n              support: (\n                <Hyperlink destination={getConfig().SUPPORT_URL} target=\"_blank\">\n                  <FormattedMessage\n                    id=\"account.settings.message.managed.settings.support\"\n                    defaultMessage=\"support\"\n                    description=\"website support\"\n                  />\n                </Hyperlink>\n              ),\n            }}\n          />\n        </Alert>\n      </div>\n    );\n  }\n\n  renderFullNameHelpText = (status, proctoredExamId) => {\n    if (!this.props.verifiedNameHistory) {\n      return this.props.intl.formatMessage(messages['account.settings.field.full.name.help.text']);\n    }\n\n    let messageString = 'account.settings.field.full.name.help.text';\n\n    if (status === 'submitted') {\n      messageString += '.submitted';\n      if (proctoredExamId) {\n        messageString += '.proctored';\n      }\n    } else {\n      messageString += '.default';\n    }\n\n    if (!this.props.committedValues.useVerifiedNameForCerts) {\n      messageString += '.certificate';\n    }\n\n    return this.props.intl.formatMessage(messages[messageString]);\n  };\n\n  renderVerifiedNameSuccessMessage = (verifiedName, created) => {\n    const dateValue = new Date(created).valueOf();\n    const id = `dismissedVerifiedNameSuccessMessage-${verifiedName}-${dateValue}`;\n\n    return (\n      <OneTimeDismissibleAlert\n        id={id}\n        variant=\"success\"\n        icon={CheckCircle}\n        header={this.props.intl.formatMessage(messages['account.settings.field.name.verified.success.message.header'])}\n        body={this.props.intl.formatMessage(messages['account.settings.field.name.verified.success.message'])}\n      />\n    );\n  };\n\n  renderVerifiedNameFailureMessage = (verifiedName, created) => {\n    const dateValue = new Date(created).valueOf();\n    const id = `dismissedVerifiedNameFailureMessage-${verifiedName}-${dateValue}`;\n\n    return (\n      <OneTimeDismissibleAlert\n        id={id}\n        variant=\"danger\"\n        icon={Error}\n        header={this.props.intl.formatMessage(messages['account.settings.field.name.verified.failure.message.header'])}\n        body={\n          (\n            <>\n              <div className=\"d-flex flex-row\">\n                {this.props.intl.formatMessage(messages['account.settings.field.name.verified.failure.message'])}\n              </div>\n              <div className=\"d-flex flex-row-reverse mt-3\">\n                <Button\n                  variant=\"primary\"\n                  href=\"https://support.edx.org/hc/en-us/articles/360004381594-Why-was-my-ID-verification-denied\"\n                >\n                  {this.props.intl.formatMessage(messages['account.settings.field.name.verified.failure.message.help.link'])}\n                </Button>{' '}\n              </div>\n            </>\n          )\n        }\n      />\n    );\n  };\n\n  renderVerifiedNameSubmittedMessage = (willCertNameChange) => (\n    <Alert\n      variant=\"warning\"\n      icon={WarningFilled}\n    >\n      <Alert.Heading>\n        {this.props.intl.formatMessage(messages['account.settings.field.name.verified.submitted.message.header'])}\n      </Alert.Heading>\n      <p>\n        {this.props.intl.formatMessage(messages['account.settings.field.name.verified.submitted.message'])}{' '}\n        {\n          willCertNameChange\n          && this.props.intl.formatMessage(messages['account.settings.field.name.verified.submitted.message.certificate'])\n        }\n      </p>\n    </Alert>\n  );\n\n  renderVerifiedNameMessage = verifiedNameRecord => {\n    const {\n      created,\n      status,\n      profile_name: profileName,\n      verified_name: verifiedName,\n      proctored_exam_attempt_id: proctoredExamId,\n    } = verifiedNameRecord;\n    let willCertNameChange = false;\n\n    if (\n      (\n        // User submitted a profile name change, and uses their profile name on certificates\n        this.props.committedValues.name !== profileName\n        && !this.props.committedValues.useVerifiedNameForCerts\n      )\n      || (\n        // User submitted a verified name change, and uses their verified name on certificates\n        this.props.committedValues.name === profileName\n        && this.props.committedValues.useVerifiedNameForCerts\n      )\n    ) {\n      willCertNameChange = true;\n    }\n\n    if (proctoredExamId) {\n      return null;\n    }\n\n    switch (status) {\n      case 'approved':\n        return this.renderVerifiedNameSuccessMessage(verifiedName, created);\n      case 'denied':\n        return this.renderVerifiedNameFailureMessage(verifiedName, created);\n      case 'submitted':\n        return this.renderVerifiedNameSubmittedMessage(willCertNameChange);\n      default:\n        return null;\n    }\n  };\n\n  renderVerifiedNameIcon = (status) => {\n    switch (status) {\n      case 'approved':\n        return (<Icon src={CheckCircle} className=\"ml-1\" style={{ height: '18px', width: '18px', color: 'green' }} />);\n      case 'submitted':\n        return (<Icon src={WarningFilled} className=\"ml-1\" style={{ height: '18px', width: '18px', color: 'yellow' }} />);\n      default:\n        return null;\n    }\n  };\n\n  renderVerifiedNameHelpText = (status, proctoredExamId) => {\n    let messageStr = 'account.settings.field.name.verified.help.text';\n\n    // add additional string based on status\n    if (status === 'approved') {\n      messageStr += '.verified';\n    } else if (status === 'submitted') {\n      messageStr += '.submitted';\n    } else {\n      return null;\n    }\n\n    // add additional string if verified name came from a proctored exam attempt\n    if (proctoredExamId) {\n      messageStr += '.proctored';\n    }\n\n    // add additional string based on certificate name use\n    if (this.props.committedValues.useVerifiedNameForCerts) {\n      messageStr += '.certificate';\n    }\n\n    return this.props.intl.formatMessage(messages[messageStr]);\n  };\n\n  renderEmptyStaticFieldMessage() {\n    if (this.isManagedProfile()) {\n      return this.props.intl.formatMessage(messages['account.settings.static.field.empty'], {\n        enterprise: this.props.profileDataManager,\n      });\n    }\n    return this.props.intl.formatMessage(messages['account.settings.static.field.empty.no.admin']);\n  }\n\n  renderNameChangeModal() {\n    if (this.props.nameChangeModal && this.props.nameChangeModal.formId) {\n      return <NameChange targetFormId={this.props.nameChangeModal.formId} />;\n    }\n    return null;\n  }\n\n  renderSecondaryEmailField(editableFieldProps) {\n    if (!this.props.formValues.secondary_email_enabled) {\n      return null;\n    }\n\n    return (\n      <EmailField\n        name=\"secondary_email\"\n        label={this.props.intl.formatMessage(messages['account.settings.field.secondary.email'])}\n        emptyLabel={this.props.intl.formatMessage(messages['account.settings.field.secondary.email.empty'])}\n        value={this.props.formValues.secondary_email}\n        confirmationMessageDefinition={messages['account.settings.field.secondary.email.confirmation']}\n        {...editableFieldProps}\n      />\n    );\n  }\n\n  renderDemographicsSection() {\n    // check the result of an LMS API call to determine if we should render the DemographicsSection component\n    if (this.props.formValues.shouldDisplayDemographicsSection) {\n      return (\n        <DemographicsSection forwardRef={this.navLinkRefs['#demographics-information']} />\n      );\n    }\n    return null;\n  }\n\n  renderContent() {\n    const editableFieldProps = {\n      onChange: this.handleEditableFieldChange,\n      onSubmit: this.handleSubmit,\n    };\n\n    // Memoized options lists\n    const {\n      countryOptions,\n      stateOptions,\n      languageProficiencyOptions,\n      yearOfBirthOptions,\n      educationLevelOptions,\n      genderOptions,\n    } = this.getLocalizedOptions(this.context.locale, this.props.formValues.country);\n\n    // Show State field only if the country is US (could include Canada later)\n    const showState = this.props.formValues.country === COUNTRY_WITH_STATES;\n\n    const { verifiedName } = this.props;\n\n    const timeZoneOptions = this.getLocalizedTimeZoneOptions(\n      this.props.timeZoneOptions,\n      this.props.countryTimeZoneOptions,\n      this.context.locale,\n    );\n\n    const hasLinkedTPA = findIndex(this.props.tpaProviders, provider => provider.connected) >= 0;\n\n    // if user is under 13 and does not have cookie set\n    const shouldUpdateDOB = (\n      getConfig().ENABLE_COPPA_COMPLIANCE\n      && getConfig().ENABLE_DOB_UPDATE\n      && this.props.formValues.year_of_birth.toString() >= COPPA_COMPLIANCE_YEAR.toString()\n      && !localStorage.getItem('submittedDOB')\n    );\n    return (\n      <>\n        { shouldUpdateDOB\n          && (\n          <DOBModal\n            {...editableFieldProps}\n          />\n          )}\n        <div className=\"account-section pt-3 mb-5\" id=\"basic-information\" ref={this.navLinkRefs['#basic-information']}>\n          {\n            this.props.mostRecentVerifiedName\n            && this.renderVerifiedNameMessage(this.props.mostRecentVerifiedName)\n          }\n          {localStorage.getItem('submittedDOB')\n            && (\n            <OneTimeDismissibleAlert\n              id=\"updated-dob\"\n              variant=\"success\"\n              icon={CheckCircle}\n              header={this.props.intl.formatMessage(messages['account.settings.field.dob.form.success'])}\n              body=\"\"\n            />\n            )}\n\n          <h2 className=\"section-heading h4 mb-3\">\n            {this.props.intl.formatMessage(messages['account.settings.section.account.information'])}\n          </h2>\n          <p>{this.props.intl.formatMessage(messages['account.settings.section.account.information.description'])}</p>\n          {this.renderManagedProfileMessage()}\n\n          {this.renderNameChangeModal()}\n\n          <EditableField\n            name=\"username\"\n            type=\"text\"\n            value={this.props.formValues.username}\n            label={this.props.intl.formatMessage(messages['account.settings.field.username'])}\n            helpText={this.props.intl.formatMessage(\n              messages['account.settings.field.username.help.text'],\n              { siteName: getConfig().SITE_NAME },\n            )}\n            isEditable={false}\n            {...editableFieldProps}\n          />\n          <EditableField\n            name=\"name\"\n            type=\"text\"\n            value={\n              verifiedName?.status === 'submitted'\n              && this.props.formValues.pending_name_change\n                ? this.props.formValues.pending_name_change\n                : this.props.formValues.name\n              }\n            label={this.props.intl.formatMessage(messages['account.settings.field.full.name'])}\n            emptyLabel={\n              this.isEditable('name')\n                ? this.props.intl.formatMessage(messages['account.settings.field.full.name.empty'])\n                : this.renderEmptyStaticFieldMessage()\n            }\n            helpText={\n              verifiedName\n                ? this.renderFullNameHelpText(verifiedName.status, verifiedName.proctored_exam_attempt_id)\n                : this.props.intl.formatMessage(messages['account.settings.field.full.name.help.text'])\n            }\n            isEditable={\n              verifiedName\n                ? this.isEditable('verifiedName') && this.isEditable('name')\n                : this.isEditable('name')\n            }\n            isGrayedOut={\n              verifiedName && !this.isEditable('verifiedName')\n            }\n            onChange={this.handleEditableFieldChange}\n            onSubmit={this.handleSubmitProfileName}\n          />\n          {verifiedName\n            && (\n            <EditableField\n              name=\"verified_name\"\n              type=\"text\"\n              value={this.props.formValues.verified_name}\n              label={\n                (\n                  <div className=\"d-flex\">\n                    {this.props.intl.formatMessage(messages['account.settings.field.name.verified'])}\n                    {\n                      this.renderVerifiedNameIcon(verifiedName.status)\n                    }\n                  </div>\n                )\n              }\n              helpText={this.renderVerifiedNameHelpText(verifiedName.status, verifiedName.proctored_exam_attempt_id)}\n              isEditable={this.isEditable('verifiedName')}\n              isGrayedOut={!this.isEditable('verifiedName')}\n              onChange={this.handleEditableFieldChange}\n              onSubmit={this.handleSubmitVerifiedName}\n            />\n            )}\n\n          <EmailField\n            name=\"email\"\n            label={this.props.intl.formatMessage(messages['account.settings.field.email'])}\n            emptyLabel={\n              this.isEditable('email')\n                ? this.props.intl.formatMessage(messages['account.settings.field.email.empty'])\n                : this.renderEmptyStaticFieldMessage()\n            }\n            value={this.props.formValues.email}\n            confirmationMessageDefinition={messages['account.settings.field.email.confirmation']}\n            helpText={this.props.intl.formatMessage(\n              messages['account.settings.field.email.help.text'],\n              { siteName: getConfig().SITE_NAME },\n            )}\n            isEditable={this.isEditable('email')}\n            {...editableFieldProps}\n          />\n          {this.renderSecondaryEmailField(editableFieldProps)}\n          <ResetPassword email={this.props.formValues.email} />\n          {(!getConfig().ENABLE_COPPA_COMPLIANCE)\n            && (\n            <EditableSelectField\n              name=\"year_of_birth\"\n              type=\"select\"\n              label={this.props.intl.formatMessage(messages['account.settings.field.dob'])}\n              emptyLabel={this.props.intl.formatMessage(messages['account.settings.field.dob.empty'])}\n              value={this.props.formValues.year_of_birth}\n              options={yearOfBirthOptions}\n              {...editableFieldProps}\n            />\n            )}\n          <EditableSelectField\n            name=\"country\"\n            type=\"select\"\n            value={this.props.formValues.country}\n            options={countryOptions}\n            label={this.props.intl.formatMessage(messages['account.settings.field.country'])}\n            emptyLabel={\n              this.isEditable('country')\n                ? this.props.intl.formatMessage(messages['account.settings.field.country.empty'])\n                : this.renderEmptyStaticFieldMessage()\n            }\n            isEditable={this.isEditable('country')}\n            {...editableFieldProps}\n          />\n          {showState\n            && (\n            <EditableSelectField\n              name=\"state\"\n              type=\"select\"\n              value={this.props.formValues.state}\n              options={stateOptions}\n              label={this.props.intl.formatMessage(messages['account.settings.field.state'])}\n              emptyLabel={\n                this.isEditable('state')\n                  ? this.props.intl.formatMessage(messages['account.settings.field.state.empty'])\n                  : this.renderEmptyStaticFieldMessage()\n              }\n              isEditable={this.isEditable('state')}\n              {...editableFieldProps}\n            />\n            )}\n        </div>\n\n        <div className=\"account-section pt-3 mb-5\" id=\"profile-information\" ref={this.navLinkRefs['#profile-information']}>\n          <h2 className=\"section-heading h4 mb-3\">\n            {this.props.intl.formatMessage(messages['account.settings.section.profile.information'])}\n          </h2>\n\n          <EditableSelectField\n            name=\"level_of_education\"\n            type=\"select\"\n            value={this.props.formValues.level_of_education}\n            options={getConfig().ENABLE_COPPA_COMPLIANCE\n              ? educationLevelOptions.filter(option => option.value !== 'el')\n              : educationLevelOptions}\n            label={this.props.intl.formatMessage(messages['account.settings.field.education'])}\n            emptyLabel={this.props.intl.formatMessage(messages['account.settings.field.education.empty'])}\n            {...editableFieldProps}\n          />\n          <EditableSelectField\n            name=\"gender\"\n            type=\"select\"\n            value={this.props.formValues.gender}\n            options={genderOptions}\n            label={this.props.intl.formatMessage(messages['account.settings.field.gender'])}\n            emptyLabel={this.props.intl.formatMessage(messages['account.settings.field.gender.empty'])}\n            {...editableFieldProps}\n          />\n          <EditableSelectField\n            name=\"language_proficiencies\"\n            type=\"select\"\n            value={this.props.formValues.language_proficiencies}\n            options={languageProficiencyOptions}\n            label={this.props.intl.formatMessage(messages['account.settings.field.language.proficiencies'])}\n            emptyLabel={this.props.intl.formatMessage(messages['account.settings.field.language.proficiencies.empty'])}\n            {...editableFieldProps}\n          />\n          {getConfig().COACHING_ENABLED\n            && this.props.formValues.coaching.eligible_for_coaching\n            && (\n            <CoachingToggle\n              name=\"coaching\"\n              phone_number={this.props.formValues.phone_number}\n              coaching={this.props.formValues.coaching}\n            />\n            )}\n        </div>\n        {getConfig().ENABLE_DEMOGRAPHICS_COLLECTION && this.renderDemographicsSection()}\n        <div className=\"account-section pt-3 mb-5\" id=\"social-media\">\n          <h2 className=\"section-heading h4 mb-3\">\n            {this.props.intl.formatMessage(messages['account.settings.section.social.media'])}\n          </h2>\n          <p>\n            {this.props.intl.formatMessage(\n              messages['account.settings.section.social.media.description'],\n              { siteName: getConfig().SITE_NAME },\n            )}\n          </p>\n\n          <EditableField\n            name=\"social_link_linkedin\"\n            type=\"text\"\n            value={this.props.formValues.social_link_linkedin}\n            label={this.props.intl.formatMessage(messages['account.settings.field.social.platform.name.linkedin'])}\n            emptyLabel={this.props.intl.formatMessage(messages['account.settings.field.social.platform.name.linkedin.empty'])}\n            {...editableFieldProps}\n          />\n          <EditableField\n            name=\"social_link_facebook\"\n            type=\"text\"\n            value={this.props.formValues.social_link_facebook}\n            label={this.props.intl.formatMessage(messages['account.settings.field.social.platform.name.facebook'])}\n            emptyLabel={this.props.intl.formatMessage(messages['account.settings.field.social.platform.name.facebook.empty'])}\n            {...editableFieldProps}\n          />\n          <EditableField\n            name=\"social_link_twitter\"\n            type=\"text\"\n            value={this.props.formValues.social_link_twitter}\n            label={this.props.intl.formatMessage(messages['account.settings.field.social.platform.name.twitter'])}\n            emptyLabel={this.props.intl.formatMessage(messages['account.settings.field.social.platform.name.twitter.empty'])}\n            {...editableFieldProps}\n          />\n        </div>\n\n        <div className=\"account-section pt-3 mb-5\" id=\"site-preferences\" ref={this.navLinkRefs['#site-preferences']}>\n          <h2 className=\"section-heading h4 mb-3\">\n            {this.props.intl.formatMessage(messages['account.settings.section.site.preferences'])}\n          </h2>\n\n          <BetaLanguageBanner />\n          <EditableSelectField\n            name=\"siteLanguage\"\n            type=\"select\"\n            options={this.props.siteLanguageOptions}\n            value={this.props.siteLanguage.draft !== undefined ? this.props.siteLanguage.draft : this.context.locale}\n            label={this.props.intl.formatMessage(messages['account.settings.field.site.language'])}\n            helpText={this.props.intl.formatMessage(messages['account.settings.field.site.language.help.text'])}\n            {...editableFieldProps}\n          />\n          <EditableSelectField\n            name=\"time_zone\"\n            type=\"select\"\n            value={this.props.formValues.time_zone}\n            options={timeZoneOptions}\n            label={this.props.intl.formatMessage(messages['account.settings.field.time.zone'])}\n            emptyLabel={this.props.intl.formatMessage(messages['account.settings.field.time.zone.empty'])}\n            helpText={this.props.intl.formatMessage(messages['account.settings.field.time.zone.description'])}\n            {...editableFieldProps}\n            onSubmit={(formId, value) => {\n              // the endpoint will not accept an empty string. it must be null\n              this.handleSubmit(formId, value || null);\n            }}\n          />\n        </div>\n\n        <div className=\"account-section pt-3 mb-5\" id=\"linked-accounts\" ref={this.navLinkRefs['#linked-accounts']}>\n          <h2 className=\"section-heading h4 mb-3\">{this.props.intl.formatMessage(messages['account.settings.section.linked.accounts'])}</h2>\n          <p>\n            {this.props.intl.formatMessage(\n              messages['account.settings.section.linked.accounts.description'],\n              { siteName: getConfig().SITE_NAME },\n            )}\n          </p>\n          <ThirdPartyAuth />\n        </div>\n\n        <div className=\"account-section pt-3 mb-5\" id=\"delete-account\" ref={this.navLinkRefs['#delete-account']}>\n          <DeleteAccount\n            isVerifiedAccount={this.props.isActive}\n            hasLinkedTPA={hasLinkedTPA}\n          />\n        </div>\n\n      </>\n    );\n  }\n\n  renderError() {\n    return (\n      <div>\n        {this.props.intl.formatMessage(messages['account.settings.loading.error'], {\n          error: this.props.loadingError,\n        })}\n      </div>\n    );\n  }\n\n  renderLoading() {\n    return (\n      <PageLoading srMessage={this.props.intl.formatMessage(messages['account.settings.loading.message'])} />\n    );\n  }\n\n  render() {\n    const {\n      loading,\n      loaded,\n      loadingError,\n    } = this.props;\n\n    return (\n      <div className=\"page__account-settings container-fluid py-5\">\n        {this.renderDuplicateTpaProviderMessage()}\n        <h1 className=\"mb-4\">\n          {this.props.intl.formatMessage(messages['account.settings.page.heading'])}\n        </h1>\n        <div>\n          <div className=\"row\">\n            <div className=\"col-md-2\">\n              <JumpNav\n                displayDemographicsLink={this.props.formValues.shouldDisplayDemographicsSection}\n              />\n            </div>\n            <div className=\"col-md-10\">\n              {loading ? this.renderLoading() : null}\n              {loaded ? this.renderContent() : null}\n              {loadingError ? this.renderError() : null}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nAccountSettingsPage.contextType = AppContext;\n\nAccountSettingsPage.propTypes = {\n  intl: intlShape.isRequired,\n  loading: PropTypes.bool,\n  loaded: PropTypes.bool,\n  loadingError: PropTypes.string,\n\n  // Form data\n  formValues: PropTypes.shape({\n    username: PropTypes.string,\n    name: PropTypes.string,\n    email: PropTypes.string,\n    secondary_email: PropTypes.string,\n    secondary_email_enabled: PropTypes.bool,\n    year_of_birth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    country: PropTypes.string,\n    level_of_education: PropTypes.string,\n    gender: PropTypes.string,\n    language_proficiencies: PropTypes.string,\n    pending_name_change: PropTypes.string,\n    phone_number: PropTypes.string,\n    social_link_linkedin: PropTypes.string,\n    social_link_facebook: PropTypes.string,\n    social_link_twitter: PropTypes.string,\n    time_zone: PropTypes.string,\n    coaching: PropTypes.shape({\n      coaching_consent: PropTypes.bool.isRequired,\n      user: PropTypes.number.isRequired,\n      eligible_for_coaching: PropTypes.bool.isRequired,\n    }),\n    state: PropTypes.string,\n    shouldDisplayDemographicsSection: PropTypes.bool,\n    useVerifiedNameForCerts: PropTypes.bool.isRequired,\n    verified_name: PropTypes.string,\n  }).isRequired,\n  committedValues: PropTypes.shape({\n    name: PropTypes.string,\n    useVerifiedNameForCerts: PropTypes.bool,\n    verified_name: PropTypes.string,\n  }),\n  drafts: PropTypes.shape({}),\n  formErrors: PropTypes.shape({\n    name: PropTypes.string,\n  }),\n  siteLanguage: PropTypes.shape({\n    previousValue: PropTypes.string,\n    draft: PropTypes.string,\n  }),\n  siteLanguageOptions: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  })),\n  profileDataManager: PropTypes.string,\n  staticFields: PropTypes.arrayOf(PropTypes.string),\n  isActive: PropTypes.bool,\n  secondary_email_enabled: PropTypes.bool,\n\n  timeZoneOptions: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  })),\n  countryTimeZoneOptions: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  })),\n  fetchSiteLanguages: PropTypes.func.isRequired,\n  updateDraft: PropTypes.func.isRequired,\n  saveMultipleSettings: PropTypes.func.isRequired,\n  saveSettings: PropTypes.func.isRequired,\n  fetchSettings: PropTypes.func.isRequired,\n  beginNameChange: PropTypes.func.isRequired,\n  fetchCourseList: PropTypes.func.isRequired,\n  tpaProviders: PropTypes.arrayOf(PropTypes.shape({\n    connected: PropTypes.bool,\n  })),\n  nameChangeModal: PropTypes.shape({\n    formId: PropTypes.string,\n  }),\n  verifiedName: PropTypes.shape({\n    verified_name: PropTypes.string,\n    status: PropTypes.string,\n    proctored_exam_attempt_id: PropTypes.number,\n  }),\n  mostRecentVerifiedName: PropTypes.shape({\n    verified_name: PropTypes.string,\n    status: PropTypes.string,\n    proctored_exam_attempt_id: PropTypes.number,\n  }),\n  verifiedNameHistory: PropTypes.arrayOf(\n    PropTypes.shape({\n      verified_name: PropTypes.string,\n      status: PropTypes.string,\n      proctored_exam_attempt_id: PropTypes.number,\n    }),\n  ),\n};\n\nAccountSettingsPage.defaultProps = {\n  loading: false,\n  loaded: false,\n  loadingError: null,\n  committedValues: {\n    useVerifiedNameForCerts: false,\n    verified_name: null,\n  },\n  drafts: {},\n  formErrors: {},\n  siteLanguage: null,\n  siteLanguageOptions: [],\n  timeZoneOptions: [],\n  countryTimeZoneOptions: [],\n  profileDataManager: null,\n  staticFields: [],\n  tpaProviders: [],\n  isActive: true,\n  secondary_email_enabled: false,\n  nameChangeModal: {},\n  verifiedName: null,\n  mostRecentVerifiedName: {},\n  verifiedNameHistory: [],\n};\n\nexport default connect(accountSettingsPageSelector, {\n  fetchCourseList,\n  fetchSettings,\n  saveSettings,\n  saveMultipleSettings,\n  updateDraft,\n  fetchSiteLanguages,\n  beginNameChange,\n})(injectIntl(AccountSettingsPage));\n","import {\n  FETCH_SETTINGS,\n  OPEN_FORM,\n  CLOSE_FORM,\n  SAVE_SETTINGS,\n  FETCH_TIME_ZONES,\n  SAVE_PREVIOUS_SITE_LANGUAGE,\n  UPDATE_DRAFT,\n  RESET_DRAFTS,\n  SAVE_MULTIPLE_SETTINGS,\n  BEGIN_NAME_CHANGE,\n} from './actions';\n\nimport { reducer as deleteAccountReducer, DELETE_ACCOUNT } from '../delete-account';\nimport { reducer as siteLanguageReducer, FETCH_SITE_LANGUAGES } from '../site-language';\nimport { reducer as resetPasswordReducer, RESET_PASSWORD } from '../reset-password';\nimport { reducer as nameChangeReducer, REQUEST_NAME_CHANGE } from '../name-change';\nimport { reducer as thirdPartyAuthReducer, DISCONNECT_AUTH } from '../third-party-auth';\n\nexport const defaultState = {\n  loading: false,\n  loaded: false,\n  loadingError: null,\n  data: null,\n  values: {},\n  errors: {},\n  confirmationValues: {},\n  drafts: {},\n  saveState: null,\n  timeZones: [],\n  countryTimeZones: [],\n  previousSiteLanguage: null,\n  deleteAccount: deleteAccountReducer(),\n  siteLanguage: siteLanguageReducer(),\n  resetPassword: resetPasswordReducer(),\n  nameChange: nameChangeReducer(),\n  thirdPartyAuth: thirdPartyAuthReducer(),\n  nameChangeModal: false,\n  verifiedName: null,\n  mostRecentVerifiedName: {},\n  verifiedNameHistory: {},\n};\n\nconst reducer = (state = defaultState, action = {}) => {\n  let dispatcherIsOpenForm;\n\n  switch (action.type) {\n    case FETCH_SETTINGS.BEGIN:\n      return {\n        ...state,\n        loading: true,\n        loaded: false,\n        loadingError: null,\n      };\n    case FETCH_SETTINGS.SUCCESS:\n      return {\n        ...state,\n        values: { ...state.values, ...action.payload.values },\n        // Dump the providers into thirdPartyAuth.\n        thirdPartyAuth: { ...state.thirdPartyAuth, providers: action.payload.thirdPartyAuthProviders },\n        profileDataManager: action.payload.profileDataManager,\n        timeZones: action.payload.timeZones,\n        loading: false,\n        loaded: true,\n        loadingError: null,\n        verifiedNameHistory: action.payload.verifiedNameHistory,\n      };\n    case FETCH_SETTINGS.FAILURE:\n      return {\n        ...state,\n        loading: false,\n        loaded: false,\n        loadingError: action.payload.error,\n      };\n    case FETCH_SETTINGS.RESET:\n      return {\n        ...state,\n        loading: false,\n        loaded: false,\n        loadingError: null,\n      };\n\n    case OPEN_FORM:\n      return {\n        ...state,\n        openFormId: action.payload.formId,\n        saveState: null,\n        errors: {},\n        drafts: {},\n      };\n    case CLOSE_FORM:\n      dispatcherIsOpenForm = action.payload.formId === state.openFormId;\n      if (dispatcherIsOpenForm) {\n        return {\n          ...state,\n          openFormId: null,\n          saveState: null,\n          errors: {},\n          drafts: {},\n          nameChangeModal: false,\n        };\n      }\n      return state;\n    case UPDATE_DRAFT:\n      return {\n        ...state,\n        drafts: { ...state.drafts, [action.payload.name]: action.payload.value },\n        saveState: null,\n        errors: {},\n      };\n\n    case RESET_DRAFTS:\n      return {\n        ...state,\n        drafts: {},\n      };\n\n    case BEGIN_NAME_CHANGE:\n      return {\n        ...state,\n        saveState: 'error',\n        nameChangeModal: {\n          formId: action.payload.formId,\n        },\n      };\n\n    case SAVE_SETTINGS.BEGIN:\n      return {\n        ...state,\n        saveState: 'pending',\n        errors: {},\n      };\n    case SAVE_SETTINGS.SUCCESS:\n      return {\n        ...state,\n        saveState: 'complete',\n        values: { ...state.values, ...action.payload.values },\n        errors: {},\n        confirmationValues: {\n          ...state.confirmationValues,\n          ...action.payload.confirmationValues,\n        },\n      };\n    case SAVE_SETTINGS.FAILURE:\n      return {\n        ...state,\n        saveState: 'error',\n        errors: { ...state.errors, ...action.payload.errors },\n      };\n    case SAVE_SETTINGS.RESET:\n      return {\n        ...state,\n        saveState: null,\n        errors: {},\n      };\n    case SAVE_PREVIOUS_SITE_LANGUAGE:\n      return {\n        ...state,\n        previousSiteLanguage: action.payload.previousSiteLanguage,\n      };\n    case SAVE_MULTIPLE_SETTINGS.BEGIN:\n      return {\n        ...state,\n        saveState: 'pending',\n      };\n\n    case SAVE_MULTIPLE_SETTINGS.SUCCESS:\n      return {\n        ...state,\n        saveState: 'complete',\n      };\n\n    case SAVE_MULTIPLE_SETTINGS.FAILURE:\n      return {\n        ...state,\n        saveState: 'error',\n        errors: { ...state.errors, ...action.payload.errors },\n      };\n\n    case FETCH_TIME_ZONES.SUCCESS:\n      return {\n        ...state,\n        countryTimeZones: action.payload.timeZones,\n      };\n\n      // TODO: Once all the above cases have been converted into sub-reducers, we can use\n      // combineReducers in this file to greatly simplify it.\n\n    // Delete My Account\n    case DELETE_ACCOUNT.CONFIRMATION:\n    case DELETE_ACCOUNT.BEGIN:\n    case DELETE_ACCOUNT.SUCCESS:\n    case DELETE_ACCOUNT.FAILURE:\n    case DELETE_ACCOUNT.RESET:\n    case DELETE_ACCOUNT.CANCEL:\n      return {\n        ...state,\n        deleteAccount: deleteAccountReducer(state.deleteAccount, action),\n      };\n\n    case FETCH_SITE_LANGUAGES.BEGIN:\n    case FETCH_SITE_LANGUAGES.SUCCESS:\n    case FETCH_SITE_LANGUAGES.FAILURE:\n    case FETCH_SITE_LANGUAGES.RESET:\n      return {\n        ...state,\n        siteLanguage: siteLanguageReducer(state.siteLanguage, action),\n      };\n\n    case RESET_PASSWORD.BEGIN:\n    case RESET_PASSWORD.SUCCESS:\n    case RESET_PASSWORD.FORBIDDEN:\n      return {\n        ...state,\n        resetPassword: resetPasswordReducer(state.resetPassword, action),\n      };\n\n    case REQUEST_NAME_CHANGE.BEGIN:\n    case REQUEST_NAME_CHANGE.SUCCESS:\n    case REQUEST_NAME_CHANGE.FAILURE:\n    case REQUEST_NAME_CHANGE.RESET:\n      return {\n        ...state,\n        nameChange: nameChangeReducer(state.nameChange, action),\n      };\n\n    case DISCONNECT_AUTH.BEGIN:\n    case DISCONNECT_AUTH.SUCCESS:\n    case DISCONNECT_AUTH.FAILURE:\n    case DISCONNECT_AUTH.RESET:\n      return {\n        ...state,\n        thirdPartyAuth: thirdPartyAuthReducer(state.thirdPartyAuth, action),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import {\n  call, put, delay, takeEvery, all,\n} from 'redux-saga/effects';\n\nimport { publish } from '@edx/frontend-platform';\nimport { getLocale, handleRtl, LOCALE_CHANGED } from '@edx/frontend-platform/i18n';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\n\n// Actions\nimport {\n  FETCH_SETTINGS,\n  fetchSettingsBegin,\n  fetchSettingsSuccess,\n  fetchSettingsFailure,\n  closeForm,\n  SAVE_SETTINGS,\n  SAVE_MULTIPLE_SETTINGS,\n  saveSettingsBegin,\n  saveSettingsSuccess,\n  saveSettingsFailure,\n  savePreviousSiteLanguage,\n  FETCH_TIME_ZONES,\n  fetchTimeZones,\n  fetchTimeZonesSuccess,\n  saveMultipleSettingsBegin,\n  saveMultipleSettingsSuccess,\n  saveMultipleSettingsFailure,\n  beginNameChange,\n} from './actions';\n\n// Sub-modules\nimport { saga as deleteAccountSaga } from '../delete-account';\nimport { saga as resetPasswordSaga } from '../reset-password';\nimport { saga as nameChangeSaga } from '../name-change';\nimport {\n  saga as siteLanguageSaga,\n  patchPreferences,\n  postSetLang,\n} from '../site-language';\nimport { saga as thirdPartyAuthSaga } from '../third-party-auth';\n\n// Services\nimport {\n  getSettings,\n  patchSettings,\n  getTimeZones,\n  getVerifiedNameHistory,\n} from './service';\n\nexport function* handleFetchSettings() {\n  try {\n    yield put(fetchSettingsBegin());\n    const { username, userId, roles: userRoles } = getAuthenticatedUser();\n\n    const {\n      thirdPartyAuthProviders, profileDataManager, timeZones, ...values\n    } = yield call(\n      getSettings,\n      username,\n      userRoles,\n      userId,\n    );\n\n    const verifiedNameHistory = yield call(getVerifiedNameHistory);\n\n    if (values.country) { yield put(fetchTimeZones(values.country)); }\n\n    yield put(fetchSettingsSuccess({\n      values,\n      thirdPartyAuthProviders,\n      profileDataManager,\n      timeZones,\n      verifiedNameHistory,\n    }));\n  } catch (e) {\n    yield put(fetchSettingsFailure(e.message));\n    throw e;\n  }\n}\n\nexport function* handleSaveSettings(action) {\n  try {\n    yield put(saveSettingsBegin());\n\n    const { username, userId } = getAuthenticatedUser();\n    const { commitValues, formId } = action.payload;\n    const commitData = { [formId]: commitValues };\n    let savedValues = null;\n    if (formId === 'siteLanguage') {\n      const previousSiteLanguage = getLocale();\n      // The following two requests need to be done sequentially, with patching preferences before\n      // the post to setlang.  They used to be done in parallel, but this might create ambiguous\n      // behavior.\n      yield call(patchPreferences, username, { prefLang: commitValues });\n      yield call(postSetLang, commitValues);\n\n      yield put(savePreviousSiteLanguage(previousSiteLanguage));\n\n      publish(LOCALE_CHANGED, getLocale());\n      handleRtl();\n      savedValues = commitData;\n    } else {\n      savedValues = yield call(patchSettings, username, commitData, userId);\n    }\n    yield put(saveSettingsSuccess(savedValues, commitData));\n    if (savedValues.country) { yield put(fetchTimeZones(savedValues.country)); }\n    yield delay(1000);\n    yield put(closeForm(action.payload.formId));\n  } catch (e) {\n    if (e.fieldErrors) {\n      if (e.fieldErrors.name?.includes('verification')) {\n        yield put(beginNameChange('name'));\n      }\n      yield put(saveSettingsFailure({ fieldErrors: e.fieldErrors }));\n    } else {\n      yield put(saveSettingsFailure(e.message));\n      throw e;\n    }\n  }\n}\n\n// handles mutiple settings saved at once, in order, and stops executing on first failure.\nexport function* handleSaveMultipleSettings(action) {\n  try {\n    yield put(saveMultipleSettingsBegin());\n    const { username, userId } = getAuthenticatedUser();\n    const { settingsArray, form } = action.payload;\n    for (let i = 0; i < settingsArray.length; i += 1) {\n      const { formId, commitValues } = settingsArray[i];\n      yield put(saveSettingsBegin());\n      const commitData = { [formId]: commitValues };\n      const savedSettings = yield call(patchSettings, username, commitData, userId);\n      yield put(saveSettingsSuccess(savedSettings, commitData));\n    }\n    yield put(saveMultipleSettingsSuccess(action));\n    if (form) {\n      yield delay(1000);\n      yield put(closeForm(form));\n    }\n  } catch (e) {\n    if (e.fieldErrors) {\n      if (e.fieldErrors.name?.includes('verification')) {\n        yield put(beginNameChange('name'));\n      }\n      yield put(saveMultipleSettingsFailure({ fieldErrors: e.fieldErrors }));\n    } else {\n      yield put(saveMultipleSettingsFailure(e.message));\n      throw e;\n    }\n  }\n}\n\nexport function* handleFetchTimeZones(action) {\n  const response = yield call(getTimeZones, action.payload.country);\n  yield put(fetchTimeZonesSuccess(response, action.payload.country));\n}\n\nexport default function* saga() {\n  yield takeEvery(FETCH_SETTINGS.BASE, handleFetchSettings);\n  yield takeEvery(SAVE_SETTINGS.BASE, handleSaveSettings);\n  yield takeEvery(SAVE_MULTIPLE_SETTINGS.BASE, handleSaveMultipleSettings);\n  yield takeEvery(FETCH_TIME_ZONES.BASE, handleFetchTimeZones);\n  yield all([\n    deleteAccountSaga(),\n    siteLanguageSaga(),\n    resetPasswordSaga(),\n    nameChangeSaga(),\n    thirdPartyAuthSaga(),\n  ]);\n}\n","import React from 'react';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\n\nconst NotFoundPage = () => (\n  <div\n    className=\"container-fluid d-flex py-5 justify-content-center align-items-start text-center\"\n    data-testid=\"not-found-page\"\n  >\n    <p className=\"my-0 py-5 text-muted\" style={{ maxWidth: '32em' }}>\n      <FormattedMessage\n        id=\"error.notfound.message\"\n        defaultMessage=\"The page you're looking for is unavailable or there's an error in the URL. Please check the URL and try again.\"\n        description=\"Error message when a page does not exist\"\n      />\n    </p>\n  </div>\n);\n\nexport default NotFoundPage;\n","export const IDLE_STATUS = 'idle';\nexport const LOADING_STATUS = 'loading';\nexport const SUCCESS_STATUS = 'success';\nexport const FAILURE_STATUS = 'failure';\n","import { Actions } from './actions';\nimport {\n  IDLE_STATUS,\n  LOADING_STATUS,\n  SUCCESS_STATUS,\n  FAILURE_STATUS,\n} from '../../constants';\n\nexport const defaultState = {\n  showPreferences: false,\n  courses: {\n    status: IDLE_STATUS,\n    courses: [],\n    pagination: {},\n  },\n  preferences: {\n    status: IDLE_STATUS,\n    selectedCourse: null,\n    preferences: [],\n    apps: [],\n    nonEditable: {},\n  },\n};\n\nconst notificationPreferencesReducer = (state = defaultState, action = {}) => {\n  const {\n    courseId, appId, notificationChannel, preferenceName, value,\n  } = action;\n  switch (action.type) {\n    case Actions.FETCHING_COURSE_LIST:\n      return {\n        ...state,\n        courses: {\n          ...state.courses,\n          status: LOADING_STATUS,\n        },\n      };\n    case Actions.FETCHED_COURSE_LIST:\n      return {\n        ...state,\n        courses: {\n          status: SUCCESS_STATUS,\n          courses: [...state.courses.courses, ...action.payload.courseList],\n          pagination: action.payload.pagination,\n        },\n        showPreferences: action.payload.showPreferences,\n      };\n    case Actions.FAILED_COURSE_LIST:\n      return {\n        ...state,\n        courses: {\n          ...state.courses,\n          status: FAILURE_STATUS,\n        },\n      };\n    case Actions.FETCHING_PREFERENCES:\n      return {\n        ...state,\n        preferences: {\n          ...state.preferences,\n          status: LOADING_STATUS,\n          preferences: [],\n          apps: [],\n          nonEditable: {},\n        },\n      };\n    case Actions.FETCHED_PREFERENCES:\n      return {\n        ...state,\n        preferences: {\n          ...state.preferences,\n          status: SUCCESS_STATUS,\n          ...action.payload,\n        },\n      };\n    case Actions.FAILED_PREFERENCES:\n      return {\n        ...state,\n        preferences: {\n          ...state.preferences,\n          status: FAILURE_STATUS,\n          preferences: [],\n          apps: [],\n          nonEditable: {},\n        },\n      };\n    case Actions.UPDATE_SELECTED_COURSE:\n      return {\n        ...state,\n        preferences: {\n          ...state.preferences,\n          selectedCourse: courseId,\n        },\n      };\n    case Actions.UPDATE_PREFERENCE:\n      return {\n        ...state,\n        preferences: {\n          ...state.preferences,\n          preferences: state.preferences.preferences.map((preference) => (\n            preference.id === preferenceName\n              ? { ...preference, [notificationChannel]: value }\n              : preference\n          )),\n        },\n      };\n    case Actions.UPDATE_APP_PREFERENCE:\n      return {\n        ...state,\n        preferences: {\n          ...state.preferences,\n          apps: state.preferences.apps.map(app => (\n            app.id === appId\n              ? { ...app, enabled: value }\n              : app\n          )),\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport default notificationPreferencesReducer;\n","import { all } from 'redux-saga/effects';\nimport { saga as accountSettingsSaga } from '../account-settings';\n\nexport default function* rootSaga() {\n  yield all([accountSettingsSaga()]);\n}\n","import { getConfig } from '@edx/frontend-platform';\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createLogger } from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\n\nimport createRootReducer from './reducers';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nfunction composeMiddleware() {\n  if (getConfig().ENVIRONMENT === 'development') {\n    const loggerMiddleware = createLogger({\n      collapsed: true,\n    });\n    return composeWithDevTools(applyMiddleware(thunkMiddleware, sagaMiddleware, loggerMiddleware));\n  }\n\n  return compose(applyMiddleware(thunkMiddleware, sagaMiddleware));\n}\n\nexport default function configureStore(initialState = {}) {\n  const store = createStore(\n    createRootReducer(),\n    initialState,\n    composeMiddleware(),\n  );\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}\n","import { combineReducers } from 'redux';\n\nimport {\n  reducer as accountSettingsReducer,\n  storeName as accountSettingsStoreName,\n} from '../account-settings';\nimport notificationPreferencesReducer from '../notification-preferences/data/reducers';\n\nconst createRootReducer = () => combineReducers({\n  [accountSettingsStoreName]: accountSettingsReducer,\n  notificationPreferences: notificationPreferencesReducer,\n});\nexport default createRootReducer;\n","export const storeName = 'idVerifiction';\n\nexport const idVerificationSelector = state => ({ ...state[storeName] });\n","/**\n * This polyfill is from MDN:\n * https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n *\n * Their description:\n * \"Here's an example of using navigator.mediaDevices.getUserMedia(), with a\n * polyfill to cope with older browsers. Note that this polyfill does not\n * correct for legacy differences in constraints syntax, which means constraints\n * won't work well across browsers. It is recommended to use the adapter.js\n * polyfill instead, which does handle constraints.\"\n *\n * Despite the lack of support for differences in constraints we'll use this\n * since it's small and simple and we don't have a need for constraints at the\n * moment. I've added an export hasGetUserMediaSupport before the polyfill to\n * help us understand support before making calls to getUserMedia.\n */\n\n// IIFE to check getUserMedia support. Must be run before the polyfill.\nconst hasGetUserMediaSupport = (() => {\n  // Modern API\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    return true;\n  }\n  // Deprecated APIs\n  if (navigator.webkitGetUserMedia || navigator.mozGetUserMedia) {\n    return true;\n  }\n  return false;\n})();\n\n// Older browsers might not implement mediaDevices at all, so we set an empty object first\nif (navigator.mediaDevices === undefined) {\n  navigator.mediaDevices = {};\n}\n\n// Some browsers partially implement mediaDevices. We can't just assign an object\n// with getUserMedia as it would overwrite existing properties.\n// Here, we will just add the getUserMedia property if it's missing.\nif (navigator.mediaDevices.getUserMedia === undefined) {\n  // eslint-disable-next-line func-names\n  navigator.mediaDevices.getUserMedia = function (constraints) {\n    // First get ahold of the legacy getUserMedia, if present\n    const getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n    // Some browsers just don't implement it - return a rejected promise with an error\n    // to keep a consistent interface\n    if (!getUserMedia) {\n      return Promise.reject(new Error('getUserMedia is not implemented in this browser'));\n    }\n\n    // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\n    return new Promise(((resolve, reject) => {\n      getUserMedia.call(navigator, constraints, resolve, reject);\n    }));\n  };\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport { hasGetUserMediaSupport };\n","import { useEffect, useState } from 'react';\n\nimport {\n  IDLE_STATUS, LOADING_STATUS, SUCCESS_STATUS, FAILURE_STATUS,\n} from './constants';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function useAsyncCall(asyncFunc) {\n  // React doesn't batch setStates call in async useEffect hooks,\n  // so we use a combined object here to ensure that users\n  // re-render once.\n  const [data, setData] = useState({ status: IDLE_STATUS });\n\n  useEffect(\n    () => {\n      (async () => {\n        setData(currData => ({ ...currData, status: LOADING_STATUS }));\n        const response = await asyncFunc();\n\n        if (Object.keys(response).length === 0) {\n          setData(currData => ({ ...currData, status: FAILURE_STATUS, data: response }));\n        } else {\n          setData(currData => ({ ...currData, status: SUCCESS_STATUS, data: response }));\n        }\n      })();\n    },\n    [asyncFunc],\n  );\n\n  return data;\n}\n\n// Redirect the user to their original location based on session storage\nexport function useRedirect() {\n  const [redirect, setRedirect] = useState({\n    location: 'dashboard',\n    text: 'id.verification.return.dashboard',\n  });\n\n  useEffect(() => {\n    if (sessionStorage.getItem('courseId')) {\n      setRedirect({\n        location: `courses/${sessionStorage.getItem('courseId')}`,\n        text: 'id.verification.return.course',\n      });\n    } else if (sessionStorage.getItem('next')) {\n      setRedirect({\n        location: sessionStorage.getItem('next'),\n        text: 'id.verification.return.generic',\n      });\n    }\n  }, []);\n\n  return redirect;\n}\n","import qs from 'qs';\n\nimport { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\n/**\n * Get ID verification status from LMS.\n *\n * Returns {\n *  status: String,\n *  expires: String|null,\n *  canVerify: Boolean,\n * }\n */\nexport async function getExistingIdVerification() {\n  const url = `${getConfig().LMS_BASE_URL}/verify_student/status/`;\n  const requestConfig = {\n    headers: { Accept: 'application/json' },\n  };\n  try {\n    const response = await getAuthenticatedHttpClient().get(url, requestConfig);\n    return {\n      status: response.data.status || null,\n      expires: response.data.expires || null,\n      canVerify: response.data.can_verify || false,\n    };\n  } catch (e) {\n    return { status: null, expires: null, canVerify: false };\n  }\n}\n\n/**\n * Get the learner's enrollments. Used to check whether the learner is enrolled\n * in a verified course mode.\n *\n * Returns an array: [{...data, mode: String}]\n */\nexport async function getEnrollments() {\n  const url = `${getConfig().LMS_BASE_URL}/api/enrollment/v1/enrollment`;\n  const requestConfig = {\n    headers: { Accept: 'application/json' },\n  };\n  try {\n    const { data } = await getAuthenticatedHttpClient().get(url, requestConfig);\n    return data;\n  } catch (e) {\n    return {};\n  }\n}\n\n/**\n * Submit ID verifiction to LMS.\n *\n * verificationData should take the shape of:\n *   - facePhotoFile (String): Base64-encoded image.\n *   - idPhotoFile (String|null): Optional Base64-encoded image\n *   - idPhotoName (String|null): Optional string to change the user's name to.\n *   - courseRunKey (String|null): Optional course run to redirect to.\n *\n * Returns { success: Boolean, message: String|null }\n */\nexport async function submitIdVerification(verificationData) {\n  const keyMap = {\n    facePhotoFile: 'face_image',\n    idPhotoFile: 'photo_id_image',\n    idPhotoName: 'full_name',\n  };\n  const postData = {};\n  // Don't include blank/null/undefined values.\n  // Note that this will also drop the value `false`.\n  Object.keys(keyMap).forEach((jsKey) => {\n    const apiKey = keyMap[jsKey];\n    if (verificationData[jsKey]) {\n      postData[apiKey] = verificationData[jsKey];\n    }\n  });\n\n  const url = `${getConfig().LMS_BASE_URL}/verify_student/submit-photos/`;\n  const urlEncodedPostData = qs.stringify(postData);\n  const requestConfig = {\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n  };\n  try {\n    await getAuthenticatedHttpClient().post(url, urlEncodedPostData, requestConfig);\n    return { success: true, message: null };\n  } catch (e) {\n    return {\n      success: false,\n      status: e.customAttributes.httpErrorStatus,\n      message: String(e),\n    };\n  }\n}\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  'id.verification.next': {\n    id: 'id.verification.next',\n    defaultMessage: 'Next',\n    description: 'Next button.',\n  },\n  'id.verification.support': {\n    id: 'id.verification.support',\n    defaultMessage: 'support',\n    description: 'Website support.',\n  },\n  'id.verification.example.card.alt': {\n    id: 'id.verification.example.card.alt',\n    defaultMessage: 'Example of a valid identification card with a full name and photo.',\n    description: 'Alt text for an example identification card.',\n  },\n  'id.verification.requirements.title': {\n    id: 'id.verification.requirements.title',\n    defaultMessage: 'Photo Verification Requirements',\n    description: 'Title for the Photo Verification Requirements page.',\n  },\n  'id.verification.requirements.description': {\n    id: 'id.verification.requirements.description',\n    defaultMessage: 'In order to complete Photo Verification, you will need the following:',\n    description: 'Description for the Photo Verification Requirements page.',\n  },\n  'id.verification.requirements.card.device.title': {\n    id: 'id.verification.requirements.card.device.title',\n    defaultMessage: 'Device with Camera',\n    description: 'Title for the Device with Camera card.',\n  },\n  'id.verification.requirements.card.device.allow': {\n    id: 'id.verification.requirements.card.device.allow',\n    defaultMessage: 'Allow',\n    description: 'Bold text emphasizing that the user needs to click \"allow\" in order to enable the camera.',\n  },\n  'id.verification.requirements.card.id.title': {\n    id: 'id.verification.requirements.card.id.title',\n    defaultMessage: 'Photo Identification Card',\n    description: 'Title for the Photo Identification requirement card.',\n  },\n  'id.verification.requirements.card.id.text': {\n    id: 'id.verification.requirements.card.id.text',\n    defaultMessage: 'You need a valid identification card that contains your full name and photo, such as a driver’s license or passport.',\n    description: 'Text that explains that the user needs a photo ID.',\n  },\n  'id.verification.privacy.title': {\n    id: 'id.verification.privacy.title',\n    defaultMessage: 'Privacy Information',\n    description: 'Title for Privacy Information.',\n  },\n  'id.verification.privacy.need.photo.question': {\n    id: 'id.verification.privacy.need.photo.question',\n    defaultMessage: 'Why does {siteName} need my photo?',\n    description: 'Question about why the platform needs a verification photo.',\n  },\n  'id.verification.privacy.need.photo.answer': {\n    id: 'id.verification.privacy.need.photo.answer',\n    defaultMessage: 'We use your verification photos to confirm your identity and ensure the validity of your certificate.',\n    description: 'Answering why the platform needs a verification photo.',\n  },\n  'id.verification.privacy.do.with.photo.question': {\n    id: 'id.verification.privacy.do.with.photo.question',\n    defaultMessage: 'What does {siteName} do with this photo?',\n    description: 'Question about what the platform does with the verification photo.',\n  },\n  'id.verification.privacy.do.with.photo.answer': {\n    id: 'id.verification.privacy.do.with.photo.answer',\n    defaultMessage: 'We securely encrypt your photo and send it our authorization service for review. Your photo and information are not saved or visible anywhere on {siteName} after the verification process is complete.',\n    description: 'Answering what the platform does with the verification photo.',\n  },\n  'id.verification.access.blocked.title': {\n    id: 'id.verification.access.blocked.title',\n    defaultMessage: 'Identity Verification',\n    description: 'Title for text that displays when a user is blocked from ID verification.',\n  },\n  'id.verification.access.blocked.enrollment': {\n    id: 'id.verification.access.blocked.enrollment',\n    defaultMessage: 'You are not currently enrolled in a course that requires identity verification.',\n    description: 'Text that displays when user is trying to verify while not enrolled in a course that requires ID verification.',\n  },\n  'id.verification.access.blocked.pending': {\n    id: 'id.verification.access.blocked.pending',\n    defaultMessage: 'You have already submitted your verification information. You will see a message on your dashboard when the verification process is complete (usually within 5 days).',\n    description: 'Text that displays when user has a pending or approved request.',\n  },\n  'id.verification.photo.take': {\n    id: 'id.verification.photo.take',\n    defaultMessage: 'Take Photo',\n    description: 'Button to take photo.',\n  },\n  'id.verification.photo.retake': {\n    id: 'id.verification.photo.retake',\n    defaultMessage: 'Retake Photo?',\n    description: 'Button to retake photo.',\n  },\n  'id.verification.photo.enable.detection': {\n    id: 'id.verification.photo.enable.detection',\n    defaultMessage: 'Enable Face Detection',\n    description: 'Text label for the checkbox to enable face detection.',\n  },\n  'id.verification.photo.enable.detection.portrait.help.text': {\n    id: 'id.verification.photo.enable.detection.portrait.help.text',\n    defaultMessage: 'If checked, a box will appear around your face. Your face can be seen clearly if the box around it is blue. If your face is not in a good position or undetectable, the box will be red.',\n    description: 'Help text that appears for enabling face detection on the portrait photo panel.',\n  },\n  'id.verification.photo.enable.detection.id.help.text': {\n    id: 'id.verification.photo.enable.detection.id.help.text',\n    defaultMessage: 'If checked, a box will appear around the face on your ID card. The face can be seen clearly if the box around it is blue. If the face is not in a good position or undetectable, the box will be red.',\n    description: 'Help text that appears for enabling face detection on the portrait photo panel.',\n  },\n  'id.verification.photo.feedback.correct': {\n    id: 'id.verification.photo.feedback.correct',\n    defaultMessage: 'Face is in a good position.',\n    description: 'Text for screen reader when user\\'s face is in a good position.',\n  },\n  'id.verification.photo.feedback.two.faces': {\n    id: 'id.verification.photo.feedback.two.faces',\n    defaultMessage: 'More than one face detected.',\n    description: 'Text for screen reader when more than one face detected.',\n  },\n  'id.verification.photo.feedback.no.faces': {\n    id: 'id.verification.photo.feedback.no.faces',\n    defaultMessage: 'No face detected.',\n    description: 'Text for screen reader when no face detected.',\n  },\n  'id.verification.photo.feedback.top.left': {\n    id: 'id.verification.photo.feedback.top.left',\n    defaultMessage: 'Incorrect position. Top left.',\n    description: 'Text for screen reader when face is in a bad position.',\n  },\n  'id.verification.photo.feedback.top.center': {\n    id: 'id.verification.photo.feedback.top.center',\n    defaultMessage: 'Incorrect position. Top center.',\n    description: 'Text for screen reader when face is in a bad position.',\n  },\n  'id.verification.photo.feedback.top.right': {\n    id: 'id.verification.photo.feedback.top.right',\n    defaultMessage: 'Incorrect position. Top right.',\n    description: 'Text for screen reader when face is in a bad position.',\n  },\n  'id.verification.photo.feedback.center.left': {\n    id: 'id.verification.photo.feedback.center.left',\n    defaultMessage: 'Incorrect position. Center left.',\n    description: 'Text for screen reader when face is in a bad position.',\n  },\n  'id.verification.photo.feedback.center.center': {\n    id: 'id.verification.photo.feedback.center.center',\n    defaultMessage: 'Incorrect position. Too close to camera.',\n    description: 'Text for screen reader when face is in a bad position.',\n  },\n  'id.verification.photo.feedback.center.right': {\n    id: 'id.verification.photo.feedback.center.right',\n    defaultMessage: 'Incorrect position. Center right.',\n    description: 'Text for screen reader when face is in a bad position.',\n  },\n  'id.verification.photo.feedback.bottom.left': {\n    id: 'id.verification.photo.feedback.bottom.left',\n    defaultMessage: 'Incorrect position. Bottom left.',\n    description: 'Text for screen reader when face is in a bad position.',\n  },\n  'id.verification.photo.feedback.bottom.center': {\n    id: 'id.verification.photo.feedback.bottom.center',\n    defaultMessage: 'Incorrect position. Bottom center.',\n    description: 'Text for screen reader when face is in a bad position.',\n  },\n  'id.verification.photo.feedback.bottom.right': {\n    id: 'id.verification.photo.feedback.bottom.right',\n    defaultMessage: 'Incorrect position. Bottom right.',\n    description: 'Text for screen reader when face is in a bad position.',\n  },\n  'id.verification.camera.access.title': {\n    id: 'id.verification.camera.access.title',\n    defaultMessage: 'Camera Permissions',\n    description: 'Title for the Camera Access page.',\n  },\n  'id.verification.camera.access.title.success': {\n    id: 'id.verification.camera.access.title.success',\n    defaultMessage: 'Camera Access Enabled',\n    description: 'Title for the Camera Access page when camera is enabled.',\n  },\n  'id.verification.camera.access.title.failed': {\n    id: 'id.verification.camera.access.title.failed',\n    defaultMessage: 'Camera Access Failed',\n    description: 'Title for the Camera Access page when camera access is denied or unavailable.',\n  },\n  'id.verification.camera.access.click.allow': {\n    id: 'id.verification.camera.access.click.allow',\n    defaultMessage: 'Please make sure to click \"Allow\"',\n    description: 'Instruction to allow camera access.',\n  },\n  'id.verification.camera.access.enable': {\n    id: 'id.verification.camera.access.enable',\n    defaultMessage: 'Enable Camera',\n    description: 'Text to enable camera.',\n  },\n  'id.verification.camera.access.problems': {\n    id: 'id.verification.camera.access.problems',\n    defaultMessage: 'Having problems?',\n    description: 'Text for when the user is having problems enabling camera access.',\n  },\n  'id.verification.camera.access.skip': {\n    id: 'id.verification.camera.access.skip',\n    defaultMessage: 'Skip and upload image files instead',\n    description: 'Text to skip camera access and enable image uploading.',\n  },\n  'id.verification.camera.access.success': {\n    id: 'id.verification.camera.access.success',\n    defaultMessage: 'Looks like your camera is working and ready.',\n    description: 'Text to confirm that camera is working.',\n  },\n  'id.verification.camera.access.failure': {\n    id: 'id.verification.camera.access.failure',\n    defaultMessage: 'It looks like we\\'re unable to access your camera. You will need to upload image files of you and your photo id.',\n    description: 'Text indicating that the camera could not be accessed and image upload will be enabled.',\n  },\n  'id.verification.camera.access.failure.temporary': {\n    id: 'id.verification.camera.access.failure.temporary',\n    defaultMessage: 'It looks like we\\'re unable to access your camera. Please verify that your webcam is connected and that you have allowed your browser to access it.',\n    description: 'Text indicating that the camera could not be accessed.',\n  },\n  'id.verification.camera.access.failure.temporary.chrome': {\n    id: 'id.verification.camera.access.failure.temporary.chrome',\n    defaultMessage: 'To enable camera access in Chrome:',\n    description: 'Description for the directions on enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.chrome.step1': {\n    id: 'id.verification.camera.access.failure.temporary.chrome.step1',\n    defaultMessage: 'Open Chrome.',\n    description: 'Text for step one of enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.chrome.step2': {\n    id: 'id.verification.camera.access.failure.temporary.chrome.step2',\n    defaultMessage: 'Navigate to More > Settings.',\n    description: 'Text for step two of enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.chrome.step2.windows': {\n    id: 'id.verification.camera.access.failure.temporary.chrome.step2.windows',\n    defaultMessage: 'For Windows: Alt+F, Alt+E, or F10 followed by the spacebar',\n    description: 'Text for Windows keyboard shortcut in chrome.',\n  },\n  'id.verification.camera.access.failure.temporary.chrome.step2.mac': {\n    id: 'id.verification.camera.access.failure.temporary.chrome.step2.mac',\n    defaultMessage: 'For Mac: Command+,',\n    description: 'Text for Mac keyboard shortcut in chrome.',\n  },\n  'id.verification.camera.access.failure.temporary.chrome.step3': {\n    id: 'id.verification.camera.access.failure.temporary.chrome.step3',\n    defaultMessage: 'Under the \"Privacy and security\" tab, select \"Site Settings\" and then \"Camera.\"',\n    description: 'Text for step three of enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.chrome.step4': {\n    id: 'id.verification.camera.access.failure.temporary.chrome.step4',\n    defaultMessage: 'Under \"Blocked,\" find \"edx.org\" and select it.',\n    description: 'Text for step four of enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.chrome.step5': {\n    id: 'id.verification.camera.access.failure.temporary.chrome.step5',\n    defaultMessage: 'In the \"Permissions\" section, update the camera permissions to \"Allow.\"',\n    description: 'Text for step five of enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.ie11': {\n    id: 'id.verification.camera.access.failure.temporary.ie11',\n    defaultMessage: 'To enable camera access in Internet Explorer:',\n    description: 'Description for the directions on enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.ie11.step1': {\n    id: 'id.verification.camera.access.failure.temporary.ie11.step1',\n    defaultMessage: 'Open the Flash Player Settings Manager by navigating to Windows Settings > Control Panel > Flash Player.',\n    description: 'Text for step one of enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.ie11.step2': {\n    id: 'id.verification.camera.access.failure.temporary.ie11.step2',\n    defaultMessage: 'Select the \"Camera and Mic\" tab, and then select the \"Camera and Microphone Settings by Site\" button.',\n    description: 'Text for step two of enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.ie11.step3': {\n    id: 'id.verification.camera.access.failure.temporary.ie11.step3',\n    defaultMessage: 'Choose \"edx.org\" from the list of websites and change the permissions by selecting \"Allow\" in the dropdown menu.',\n    description: 'Text for step three of enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.firefox': {\n    id: 'id.verification.camera.access.failure.temporary.firefox',\n    defaultMessage: 'To enable camera access in Firefox:',\n    description: 'Description for the directions on enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.firefox.step1': {\n    id: 'id.verification.camera.access.failure.temporary.firefox.step1',\n    defaultMessage: 'Open Firefox.',\n    description: 'Text for step one of enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.firefox.step2': {\n    id: 'id.verification.camera.access.failure.temporary.firefox.step2',\n    defaultMessage: 'Enter \"about:preferences\" in the URL bar.',\n    description: 'Text for step two of enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.firefox.step3': {\n    id: 'id.verification.camera.access.failure.temporary.firefox.step3',\n    defaultMessage: 'Select the \"Privacy & Security\" tab, and navigate to the \"Permissions\" section.',\n    description: 'Text for step three of enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.firefox.step4': {\n    id: 'id.verification.camera.access.failure.temporary.firefox.step4',\n    defaultMessage: 'Next to \"Camera,\" select the \"Settings…\" button.',\n    description: 'Text for step four of enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.firefox.step5': {\n    id: 'id.verification.camera.access.failure.temporary.firefox.step5',\n    defaultMessage: 'In the search bar, enter \"edx.org.\"',\n    description: 'Text for step five of enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.firefox.step6': {\n    id: 'id.verification.camera.access.failure.temporary.firefox.step6',\n    defaultMessage: 'In the status column for \"edx.org,\" select \"Allow\" from the drop down.',\n    description: 'Text for step six of enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.firefox.step7': {\n    id: 'id.verification.camera.access.failure.temporary.firefox.step7',\n    defaultMessage: 'Select \"Save Changes.\"',\n    description: 'Text for step seven of enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.safari': {\n    id: 'id.verification.camera.access.failure.temporary.safari',\n    defaultMessage: 'To enable camera access in Safari:',\n    description: 'Description for the directions on enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.safari.step1': {\n    id: 'id.verification.camera.access.failure.temporary.safari.step1',\n    defaultMessage: 'Open Safari.',\n    description: 'Text for step one of enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.safari.step2': {\n    id: 'id.verification.camera.access.failure.temporary.safari.step2',\n    defaultMessage: 'Click on the Safari app menu, then select \"Preferences.\" You can also use Command+, as a keyboard shortcut.',\n    description: 'Text for step two of enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.safari.step3': {\n    id: 'id.verification.camera.access.failure.temporary.safari.step3',\n    defaultMessage: 'Select the \"Websites\" tab and then select \"Camera.\"',\n    description: 'Text for step three of enabling camera access.',\n  },\n  'id.verification.camera.access.failure.temporary.safari.step4': {\n    id: 'id.verification.camera.access.failure.temporary.safari.step4',\n    defaultMessage: 'Select \"edx.org\" and change the camera permissions to \"Allow.\"',\n    description: 'Text for step four of enabling camera access.',\n  },\n  'id.verification.camera.access.failure.unsupported': {\n    id: 'id.verification.camera.access.failure.unsupported',\n    defaultMessage: 'It looks like your browser does not support camera access.',\n    description: 'Text indicating that the user\\'s browser does not support camera access.',\n  },\n  'id.verification.camera.access.failure.unsupported.chrome.explanation': {\n    id: 'id.verification.camera.access.failure.unsupported.chrome.explanation',\n    defaultMessage: 'The Chrome browser currently does not support camera access on iOS devices, such as iPhones and iPads.',\n    description: 'Explanation for why certain web browsers, like Chrome, do not support accessing the user\\'s camera.',\n  },\n  'id.verification.camera.access.failure.unsupported.instructions': {\n    id: 'id.verification.camera.access.failure.unsupported.instructions',\n    defaultMessage: 'Please use another browser to complete Identity Verification.',\n    description: 'Instructions for the user to user another web browser to complete the process.',\n  },\n  'id.verification.photo.tips.title': {\n    id: 'id.verification.photo.tips.title',\n    defaultMessage: 'Helpful Photo Tips',\n    description: 'Title for the Photo Tips page.',\n  },\n  'id.verification.photo.tips.description': {\n    id: 'id.verification.photo.tips.description',\n    defaultMessage: 'Next, we\\'ll need you to take a photo of your face. Please review the helpful tips below.',\n    description: 'Description for the photo tips page.',\n  },\n  'id.verification.photo.tips.list.title': {\n    id: 'id.verification.photo.tips.list.title',\n    defaultMessage: 'Photo Tips',\n    description: 'Title for the list of photo tips.',\n  },\n  'id.verification.photo.tips.list.description': {\n    id: 'id.verification.photo.tips.list.description',\n    defaultMessage: 'To take a successful photo, make sure that:',\n    description: 'Description for the list of photo tips.',\n  },\n  'id.verification.photo.tips.list.well.lit': {\n    id: 'id.verification.photo.tips.list.well.lit',\n    defaultMessage: 'Your face is well-lit.',\n    description: 'Tip to make sure the user\\'s face is well lit.',\n  },\n  'id.verification.photo.tips.list.inside.frame': {\n    id: 'id.verification.photo.tips.list.inside.frame',\n    defaultMessage: 'Your entire face fits inside the frame.',\n    description: 'Tip to make sure the user\\'s face fits inside the frame.',\n  },\n  'id.verification.portrait.photo.title.camera': {\n    id: 'id.verification.portrait.photo.title.camera',\n    defaultMessage: 'Take a Photo of Yourself',\n    description: 'Title for the Portrait Photo page if camera access is enabled.',\n  },\n  'id.verification.portrait.photo.instructions.camera': {\n    id: 'id.verification.portrait.photo.instructions.camera',\n    defaultMessage: 'When your face is in position, use the Take Photo button below to take your photo.',\n    description: 'Instructions to use the camera to take a portrait photo..',\n  },\n  'id.verification.camera.help.sight.question': {\n    id: 'id.verification.camera.help.sight.question',\n    defaultMessage: 'What if I can\\'t see the camera image or if I can\\'t see my photo to determine which side is visible?',\n    description: 'Question on what to do if the user cannot see the camera image or photo during verification.',\n  },\n  'id.verification.camera.help.sight.answer.portrait': {\n    id: 'id.verification.camera.help.sight.answer.portrait',\n    defaultMessage: 'You may be able to complete the image capture procedure without assistance, but it may take a couple of submission attempts to get the camera positioning right. Optimal camera positioning varies with each computer, but generally the best position for a headshot is approximately 12-18 inches (30-45 centimeters) from the camera, with your head centered relative to the computer screen. If the photos you submit are rejected, try moving the computer or camera orientation to change the lighting angle.',\n    description: 'Confirming what to do if the camera image of the portrait cannot be seen during verification.',\n  },\n  'id.verification.camera.help.sight.answer.id': {\n    id: 'id.verification.camera.help.sight.answer.id',\n    defaultMessage: 'You may be able to complete the image capture procedure without assistance, but it may take a couple of submission attempts to get the camera positioning right. Optimal camera positioning varies with each computer, but generally, the best position for a photo of an ID card is 8-12 inches (20-30 centimeters) from the camera, with the ID card centered relative to the camera. If the photos you submit are rejected, try moving the computer or camera orientation to change the lighting angle. The most common reason for rejection is inability to read the text on the ID card.',\n    description: 'Confirming what to do if the camera image of the ID cannot be seen during verification.',\n  },\n  'id.verification.camera.help.difficulty.question.portrait': {\n    id: 'id.verification.camera.help.difficulty.question.portrait',\n    defaultMessage: 'What if I have difficulty holding my head in position relative to the camera?',\n    description: 'Question on what to do if the user has difficulty holding their head relative to the camera.',\n  },\n  'id.verification.camera.help.difficulty.question.id': {\n    id: 'id.verification.camera.help.difficulty.question.id',\n    defaultMessage: 'What if I have difficulty holding my ID in position relative to the camera?',\n    description: 'Question on what to do if the user has difficulty holding their ID relative to the camera.',\n  },\n  'id.verification.camera.help.difficulty.answer': {\n    id: 'id.verification.camera.help.difficulty.answer',\n    defaultMessage: 'If you require assistance with taking a photo for submission, contact {siteName} support for additional suggestions.',\n    description: 'Confirming what to do if the user has difficult holding their head relative to the camera.',\n  },\n  'id.verification.id.photo.unclear.question': {\n    id: 'id.verification.id.photo.unclear.question',\n    defaultMessage: 'Is your ID card image not clear or too blurry?',\n    description: 'Question on what to do if the user\\'s ID image is unclear',\n  },\n  'id.verification.id.tips.title': {\n    id: 'id.verification.id.tips.title',\n    defaultMessage: 'Helpful Identification Card Tips',\n    description: 'Title for the ID Tips page.',\n  },\n  'id.verification.id.tips.description': {\n    id: 'id.verification.id.tips.description',\n    defaultMessage: 'Next, we\\'ll need you to take a photo of a valid identification card that includes your full name and photo, such as a driver’s license or passport. Please have your ID ready.',\n    description: 'Description for the ID Tips page.',\n  },\n  'id.verification.id.tips.list.well.lit': {\n    id: 'id.verification.id.tips.list.well.lit',\n    defaultMessage: 'Your identification card is well-lit.',\n    description: 'Tip to ensure ID is well lit.',\n  },\n  'id.verification.id.tips.list.clear': {\n    id: 'id.verification.id.tips.list.clear',\n    defaultMessage: 'Ensure that you can see your photo and clearly read your name.',\n    description: 'Tip to ensure ID and name can be seen clearly.',\n  },\n  'id.verification.id.photo.title.camera': {\n    id: 'id.verification.id.photo.title.camera',\n    defaultMessage: 'Take a Photo of Your Identification Card',\n    description: 'Title for the ID Photo page if camera access is enabled.',\n  },\n  'id.verification.id.photo.title.upload': {\n    id: 'id.verification.id.photo.title.upload',\n    defaultMessage: 'Upload a Photo of Your Identification Card',\n    description: 'Title for the ID Photo page if camera access is disabled.',\n  },\n  'id.verification.id.photo.preview.alt': {\n    id: 'id.verification.id.photo.preview.alt',\n    defaultMessage: 'Preview of photo ID.',\n    description: 'Alt text for the ID photo preview.',\n  },\n  'id.verification.id.photo.instructions.camera': {\n    id: 'id.verification.id.photo.instructions.camera',\n    defaultMessage: 'When your ID is in position, use the Take Photo button below to take your photo. Please use a passport, driver’s license, or another identification card that includes your full name and a picture of your face.',\n    description: 'Instructions to use the camera to take an ID photo.',\n  },\n  'id.verification.id.photo.instructions.upload': {\n    id: 'id.verification.id.photo.instructions.upload',\n    defaultMessage: 'Please upload a photo of your identification card. Ensure the entire ID fits inside the frame and is well-lit. The file size must be under 10 MB. Supported formats: ',\n    description: 'Instructions for ID photo upload.',\n  },\n  'id.verification.id.photo.instructions.upload.error.invalidFileType': {\n    id: 'id.verification.id.photo.instructions.upload.error.invalidFileType',\n    defaultMessage: 'The file you have selected is not a supported image type. Please choose from the following formats: ',\n    description: 'Error message for file upload that is not a supported image type.',\n  },\n  'id.verification.id.photo.instructions.upload.error.fileTooLarge': {\n    id: 'id.verification.id.photo.instructions.upload.error.fileTooLarge',\n    defaultMessage: 'The file you have selected is too large. Please try again with a file less than 10MB.',\n    description: 'Error message for file upload that is larger than 10MB.',\n  },\n  'id.verification.name.check.title': {\n    id: 'id.verification.name.check.title',\n    defaultMessage: 'Double-Check Your Name',\n    description: 'Title for the page where a user double-checks that their name is correct.',\n  },\n  'id.verification.name.check.instructions': {\n    id: 'id.verification.name.check.instructions',\n    defaultMessage: 'Does the name below match the name on your photo ID? If not, update the name below to match your photo ID.',\n    description: 'Text to instruct the user to check that the name displayed on the page matches what is on their photo ID.',\n  },\n  'id.verification.name.check.mismatch.information': {\n    id: 'id.verification.name.check.mismatch.information',\n    defaultMessage: 'If the name below does not match your photo ID, your identity verification will be denied.',\n    description: 'Text to inform the user that if the name displayed on the page does not match what is on their photo ID, identity verification will be denied.',\n  },\n  'id.verification.name.error': {\n    id: 'id.verification.name.error',\n    defaultMessage: 'Please enter your name as it appears on your photo ID.',\n    description: 'Error that shows when the user needs to update their name to match the name on their ID.',\n  },\n  'id.verification.account.name.warning.prefix': {\n    id: 'id.verification.account.name.warning.prefix',\n    defaultMessage: 'Please Note:',\n    description: 'Prefix to the warning that any change to the account name will be saved to the account.',\n  },\n  'id.verification.account.name.settings': {\n    id: 'id.verification.account.name.settings',\n    defaultMessage: 'Account Settings',\n    description: 'Link to Account Settings.',\n  },\n  'id.verification.name.label': {\n    id: 'id.verification.name.label',\n    defaultMessage: 'Name',\n    description: 'Label for name input.',\n  },\n  'id.verification.account.name.photo.alt': {\n    id: 'id.verification.account.name.photo.alt',\n    defaultMessage: 'Photo of your ID to be submitted.',\n    description: 'Alt text for the photo of the user\\'s ID.',\n  },\n  'id.verification.review.title': {\n    id: 'id.verification.review.title',\n    defaultMessage: 'Review Your Photos',\n    description: 'Title for the review your photos page.',\n  },\n  'id.verification.review.description': {\n    id: 'id.verification.review.description',\n    defaultMessage: 'Make sure we can verify your identity with the photos and information you have provided.',\n    description: 'Description for the review your photos page.',\n  },\n  'id.verification.review.portrait.label': {\n    id: 'id.verification.review.portrait.label',\n    defaultMessage: 'Your Portrait',\n    description: 'Label for the portrait card.',\n  },\n  'id.verification.review.portrait.alt': {\n    id: 'id.verification.review.portrait.alt',\n    defaultMessage: 'Photo of your face to be submitted.',\n    description: 'Alt text for the portrait photo.',\n  },\n  'id.verification.review.portrait.retake': {\n    id: 'id.verification.review.portrait.retake',\n    defaultMessage: 'Retake Portrait Photo',\n    description: 'Button to retake the portrait photo.',\n  },\n  'id.verification.review.id.label': {\n    id: 'id.verification.review.id.label',\n    defaultMessage: 'Your Identification Card',\n    description: 'Label for the Photo ID card.',\n  },\n  'id.verification.review.id.alt': {\n    id: 'id.verification.review.id.alt',\n    defaultMessage: 'Photo of your identification card to be submitted.',\n    description: 'Alt text for the ID photo.',\n  },\n  'id.verification.review.id.retake': {\n    id: 'id.verification.review.id.retake',\n    defaultMessage: 'Retake ID Photo',\n    description: 'Button to retake the ID photo.',\n  },\n  'id.verification.review.confirm': {\n    id: 'id.verification.review.confirm',\n    defaultMessage: 'Submit',\n    description: 'Button to confirm all information is correct and submit.',\n  },\n  'id.verification.submission.alert.error.face': {\n    id: 'id.verification.submission.alert.error.face',\n    defaultMessage: 'A photo of your face is required. Please retake your portrait photo.',\n    description: 'Error message displayed when the user\\'s portrait photo is missing.',\n  },\n  'id.verification.submission.alert.error.id': {\n    id: 'id.verification.submission.alert.error.id',\n    defaultMessage: 'A photo of your ID card is required. Please retake your ID photo.',\n    description: 'Error message displayed when the user\\'s ID photo is missing.',\n  },\n  'id.verification.submission.alert.error.name': {\n    id: 'id.verification.submission.alert.error.name',\n    defaultMessage: 'A valid account name is required. Please update your account name to match the name on your ID.',\n    description: 'Error message displayed when the user\\'s account name is missing.',\n  },\n  'id.verification.submission.alert.error.unsupported': {\n    id: 'id.verification.submission.alert.error.unsupported',\n    defaultMessage: 'One or more of the files you have uploaded is in an unsupported format. Please choose from the following: ',\n    description: 'Error message displayed when the user uploads an unsupported file type.',\n  },\n  'id.verification.review.error': {\n    id: 'id.verification.review.error',\n    defaultMessage: '{siteName} Support Page',\n    description: 'Text linking to the platform support page.',\n  },\n  'id.verification.submitted.title': {\n    id: 'id.verification.submitted.title',\n    defaultMessage: 'Identity Verification in Progress',\n    description: 'Title for the submitted page.',\n  },\n  'id.verification.submitted.text': {\n    id: 'id.verification.submitted.text',\n    defaultMessage: 'We have received your information and are verifying your identity. You will be notified when the verification process is complete (usually within 5 days). In the meantime, you can still access all available course content.',\n    description: 'Text confirming that ID verification request has been received.',\n  },\n  'id.verification.return.dashboard': {\n    id: 'id.verification.return.dashboard',\n    defaultMessage: 'Return to Your Dashboard',\n    description: 'Button to return to the dashboard.',\n  },\n  'id.verification.return.course': {\n    id: 'id.verification.return.course',\n    defaultMessage: 'Return to Course',\n    description: 'Return to the course which ID verification was accessed from.',\n  },\n  'id.verification.return.generic': {\n    id: 'id.verification.return.generic',\n    defaultMessage: 'Return',\n    description: 'Button to return to the user\\'s original location.',\n  },\n  'id.verification.photo.upload.help.title': {\n    id: 'id.verification.photo.upload.help.title',\n    defaultMessage: 'Upload a Photo Instead',\n    description: 'Title for section that allows switching to photo upload mode.',\n  },\n  'id.verification.photo.camera.help.title': {\n    id: 'id.verification.photo.camera.help.title',\n    defaultMessage: 'Use Your Camera Instead',\n    description: 'Title for section that allows switching to camera mode.',\n  },\n  'id.verification.photo.upload.help.text': {\n    id: 'id.verification.photo.upload.help.text',\n    defaultMessage: 'If you are having trouble using the photo capture above, you may want to upload a photo instead. To upload a photo, click the button below.',\n    description: 'Help text for switching to upload mode.',\n  },\n  'id.verification.photo.camera.help.text': {\n    id: 'id.verification.photo.camera.help.text',\n    defaultMessage: 'If you are having trouble uploading a photo above, you may want to use your camera instead. To use your camera, click the button below.',\n    description: 'Help text for switching to camera mode.',\n  },\n  'id.verification.photo.upload.help.button': {\n    id: 'id.verification.upload.help.button',\n    defaultMessage: 'Switch to Upload Mode',\n    description: 'Button used to switch to upload mode.',\n  },\n  'id.verification.photo.camera.help.button': {\n    id: 'id.verification.camera.help.button',\n    defaultMessage: 'Switch to Camera Mode',\n    description: 'Button used to switch to camera mode.',\n  },\n});\n\nexport default messages;\n","import React from 'react';\n\nconst IdVerificationContext = React.createContext({});\n\nconst MEDIA_ACCESS = {\n  PENDING: 'pending',\n  UNSUPPORTED: 'unsupported',\n  DENIED: 'denied',\n  GRANTED: 'granted',\n};\n\nconst ERROR_REASONS = {\n  COURSE_ENROLLMENT: 'course_enrollment',\n  EXISTING_REQUEST: 'existing_request',\n  CANNOT_VERIFY: 'cannot_verify',\n};\n\nconst VERIFIED_MODES = ['verified', 'professional', 'masters', 'executive_education'];\n\nexport default IdVerificationContext;\nexport {\n  MEDIA_ACCESS,\n  ERROR_REASONS,\n  VERIFIED_MODES,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getConfig } from '@edx/frontend-platform';\nimport { injectIntl, intlShape, FormattedMessage } from '@edx/frontend-platform/i18n';\n\nimport messages from './IdVerification.messages';\nimport { ERROR_REASONS } from './IdVerificationContext';\n\nconst AccessBlocked = ({ error, intl }) => {\n  const handleMessage = () => {\n    if (error === ERROR_REASONS.COURSE_ENROLLMENT) {\n      return <p>{intl.formatMessage(messages['id.verification.access.blocked.enrollment'])}</p>;\n    }\n    if (error === ERROR_REASONS.EXISTING_REQUEST) {\n      return <p>{intl.formatMessage(messages['id.verification.access.blocked.pending'])}</p>;\n    }\n    return (\n      <FormattedMessage\n        id=\"id.verification.access.blocked.denied\"\n        defaultMessage=\"We cannot verify your identity at this time. If you have yet to activate your account, please check your spam folder for the activation email from {email}.\"\n        description=\"Text that displays when user is denied from making a request, and to check their email for an activation email.\"\n        values={{\n          email: <strong>no-reply@registration.edx.org</strong>,\n        }}\n      />\n    );\n  };\n\n  return (\n    <div>\n      <h3 aria-level=\"1\" tabIndex=\"-1\">\n        {intl.formatMessage(messages['id.verification.access.blocked.title'])}\n      </h3>\n      {handleMessage()}\n      <div className=\"action-row\">\n        <a className=\"btn btn-primary mt-3\" href={`${getConfig().LMS_BASE_URL}/dashboard`}>\n          {intl.formatMessage(messages['id.verification.return.dashboard'])}\n        </a>\n      </div>\n    </div>\n  );\n};\n\nAccessBlocked.propTypes = {\n  intl: intlShape.isRequired,\n  error: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(AccessBlocked);\n","import React, { createContext, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getVerifiedNameHistory } from '../account-settings/data/service';\nimport { getMostRecentApprovedOrPendingVerifiedName } from '../utils';\nimport { useAsyncCall } from '../hooks';\nimport { SUCCESS_STATUS } from '../constants';\n\nexport const VerifiedNameContext = createContext();\n\nexport const VerifiedNameContextProvider = ({ children }) => {\n  const verifiedNameHistoryData = useAsyncCall(getVerifiedNameHistory);\n\n  let verifiedName = '';\n  const { status, data } = verifiedNameHistoryData;\n  if (status === SUCCESS_STATUS && data) {\n    const { results } = data;\n    verifiedName = getMostRecentApprovedOrPendingVerifiedName(results);\n  }\n\n  const value = useMemo(() => ({\n    verifiedNameHistoryCallStatus: status,\n    verifiedName,\n  }), [status, verifiedName]);\n\n  return (<VerifiedNameContext.Provider value={value}>{children}</VerifiedNameContext.Provider>);\n};\n\nVerifiedNameContextProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React, {\n  useState, useContext, useEffect, useMemo,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { AppContext } from '@edx/frontend-platform/react';\n\nimport { getProfileDataManager } from '../account-settings/data/service';\nimport PageLoading from '../account-settings/PageLoading';\nimport { useAsyncCall } from '../hooks';\nimport { IDLE_STATUS, LOADING_STATUS, SUCCESS_STATUS } from '../constants';\n\nimport { getExistingIdVerification, getEnrollments } from './data/service';\nimport AccessBlocked from './AccessBlocked';\nimport { hasGetUserMediaSupport } from './getUserMediaShim';\nimport IdVerificationContext, { MEDIA_ACCESS, ERROR_REASONS, VERIFIED_MODES } from './IdVerificationContext';\nimport { VerifiedNameContext } from './VerifiedNameContext';\n\nconst IdVerificationContextProvider = ({ children }) => {\n  const { authenticatedUser } = useContext(AppContext);\n  const { verifiedNameHistoryCallStatus, verifiedName } = useContext(VerifiedNameContext);\n\n  const idVerificationData = useAsyncCall(getExistingIdVerification);\n  const enrollmentsData = useAsyncCall(getEnrollments);\n\n  const [facePhotoFile, setFacePhotoFile] = useState(null);\n  const [idPhotoFile, setIdPhotoFile] = useState(null);\n  const [idPhotoName, setIdPhotoName] = useState(null);\n  const [mediaStream, setMediaStream] = useState(null);\n  const [mediaAccess, setMediaAccess] = useState(\n    hasGetUserMediaSupport ? MEDIA_ACCESS.PENDING : MEDIA_ACCESS.UNSUPPORTED,\n  );\n\n  const [profileDataManager, setProfileDataManager] = useState(null);\n  useEffect(() => {\n    // Determine if the user's profile data is managed by a third-party identity provider.\n    // If so, they cannot update their account name manually.\n    if (authenticatedUser.roles.length > 0) {\n      (async () => {\n        const thirdPartyManager = await getProfileDataManager(\n          authenticatedUser.username,\n          authenticatedUser.roles,\n        );\n        if (thirdPartyManager) {\n          setProfileDataManager(thirdPartyManager);\n        }\n      })();\n    }\n  }, [authenticatedUser]);\n\n  // Default to upload for the ID image\n  const [useCameraForId, setUseCameraForId] = useState(false);\n\n  // If the user reaches the end of the flow and goes back to retake their photos,\n  // this flag ensures that they are directed straight back to the summary panel\n  const [reachedSummary, setReachedSummary] = useState(false);\n\n  let canVerify = true;\n  let error = '';\n  let existingIdVerification;\n\n  if (idVerificationData?.data) {\n    existingIdVerification = idVerificationData.data;\n  }\n\n  if (enrollmentsData.status === SUCCESS_STATUS && enrollmentsData?.data) {\n    const verifiedEnrollments = enrollmentsData.data.filter((enrollment) => (\n      VERIFIED_MODES.includes(enrollment.mode)\n    ));\n    if (verifiedEnrollments.length === 0) {\n      canVerify = false;\n      error = ERROR_REASONS.COURSE_ENROLLMENT;\n    }\n  }\n\n  const contextValue = useMemo(() => ({\n    existingIdVerification,\n    facePhotoFile,\n    idPhotoFile,\n    idPhotoName,\n    mediaStream,\n    mediaAccess,\n    userId: authenticatedUser.userId,\n    // If the learner has an applicable verified name, then this should override authenticatedUser.name\n    // when determining the context value nameOnAccount.\n    nameOnAccount: verifiedName || authenticatedUser.name,\n    profileDataManager,\n    useCameraForId,\n    reachedSummary,\n    setFacePhotoFile,\n    setIdPhotoFile,\n    setIdPhotoName,\n    setUseCameraForId,\n    setReachedSummary,\n    tryGetUserMedia: async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n        setMediaAccess(MEDIA_ACCESS.GRANTED);\n        setMediaStream(stream);\n        // stop the stream, as we are not using it yet\n        const tracks = stream.getTracks();\n        tracks.forEach(track => track.stop());\n      } catch (err) {\n        setMediaAccess(MEDIA_ACCESS.DENIED);\n      }\n    },\n    stopUserMedia: () => {\n      if (mediaStream) {\n        const tracks = mediaStream.getTracks();\n        tracks.forEach(track => track.stop());\n        setMediaStream(null);\n      }\n    },\n  }), [authenticatedUser.name, authenticatedUser.userId, existingIdVerification, facePhotoFile,\n    idPhotoFile, idPhotoName, mediaAccess, mediaStream, profileDataManager, reachedSummary,\n    useCameraForId, verifiedName]);\n\n  const loadingStatuses = [IDLE_STATUS, LOADING_STATUS];\n  // If we are waiting for verification status or verified name history endpoint, show spinner.\n  if (loadingStatuses.includes(idVerificationData.status) || loadingStatuses.includes(verifiedNameHistoryCallStatus)) {\n    return <PageLoading srMessage=\"Loading verification status\" />;\n  }\n\n  if (!canVerify) {\n    return <AccessBlocked error={error} />;\n  }\n\n  return (\n    <IdVerificationContext.Provider value={contextValue}>\n      {children}\n    </IdVerificationContext.Provider>\n  );\n};\n\nIdVerificationContextProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default IdVerificationContextProvider;\n","import { useContext } from 'react';\nimport IdVerificationContext from './IdVerificationContext';\n\nconst SLUGS = {\n  REVIEW_REQUIREMENTS: 'review-requirements',\n  CHOOSE_MODE: 'choose-mode',\n  REQUEST_CAMERA_ACCESS: 'request-camera-access',\n  PORTRAIT_PHOTO_CONTEXT: 'portrait-photo-context',\n  TAKE_PORTRAIT_PHOTO: 'take-portrait-photo',\n  ID_CONTEXT: 'id-context',\n  TAKE_ID_PHOTO: 'take-id-photo',\n  GET_NAME_ID: 'get-name-id',\n  SUMMARY: 'summary',\n  SUBMITTED: 'submitted',\n};\n\nconst panelSteps = [\n  SLUGS.REVIEW_REQUIREMENTS,\n  SLUGS.REQUEST_CAMERA_ACCESS,\n  SLUGS.PORTRAIT_PHOTO_CONTEXT,\n  SLUGS.TAKE_PORTRAIT_PHOTO,\n  SLUGS.ID_CONTEXT,\n  SLUGS.TAKE_ID_PHOTO,\n  SLUGS.GET_NAME_ID,\n  SLUGS.SUMMARY,\n  SLUGS.SUBMITTED,\n];\n\n// eslint-disable-next-line import/prefer-default-export\nexport const useNextPanelSlug = (originSlug) => {\n  // Go back to the summary view if that's where they came from\n  const { reachedSummary } = useContext(IdVerificationContext);\n\n  const canRerouteToSummary = [\n    SLUGS.TAKE_PORTRAIT_PHOTO,\n    SLUGS.TAKE_ID_PHOTO,\n    SLUGS.GET_NAME_ID,\n  ];\n\n  if (reachedSummary && canRerouteToSummary.includes(originSlug)) {\n    return SLUGS.SUMMARY;\n  }\n\n  const nextIndex = panelSteps.indexOf(originSlug) + 1;\n  return nextIndex < panelSteps.length ? panelSteps[nextIndex] : null;\n};\n\n// check if the user is too far into the flow and if so, return the slug of the\n// furthest panel they are allow to be.\nexport const useVerificationRedirectSlug = (slug) => {\n  const { facePhotoFile, idPhotoFile } = useContext(IdVerificationContext);\n  const indexOfCurrentPanel = panelSteps.indexOf(slug);\n  if (!facePhotoFile) {\n    if (indexOfCurrentPanel > panelSteps.indexOf(SLUGS.TAKE_PORTRAIT_PHOTO)) {\n      return SLUGS.PORTRAIT_PHOTO_CONTEXT;\n    }\n  } else if (!idPhotoFile) {\n    if (indexOfCurrentPanel > panelSteps.indexOf(SLUGS.TAKE_ID_PHOTO)) {\n      return SLUGS.ID_CONTEXT;\n    }\n  }\n\n  // The user has satisfied requirements to view the panel they're on.\n  return null;\n};\n","import React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router';\nimport { useVerificationRedirectSlug } from '../routing-utilities';\n\nconst BasePanel = ({\n  children,\n  focusOnMount,\n  name,\n  title,\n}) => {\n  const headingRef = useRef();\n\n  // focus heading element on mount\n  useEffect(() => {\n    if (focusOnMount && headingRef.current) {\n      headingRef.current.focus();\n    }\n  }, [focusOnMount]);\n\n  const redirectSlug = useVerificationRedirectSlug(name);\n  if (redirectSlug) {\n    return <Redirect to={redirectSlug} />;\n  }\n\n  return (\n    <div className={`verification-panel ${name}-panel`}>\n      <h3 aria-level=\"1\" ref={headingRef} tabIndex=\"-1\">{title}</h3>\n      {children}\n    </div>\n  );\n};\n\nBasePanel.propTypes = {\n  children: PropTypes.node.isRequired,\n  focusOnMount: PropTypes.bool,\n  name: PropTypes.string.isRequired,\n  title: PropTypes.node.isRequired,\n};\n\nBasePanel.defaultProps = {\n  focusOnMount: true,\n};\n\nexport default BasePanel;\n","export default __webpack_public_path__ + \"86769bb88078f8daeeb384a2ef24dba7.png\";","import React, { useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getConfig } from '@edx/frontend-platform';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { injectIntl, intlShape, FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { Alert, Hyperlink } from '@edx/paragon';\n\nimport { useNextPanelSlug } from '../routing-utilities';\nimport BasePanel from './BasePanel';\n\nimport IdVerificationContext from '../IdVerificationContext';\nimport messages from '../IdVerification.messages';\nimport exampleCard from '../assets/example-card.png';\n\nconst ReviewRequirementsPanel = (props) => {\n  const { userId, profileDataManager } = useContext(IdVerificationContext);\n  const panelSlug = 'review-requirements';\n  const nextPanelSlug = useNextPanelSlug(panelSlug);\n\n  useEffect(() => {\n    sendTrackEvent('edx.id_verification.started', {\n      category: 'id_verification',\n      user_id: userId,\n    });\n  }, [userId]);\n\n  function renderManagedProfileMessage() {\n    if (!profileDataManager) {\n      return null;\n    }\n\n    return (\n      <div>\n        <Alert className=\"alert alert-primary\" role=\"alert\">\n          <FormattedMessage\n            id=\"id.verification.requirements.account.managed.alert\"\n            defaultMessage=\"Your account settings are managed by {managerTitle}. If the name on your photo ID does not match the name on your account, please contact your {profileDataManager} administrator or {support} for help before completing the Photo Verification process.\"\n            description=\"Alert message informing the user their account data is managed by a third party.\"\n            values={{\n              managerTitle: <strong>{profileDataManager}</strong>,\n              profileDataManager,\n              support: (\n                <Hyperlink destination={getConfig().SUPPORT_URL} target=\"_blank\">\n                  {props.intl.formatMessage(messages['id.verification.support'])}\n                </Hyperlink>\n              ),\n            }}\n          />\n        </Alert>\n      </div>\n    );\n  }\n\n  return (\n    <BasePanel\n      name={panelSlug}\n      title={props.intl.formatMessage(messages['id.verification.requirements.title'])}\n      focusOnMount={false}\n    >\n      {renderManagedProfileMessage()}\n      <p>\n        {props.intl.formatMessage(messages['id.verification.requirements.description'])}\n      </p>\n      <div className=\"card mb-4 shadow accent border-warning\">\n        <div className=\"card-body\">\n          <h6 aria-level=\"3\">\n            {props.intl.formatMessage(messages['id.verification.requirements.card.device.title'])}\n          </h6>\n          <p className=\"mb-0\">\n            <FormattedMessage\n              id=\"id.verification.requirements.card.device.text\"\n              defaultMessage=\"You need a device that has a camera. If you receive a browser prompt for access to your camera, please make sure to click {allow}.\"\n              description=\"Text explaining that the user needs access to a camera.\"\n              values={{\n                allow: <strong>{props.intl.formatMessage(messages['id.verification.requirements.card.device.allow'])}</strong>,\n              }}\n            />\n          </p>\n        </div>\n      </div>\n      <div className=\"card mb-4 shadow accent border-warning\">\n        <div className=\"card-body\">\n          <h6 aria-level=\"3\">\n            {props.intl.formatMessage(messages['id.verification.requirements.card.id.title'])}\n          </h6>\n          <p className=\"mb-0\">\n            {props.intl.formatMessage(messages['id.verification.requirements.card.id.text'])}\n            <img\n              src={exampleCard}\n              alt={props.intl.formatMessage(messages['id.verification.example.card.alt'])}\n            />\n          </p>\n        </div>\n      </div>\n      <h4 aria-level=\"2\" className=\"mb-3\">\n        {props.intl.formatMessage(messages['id.verification.privacy.title'])}\n      </h4>\n      <h6 aria-level=\"3\">\n        {props.intl.formatMessage(\n          messages['id.verification.privacy.need.photo.question'],\n          { siteName: getConfig().SITE_NAME },\n        )}\n      </h6>\n      <p>\n        {props.intl.formatMessage(messages['id.verification.privacy.need.photo.answer'])}\n      </p>\n      <h6 aria-level=\"3\">\n        {props.intl.formatMessage(\n          messages['id.verification.privacy.do.with.photo.question'],\n          { siteName: getConfig().SITE_NAME },\n        )}\n      </h6>\n      <p>\n        {props.intl.formatMessage(\n          messages['id.verification.privacy.do.with.photo.answer'],\n          { siteName: getConfig().SITE_NAME },\n        )}\n      </p>\n\n      <div className=\"action-row\">\n        <Link to={nextPanelSlug} className=\"btn btn-primary\" data-testid=\"next-button\">\n          {props.intl.formatMessage(messages['id.verification.next'])}\n        </Link>\n      </div>\n    </BasePanel>\n  );\n};\n\nReviewRequirementsPanel.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(ReviewRequirementsPanel);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport messages from '../IdVerification.messages';\n\nexport const EnableCameraDirectionsPanel = (props) => {\n  if (props.browserName === 'Internet Explorer') {\n    return (\n      <>\n        <h6>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.ie11'])}</h6>\n        <ol>\n          <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.ie11.step1'])}</li>\n          <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.ie11.step2'])}</li>\n          <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.ie11.step3'])}</li>\n        </ol>\n      </>\n    );\n  }\n  if (props.browserName === 'Chrome') {\n    return (\n      <>\n        <h6>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.chrome'])}</h6>\n        <ol>\n          <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.chrome.step1'])}</li>\n          <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.chrome.step2'])}</li>\n          <ul>\n            <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.chrome.step2.windows'])}</li>\n            <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.chrome.step2.mac'])}</li>\n          </ul>\n          <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.chrome.step3'])}</li>\n          <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.chrome.step4'])}</li>\n          <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.chrome.step5'])}</li>\n        </ol>\n      </>\n    );\n  }\n  if (props.browserName === 'Firefox') {\n    return (\n      <>\n        <h6>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.firefox'])}</h6>\n        <ol>\n          <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.firefox.step1'])}</li>\n          <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.firefox.step2'])}</li>\n          <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.firefox.step3'])}</li>\n          <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.firefox.step4'])}</li>\n          <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.firefox.step5'])}</li>\n          <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.firefox.step6'])}</li>\n          <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.firefox.step7'])}</li>\n        </ol>\n      </>\n    );\n  }\n  if (props.browserName === 'Safari') {\n    return (\n      <>\n        <h6>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.safari'])}</h6>\n        <ol>\n          <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.safari.step1'])}</li>\n          <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.safari.step2'])}</li>\n          <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.safari.step3'])}</li>\n          <li>{props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary.safari.step4'])}</li>\n        </ol>\n      </>\n    );\n  }\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  return <></>;\n};\n\nEnableCameraDirectionsPanel.propTypes = {\n  intl: intlShape.isRequired,\n  browserName: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(EnableCameraDirectionsPanel);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport messages from '../IdVerification.messages';\n\nexport const UnsupportedCameraDirectionsPanel = (props) => (\n  <>\n    {props.browserName === 'Chrome' && <span>{props.intl.formatMessage(messages['id.verification.camera.access.failure.unsupported.chrome.explanation'])}</span>}\n    <span> </span>\n    <span>{props.intl.formatMessage(messages['id.verification.camera.access.failure.unsupported.instructions'])}</span>\n  </>\n);\n\nUnsupportedCameraDirectionsPanel.propTypes = {\n  intl: intlShape.isRequired,\n  browserName: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(UnsupportedCameraDirectionsPanel);\n","import React, { useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport Bowser from 'bowser';\nimport { getConfig } from '@edx/frontend-platform';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { injectIntl, intlShape, FormattedMessage } from '@edx/frontend-platform/i18n';\n\nimport { useRedirect } from '../../hooks';\nimport { useNextPanelSlug } from '../routing-utilities';\nimport BasePanel from './BasePanel';\nimport IdVerificationContext, { MEDIA_ACCESS } from '../IdVerificationContext';\nimport { EnableCameraDirectionsPanel } from './EnableCameraDirectionsPanel';\nimport { UnsupportedCameraDirectionsPanel } from './UnsupportedCameraDirectionsPanel';\n\nimport messages from '../IdVerification.messages';\n\nconst RequestCameraAccessPanel = (props) => {\n  const { location: returnUrl, text: returnText } = useRedirect();\n  const panelSlug = 'request-camera-access';\n  const nextPanelSlug = useNextPanelSlug(panelSlug);\n  const {\n    tryGetUserMedia, mediaAccess, userId,\n  } = useContext(IdVerificationContext);\n  const browserName = Bowser.parse(window.navigator.userAgent).browser.name;\n\n  useEffect(() => {\n    if (mediaAccess === MEDIA_ACCESS.UNSUPPORTED) {\n      sendTrackEvent('edx.id_verification.camera.unsupported', {\n        category: 'id_verification',\n        user_id: userId,\n      });\n    }\n    if (mediaAccess === MEDIA_ACCESS.DENIED) {\n      sendTrackEvent('edx.id_verification.camera.denied', {\n        category: 'id_verification',\n        user_id: userId,\n      });\n    }\n  }, [mediaAccess, userId]);\n\n  const getTitle = () => {\n    if (mediaAccess === MEDIA_ACCESS.GRANTED) {\n      return props.intl.formatMessage(messages['id.verification.camera.access.title.success']);\n    }\n    if ([MEDIA_ACCESS.UNSUPPORTED, MEDIA_ACCESS.DENIED].includes(mediaAccess)) {\n      return props.intl.formatMessage(messages['id.verification.camera.access.title.failed']);\n    }\n    return props.intl.formatMessage(messages['id.verification.camera.access.title']);\n  };\n\n  const returnLink = (\n    <a className=\"btn btn-primary\" href={`${getConfig().LMS_BASE_URL}/${returnUrl}`}>\n      {props.intl.formatMessage(messages[returnText])}\n    </a>\n  );\n\n  return (\n    <BasePanel\n      name={panelSlug}\n      title={getTitle()}\n    >\n      {mediaAccess === MEDIA_ACCESS.PENDING && (\n        <div>\n          <p>\n            <FormattedMessage\n              id=\"id.verification.request.camera.access.instructions\"\n              defaultMessage=\"In order to take a photo using your webcam, you may receive a browser prompt for access to your camera. {clickAllow}\"\n              description=\"Instructions to enable camera access.\"\n              values={{\n                clickAllow: <strong>{props.intl.formatMessage(messages['id.verification.camera.access.click.allow'])}</strong>,\n              }}\n            />\n          </p>\n          <div className=\"action-row\">\n            <button type=\"button\" className=\"btn btn-primary\" onClick={tryGetUserMedia}>\n              {props.intl.formatMessage(messages['id.verification.camera.access.enable'])}\n            </button>\n          </div>\n        </div>\n      )}\n\n      {mediaAccess === MEDIA_ACCESS.GRANTED && (\n        <div>\n          <p data-testid=\"camera-access-success\">\n            {props.intl.formatMessage(messages['id.verification.camera.access.success'])}\n          </p>\n          <div className=\"action-row\">\n            <Link to={nextPanelSlug} className=\"btn btn-primary\" data-testid=\"next-button\">\n              {props.intl.formatMessage(messages['id.verification.next'])}\n            </Link>\n          </div>\n        </div>\n      )}\n\n      {mediaAccess === MEDIA_ACCESS.DENIED && (\n        <div data-testid=\"camera-failure-instructions\">\n          <p data-testid=\"camera-access-failure\">\n            {props.intl.formatMessage(messages['id.verification.camera.access.failure.temporary'])}\n          </p>\n          <EnableCameraDirectionsPanel browserName={browserName} intl={props.intl} />\n          <div className=\"action-row\">\n            {returnLink}\n          </div>\n        </div>\n      )}\n\n      {mediaAccess === MEDIA_ACCESS.UNSUPPORTED && (\n        <div data-testid=\"camera-unsupported-instructions\">\n          <p data-testid=\"camera-unsupported-failure\">\n            {props.intl.formatMessage(messages['id.verification.camera.access.failure.unsupported'])}\n          </p>\n          <UnsupportedCameraDirectionsPanel browserName={browserName} intl={props.intl} />\n          <div className=\"action-row\">\n            {returnLink}\n          </div>\n        </div>\n      )}\n\n    </BasePanel>\n  );\n};\n\nRequestCameraAccessPanel.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(RequestCameraAccessPanel);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Collapsible } from '@edx/paragon';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport { getConfig } from '@edx/frontend-platform';\nimport messages from './IdVerification.messages';\n\nconst CameraHelp = (props) => (\n  <div>\n    <Collapsible\n      styling=\"card\"\n      title={props.intl.formatMessage(messages['id.verification.camera.help.sight.question'])}\n      className=\"mb-4 shadow\"\n      defaultOpen={props.isOpen}\n    >\n      <p>\n        {props.intl.formatMessage(messages[`id.verification.camera.help.sight.answer.${props.isPortrait ? 'portrait' : 'id'}`])}\n      </p>\n    </Collapsible>\n    <Collapsible\n      styling=\"card\"\n      title={props.intl.formatMessage(messages[`id.verification.camera.help.difficulty.question.${props.isPortrait ? 'portrait' : 'id'}`])}\n      className=\"mb-4 shadow\"\n      defaultOpen={props.isOpen}\n    >\n      <p>\n        {props.intl.formatMessage(\n          messages['id.verification.camera.help.difficulty.answer'],\n          { siteName: getConfig().SITE_NAME },\n        )}\n      </p>\n    </Collapsible>\n  </div>\n);\n\nCameraHelp.propTypes = {\n  intl: intlShape.isRequired,\n  isOpen: PropTypes.bool,\n  isPortrait: PropTypes.bool,\n};\n\nCameraHelp.defaultProps = {\n  isOpen: false,\n  isPortrait: false,\n};\n\nexport default injectIntl(CameraHelp);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport { useNextPanelSlug } from '../routing-utilities';\nimport BasePanel from './BasePanel';\nimport CameraHelp from '../CameraHelp';\nimport messages from '../IdVerification.messages';\n\nconst PortraitPhotoContextPanel = (props) => {\n  const panelSlug = 'portrait-photo-context';\n  const nextPanelSlug = useNextPanelSlug(panelSlug);\n  return (\n    <BasePanel\n      name={panelSlug}\n      title={props.intl.formatMessage(messages['id.verification.photo.tips.title'])}\n    >\n      <p>\n        {props.intl.formatMessage(messages['id.verification.photo.tips.description'])}\n      </p>\n      <div className=\"card mb-4 shadow accent border-warning\">\n        <div className=\"card-body\">\n          <h6>\n            {props.intl.formatMessage(messages['id.verification.photo.tips.list.title'])}\n          </h6>\n          <p>\n            {props.intl.formatMessage(messages['id.verification.photo.tips.list.description'])}\n          </p>\n          <ul className=\"mb-0\">\n            <li>\n              {props.intl.formatMessage(messages['id.verification.photo.tips.list.well.lit'])}\n            </li>\n            <li>\n              {props.intl.formatMessage(messages['id.verification.photo.tips.list.inside.frame'])}\n            </li>\n          </ul>\n        </div>\n      </div>\n      <CameraHelp isOpen isPortrait />\n      <div className=\"action-row\">\n        <Link to={nextPanelSlug} className=\"btn btn-primary\" data-testid=\"next-button\">\n          {props.intl.formatMessage(messages['id.verification.next'])}\n        </Link>\n      </div>\n    </BasePanel>\n  );\n};\n\nPortraitPhotoContextPanel.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(PortraitPhotoContextPanel);\n","/* eslint-disable jsx-a11y/media-has-caption */\n/* eslint-disable jsx-a11y/no-access-key */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\n// eslint-disable-next-line import/no-unresolved\nimport * as blazeface from '@tensorflow-models/blazeface';\nimport CameraPhoto, { FACING_MODES } from 'jslib-html5-camera-photo';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Form, Spinner } from '@edx/paragon';\n\nimport shutter from './data/camera-shutter.base64.json';\nimport messages from './IdVerification.messages';\n\nclass Camera extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.cameraPhoto = null;\n    this.videoRef = React.createRef();\n    this.canvasRef = React.createRef();\n    this.setDetection = this.setDetection.bind(this);\n    this.state = {\n      dataUri: '',\n      videoHasLoaded: false,\n      shouldDetect: false,\n      isFinishedLoadingDetection: true,\n      shouldGiveFeedback: true,\n      feedback: '',\n    };\n  }\n\n  componentDidMount() {\n    this.cameraPhoto = new CameraPhoto(this.videoRef.current);\n    this.cameraPhoto.startCamera(\n      this.props.isPortrait ? FACING_MODES.USER : FACING_MODES.ENVIRONMENT,\n      { width: 640, height: 480 },\n    );\n  }\n\n  async componentWillUnmount() {\n    this.cameraPhoto.stopCamera();\n  }\n\n  setDetection() {\n    this.setState(\n      (state) => ({ shouldDetect: !state.shouldDetect }),\n      () => {\n        if (this.state.shouldDetect) {\n          this.setState({ isFinishedLoadingDetection: false });\n          this.startDetection();\n        }\n        this.sendEvent();\n      },\n    );\n  }\n\n  setVideoHasLoaded() {\n    this.setState({ videoHasLoaded: 'true' });\n  }\n\n  getGridPosition(coordinates) {\n    // Used to determine where a face is (i.e. top-left, center-right, bottom-center, etc.)\n\n    const x = coordinates[0];\n    const y = coordinates[1];\n\n    let messageBase = 'id.verification.photo.feedback';\n\n    const heightUpperLimit = 320;\n    const heightMiddleLimit = 160;\n\n    if (y < heightMiddleLimit) {\n      messageBase += '.top';\n    } else if (y < heightUpperLimit && y >= heightMiddleLimit) {\n      messageBase += '.center';\n    } else {\n      messageBase += '.bottom';\n    }\n\n    const widthRightLimit = 213;\n    const widthMiddleLimit = 427;\n\n    if (x < widthRightLimit) {\n      messageBase += '.right';\n    } else if (x >= widthRightLimit && x < widthMiddleLimit) {\n      messageBase += '.center';\n    } else {\n      messageBase += '.left';\n    }\n\n    return messageBase;\n  }\n\n  getSizeFactor() {\n    let sizeFactor = 1;\n    const settings = this.cameraPhoto.getCameraSettings();\n    if (settings) {\n      const videoWidth = settings.width;\n      const videoHeight = settings.height;\n      // need to multiply by 3 because each pixel contains 3 bytes\n      const currentSize = videoWidth * videoHeight * 3;\n      // chose a limit of 9,999,999 (bytes) so that result will\n      // always be less than 10MB\n      const ratio = 9999999 / currentSize;\n\n      if (ratio < 1) {\n        // if the current resolution creates an image larger than 10 MB, adjust sizeFactor (resolution)\n        // to ensure that image will have a file size of less than 10 MB.\n        sizeFactor = ratio;\n      } else if (videoWidth === 640 && videoHeight === 480) {\n        // otherwise increase the resolution to try and prevent blurry images.\n        sizeFactor = 2;\n      }\n    }\n    return sizeFactor;\n  }\n\n  detectFromVideoFrame = (model, video) => {\n    model.estimateFaces(video).then((predictions) => {\n      if (this.state.shouldDetect && !this.state.dataUri) {\n        this.showDetections(predictions);\n\n        requestAnimationFrame(() => {\n          this.detectFromVideoFrame(model, video);\n        });\n      }\n    });\n  };\n\n  showDetections = (predictions) => {\n    let canvasContext;\n    if (predictions.length > 0) {\n      canvasContext = this.canvasRef.current.getContext('2d');\n      canvasContext.clearRect(0, 0, canvasContext.canvas.width, canvasContext.canvas.height);\n    }\n    // predictions is an array of objects describing each detected face\n    predictions.forEach((prediction) => {\n      const start = [prediction.topLeft[0], prediction.topLeft[1]];\n      const end = [prediction.bottomRight[0], prediction.bottomRight[1]];\n      const size = [end[0] - start[0], end[1] - start[1]];\n\n      // landmarks is an array of points representing each facial landmark (i.e. right eye, left eye, nose, etc.)\n      const features = prediction.landmarks;\n      let isInPosition = true;\n\n      // for each of the landmarks, determine if it is in position\n      for (let j = 0; j < features.length; j++) {\n        const x = features[j][0];\n        const y = features[j][1];\n\n        let isInRange;\n        if (this.props.isPortrait) {\n          isInRange = this.isInRangeForPortrait(x, y);\n        } else {\n          isInRange = this.isInRangeForID(x, y);\n        }\n        // if it is not in range, give feedback depending on which feature is out of range\n        isInPosition = isInPosition && isInRange;\n      }\n\n      // draw a box depending on if all landmarks are in position\n      if (isInPosition) {\n        canvasContext.strokeStyle = '#00ffff';\n        canvasContext.lineWidth = 6;\n        canvasContext.strokeRect(start[0], start[1], size[0], size[1]);\n        // give positive feedback here if user is in correct position\n        this.giveFeedback(predictions.length, [], true);\n      } else {\n        canvasContext.fillStyle = 'rgba(255, 51, 0, 0.75)';\n        canvasContext.fillRect(start[0], start[1], size[0], size[1]);\n        this.giveFeedback(predictions.length, features[0], false);\n      }\n    });\n\n    if (predictions.length === 0) {\n      this.giveFeedback(predictions.length, [], false);\n    }\n  };\n\n  startDetection() {\n    setTimeout(() => {\n      if (this.state.videoHasLoaded) {\n        const loadModelPromise = blazeface.load();\n        Promise.all([loadModelPromise])\n          .then((values) => {\n            this.setState({ isFinishedLoadingDetection: true });\n            this.detectFromVideoFrame(values[0], this.videoRef.current);\n          });\n      } else {\n        this.setState({ isFinishedLoadingDetection: true });\n        this.setState({ shouldDetect: false });\n        // TODO: add error message\n      }\n    }, 1000);\n  }\n\n  sendEvent() {\n    let eventName = 'edx.id_verification';\n    if (this.props.isPortrait) {\n      eventName += '.user_photo';\n    } else {\n      eventName += '.id_photo';\n    }\n\n    if (this.state.shouldDetect) {\n      eventName += '.face_detection_enabled';\n    } else {\n      eventName += '.face_detection_disabled';\n    }\n    sendTrackEvent(eventName);\n  }\n\n  giveFeedback(numFaces, rightEye, isCorrect) {\n    if (this.state.shouldGiveFeedback) {\n      const currentFeedback = this.state.feedback;\n      let newFeedback = '';\n      if (numFaces === 1) {\n        // only give feedback if one face is detected otherwise\n        // it would be difficult to tell a user which face to move\n        if (isCorrect) {\n          newFeedback = this.props.intl.formatMessage(messages['id.verification.photo.feedback.correct']);\n        } else {\n          // give feedback based on where user is\n          newFeedback = this.props.intl.formatMessage(messages[this.getGridPosition(rightEye)]);\n        }\n      } else if (numFaces > 1) {\n        newFeedback = this.props.intl.formatMessage(messages['id.verification.photo.feedback.two.faces']);\n      } else {\n        newFeedback = this.props.intl.formatMessage(messages['id.verification.photo.feedback.no.faces']);\n      }\n      if (currentFeedback !== newFeedback) {\n        // only update status if it is different, so we don't overload the user with status updates\n        this.setState({ feedback: newFeedback });\n      }\n      // turn off feedback for one to ensure that instructions aren't disruptive/interrupting\n      this.setState({ shouldGiveFeedback: false });\n      setTimeout(() => {\n        this.setState({ shouldGiveFeedback: true });\n      }, 1000);\n    }\n  }\n\n  isInRangeForPortrait(x, y) {\n    return x > 47 && x < 570 && y > 100 && y < 410;\n  }\n\n  isInRangeForID(x, y) {\n    return x > 120 && x < 470 && y > 120 && y < 350;\n  }\n\n  takePhoto() {\n    if (this.state.dataUri) {\n      this.reset();\n      return;\n    }\n\n    const config = {\n      sizeFactor: this.getSizeFactor(),\n    };\n\n    this.playShutterClick();\n    const dataUri = this.cameraPhoto.getDataUri(config);\n    this.setState({ dataUri });\n    this.props.onImageCapture(dataUri);\n  }\n\n  playShutterClick() {\n    const audio = new Audio(`data:audio/mp3;base64,${shutter.base64}`);\n    audio.play();\n  }\n\n  reset() {\n    this.setState({ dataUri: '' });\n    if (this.state.shouldDetect) {\n      this.startDetection();\n    }\n  }\n\n  render() {\n    const cameraFlashClass = this.state.dataUri\n      ? 'do-transition camera-flash'\n      : 'camera-flash';\n    return (\n      <div className=\"camera-outer-wrapper shadow\">\n        <Form.Group style={{ textAlign: 'left', padding: '0.5rem', marginBottom: '0.5rem' }}>\n          <Form.Check\n            id=\"videoDetection\"\n            name=\"videoDetection\"\n            label={this.props.intl.formatMessage(messages['id.verification.photo.enable.detection'])}\n            aria-describedby=\"videoDetectionHelpText\"\n            checked={this.state.shouldDetect}\n            onChange={this.setDetection}\n            style={{ padding: '0rem', marginLeft: '1.25rem', float: this.state.isFinishedLoadingDetection ? 'none' : 'left' }}\n          />\n          {!this.state.isFinishedLoadingDetection && <Spinner animation=\"border\" variant=\"primary\" style={{ marginLeft: '0.5rem' }} data-testid=\"spinner\" />}\n          <Form.Text id=\"videoDetectionHelpText\" data-testid=\"videoDetectionHelpText\">\n            {this.props.isPortrait\n              ? this.props.intl.formatMessage(messages['id.verification.photo.enable.detection.portrait.help.text'])\n              : this.props.intl.formatMessage(messages['id.verification.photo.enable.detection.id.help.text'])}\n          </Form.Text>\n        </Form.Group>\n        <div className=\"camera-wrapper\">\n          <div className={cameraFlashClass} />\n          <video\n            ref={this.videoRef}\n            data-testid=\"video\"\n            autoPlay\n            className=\"camera-video\"\n            onLoadedData={() => { this.setVideoHasLoaded(); }}\n            style={{\n              display: this.state.dataUri ? 'none' : 'block',\n              WebkitTransform: 'scaleX(-1)',\n              transform: 'scaleX(-1)',\n            }}\n            playsInline\n          />\n          <canvas\n            ref={this.canvasRef}\n            data-testid=\"detection-canvas\"\n            className=\"canvas-video\"\n            style={{\n              display: !this.state.shouldDetect || this.state.dataUri ? 'none' : 'block',\n              WebkitTransform: 'scaleX(-1)',\n              transform: 'scaleX(-1)',\n            }}\n            width=\"640\"\n            height=\"480\"\n          />\n          <img\n            data-hj-suppress\n            alt=\"imgCamera\"\n            src={this.state.dataUri}\n            className=\"camera-video\"\n            style={{ display: this.state.dataUri ? 'block' : 'none' }}\n          />\n          <div role=\"status\" className=\"sr-only\">{this.state.feedback}</div>\n        </div>\n        <button\n          type=\"button\"\n          className={`btn camera-btn ${\n            this.state.dataUri\n              ? 'btn-outline-primary'\n              : 'btn-primary'\n          }`}\n          accessKey=\"c\"\n          onClick={() => {\n            this.takePhoto();\n          }}\n        >\n          {this.state.dataUri\n            ? this.props.intl.formatMessage(messages['id.verification.photo.retake'])\n            : this.props.intl.formatMessage(messages['id.verification.photo.take'])}\n        </button>\n      </div>\n    );\n  }\n}\n\nCamera.propTypes = {\n  intl: intlShape.isRequired,\n  onImageCapture: PropTypes.func.isRequired,\n  isPortrait: PropTypes.bool.isRequired,\n};\n\nexport default injectIntl(Camera);\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport { useNextPanelSlug } from '../routing-utilities';\nimport BasePanel from './BasePanel';\nimport Camera from '../Camera';\nimport CameraHelp from '../CameraHelp';\nimport IdVerificationContext from '../IdVerificationContext';\n\nimport messages from '../IdVerification.messages';\n\nconst TakePortraitPhotoPanel = (props) => {\n  const panelSlug = 'take-portrait-photo';\n  const nextPanelSlug = useNextPanelSlug(panelSlug);\n  const { setFacePhotoFile, facePhotoFile } = useContext(IdVerificationContext);\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    // This prevents focus switching to the heading when taking a photo\n    setMounted(true);\n  }, []);\n\n  return (\n    <BasePanel\n      name={panelSlug}\n      focusOnMount={!mounted}\n      title={props.intl.formatMessage(messages['id.verification.portrait.photo.title.camera'])}\n    >\n      <div>\n        <p>\n          {props.intl.formatMessage(messages['id.verification.portrait.photo.instructions.camera'])}\n        </p>\n        <Camera onImageCapture={setFacePhotoFile} isPortrait />\n      </div>\n      <CameraHelp isPortrait />\n      <div className=\"action-row\" style={{ visibility: facePhotoFile ? 'unset' : 'hidden' }}>\n        <Link to={nextPanelSlug} className=\"btn btn-primary\" data-testid=\"next-button\">\n          {props.intl.formatMessage(messages['id.verification.next'])}\n        </Link>\n      </div>\n    </BasePanel>\n  );\n};\n\nTakePortraitPhotoPanel.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(TakePortraitPhotoPanel);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport { useNextPanelSlug } from '../routing-utilities';\nimport BasePanel from './BasePanel';\nimport CameraHelp from '../CameraHelp';\nimport messages from '../IdVerification.messages';\nimport exampleCard from '../assets/example-card.png';\n\nconst IdContextPanel = (props) => {\n  const panelSlug = 'id-context';\n  const nextPanelSlug = useNextPanelSlug(panelSlug);\n  return (\n    <BasePanel\n      name={panelSlug}\n      title={props.intl.formatMessage(messages['id.verification.id.tips.title'])}\n    >\n      <p>{props.intl.formatMessage(messages['id.verification.id.tips.description'])}</p>\n      <div className=\"card mb-4 shadow accent border-warning\">\n        <div className=\"card-body\">\n          <h6>\n            {props.intl.formatMessage(messages['id.verification.photo.tips.list.title'])}\n          </h6>\n          <p>\n            {props.intl.formatMessage(messages['id.verification.photo.tips.list.description'])}\n          </p>\n          <ul>\n            <li>\n              {props.intl.formatMessage(messages['id.verification.id.tips.list.well.lit'])}\n            </li>\n            <li>\n              {props.intl.formatMessage(messages['id.verification.id.tips.list.clear'])}\n            </li>\n          </ul>\n          <img\n            src={exampleCard}\n            alt={props.intl.formatMessage(messages['id.verification.example.card.alt'])}\n          />\n        </div>\n      </div>\n      <CameraHelp isOpen />\n      <div className=\"action-row\">\n        <Link to={nextPanelSlug} className=\"btn btn-primary\" data-testid=\"next-button\">\n          {props.intl.formatMessage(messages['id.verification.next'])}\n        </Link>\n      </div>\n    </BasePanel>\n  );\n};\n\nIdContextPanel.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(IdContextPanel);\n","import React, {\n  useContext, useEffect, useRef,\n} from 'react';\nimport { Form } from '@edx/paragon';\nimport { Link, useHistory } from 'react-router-dom';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport { useNextPanelSlug } from '../routing-utilities';\nimport BasePanel from './BasePanel';\nimport IdVerificationContext from '../IdVerificationContext';\n\nimport messages from '../IdVerification.messages';\n\nconst GetNameIdPanel = (props) => {\n  const { push, location } = useHistory();\n  const nameInputRef = useRef();\n  const panelSlug = 'get-name-id';\n  const nextPanelSlug = useNextPanelSlug(panelSlug);\n\n  const { nameOnAccount, idPhotoName, setIdPhotoName } = useContext(IdVerificationContext);\n  const nameOnAccountValue = nameOnAccount || '';\n\n  useEffect(() => {\n    if (idPhotoName === null) {\n      setIdPhotoName(nameOnAccountValue);\n    }\n\n    if (location.state?.fromSummary && nameInputRef.current) {\n      nameInputRef.current.focus();\n    }\n  }, [idPhotoName, location.state, nameOnAccountValue, setIdPhotoName]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (idPhotoName) {\n      push(nextPanelSlug);\n    }\n  };\n\n  return (\n    <BasePanel\n      name={panelSlug}\n      title={props.intl.formatMessage(messages['id.verification.name.check.title'])}\n    >\n      <p>\n        {props.intl.formatMessage(messages['id.verification.name.check.instructions'])}\n      </p>\n      <p>\n        {props.intl.formatMessage(messages['id.verification.name.check.mismatch.information'])}\n      </p>\n\n      <Form onSubmit={handleSubmit}>\n        <Form.Group>\n          <Form.Label className=\"font-weight-bold\" htmlFor=\"photo-id-name\">\n            {props.intl.formatMessage(messages['id.verification.name.label'])}\n          </Form.Label>\n          <Form.Control\n            controlId=\"photo-id-name\"\n            size=\"lg\"\n            type=\"text\"\n            ref={nameInputRef}\n            isInvalid={!idPhotoName}\n            aria-describedby=\"photo-id-name-feedback\"\n            value={idPhotoName}\n            onChange={e => setIdPhotoName(e.target.value)}\n            data-testid=\"name-input\"\n          />\n          {!idPhotoName && (\n            <Form.Control.Feedback\n              id=\"photo-id-name-feedback\"\n              data-testid=\"id-name-feedback-message\"\n              type=\"invalid\"\n            >\n              {props.intl.formatMessage(messages['id.verification.name.error'])}\n            </Form.Control.Feedback>\n          )}\n        </Form.Group>\n      </Form>\n\n      <div className=\"action-row\">\n        <Link\n          to={nextPanelSlug}\n          className={`btn btn-primary ${!idPhotoName && 'disabled'}`}\n          data-testid=\"next-button\"\n          aria-disabled={!idPhotoName}\n        >\n          {props.intl.formatMessage(messages['id.verification.next'])}\n        </Link>\n      </div>\n    </BasePanel>\n  );\n};\n\nGetNameIdPanel.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(GetNameIdPanel);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ImagePreview = ({ src, alt, id }) => (\n  <div id={id} className=\"image-preview\">\n\n    <img data-hj-suppress style={{ objectFit: 'contain' }} src={src} alt={alt} />\n\n  </div>\n);\n\nImagePreview.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  id: PropTypes.string,\n};\n\nImagePreview.defaultProps = {\n  id: undefined,\n};\n\nexport default ImagePreview;\n","import React from 'react';\n\nconst SupportedMediaTypes = () => {\n  const SUPPORTED_TYPES = ['.png', '.jpeg', '.jpg', '.bmp', '.webp', '.tiff'];\n\n  const getSupportedTypes = () => SUPPORTED_TYPES.map((type, index) => {\n    if (index === SUPPORTED_TYPES.length - 1) {\n      return type;\n    }\n    return `${type}, `;\n  });\n\n  return <span>{getSupportedTypes()}</span>;\n};\n\nexport default SupportedMediaTypes;\n","import React, { useCallback, useState } from 'react';\nimport { intlShape } from '@edx/frontend-platform/i18n';\nimport PropTypes from 'prop-types';\nimport { Alert } from '@edx/paragon';\nimport messages from './IdVerification.messages';\nimport SupportedMediaTypes from './SupportedMediaTypes';\n\nconst ImageFileUpload = ({ onFileChange, intl }) => {\n  const [error, setError] = useState(null);\n  const errorTypes = {\n    invalidFileType: 'invalidFileType',\n    fileTooLarge: 'fileTooLarge',\n  };\n  const maxFileSize = 10000000;\n\n  const handleChange = useCallback((e) => {\n    if (e.target.files.length === 0) {\n      return;\n    }\n\n    const fileObject = e.target.files[0];\n    if (!fileObject.type.startsWith('image')) {\n      setError(errorTypes.invalidFileType);\n    } else if (fileObject.size >= maxFileSize) {\n      setError(errorTypes.fileTooLarge);\n    } else {\n      setError(null);\n      const fileReader = new FileReader();\n      fileReader.addEventListener('load', () => {\n        onFileChange(fileReader.result);\n      });\n      fileReader.readAsDataURL(fileObject);\n    }\n  }, [errorTypes.fileTooLarge, errorTypes.invalidFileType, onFileChange]);\n\n  return (\n    <>\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        data-testid=\"fileUpload\"\n        onChange={handleChange}\n      />\n      {error && (\n      <Alert\n        id=\"fileError\"\n        variant=\"danger\"\n        tabIndex=\"-1\"\n        style={{ marginTop: '1rem' }}\n      >\n        {intl.formatMessage(messages[`id.verification.id.photo.instructions.upload.error.${error}`])}\n        <SupportedMediaTypes />\n      </Alert>\n      )}\n    </>\n  );\n};\n\nImageFileUpload.propTypes = {\n  onFileChange: PropTypes.func.isRequired,\n  intl: intlShape.isRequired,\n};\n\nexport default ImageFileUpload;\n","import React, { useContext } from 'react';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Button, Collapsible } from '@edx/paragon';\n\nimport IdVerificationContext from './IdVerificationContext';\nimport messages from './IdVerification.messages';\n\nconst CollapsibleImageHelp = (props) => {\n  const {\n    userId, useCameraForId, setUseCameraForId,\n  } = useContext(IdVerificationContext);\n\n  const handleClick = () => {\n    const toggleTo = useCameraForId ? 'upload' : 'camera';\n    const eventName = `edx.id_verification.toggle_to.${toggleTo}`;\n    sendTrackEvent(eventName, {\n      category: 'id_verification',\n      user_id: userId,\n    });\n    setUseCameraForId(!useCameraForId);\n  };\n\n  return (\n    <Collapsible\n      styling=\"card\"\n      title={useCameraForId\n        ? props.intl.formatMessage(messages['id.verification.photo.upload.help.title'])\n        : props.intl.formatMessage(messages['id.verification.photo.camera.help.title'])}\n      className=\"mb-4 shadow\"\n      defaultOpen\n    >\n      <p data-testid=\"help-text\">\n        {useCameraForId\n          ? props.intl.formatMessage(messages['id.verification.photo.upload.help.text'])\n          : props.intl.formatMessage(messages['id.verification.photo.camera.help.text'])}\n      </p>\n      <Button\n        title={useCameraForId ? 'Upload Photo' : 'Take Photo'} // TO-DO: translation\n        data-testid=\"toggle-button\"\n        onClick={handleClick}\n        style={{ marginTop: '0.5rem' }}\n      >\n        {useCameraForId\n          ? props.intl.formatMessage(messages['id.verification.photo.upload.help.button'])\n          : props.intl.formatMessage(messages['id.verification.photo.camera.help.button'])}\n      </Button>\n    </Collapsible>\n  );\n};\n\nCollapsibleImageHelp.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CollapsibleImageHelp);\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport { useNextPanelSlug } from '../routing-utilities';\nimport BasePanel from './BasePanel';\nimport Camera from '../Camera';\nimport IdVerificationContext from '../IdVerificationContext';\n\nimport messages from '../IdVerification.messages';\nimport CameraHelp from '../CameraHelp';\nimport ImagePreview from '../ImagePreview';\nimport ImageFileUpload from '../ImageFileUpload';\nimport CollapsibleImageHelp from '../CollapsibleImageHelp';\nimport SupportedMediaTypes from '../SupportedMediaTypes';\n\nconst TakeIdPhotoPanel = (props) => {\n  const panelSlug = 'take-id-photo';\n  const nextPanelSlug = useNextPanelSlug(panelSlug);\n  const { setIdPhotoFile, idPhotoFile, useCameraForId } = useContext(IdVerificationContext);\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    // This prevents focus switching to the heading when taking a photo\n    setMounted(true);\n  }, []);\n\n  return (\n    <BasePanel\n      name={panelSlug}\n      focusOnMount={!mounted}\n      title={useCameraForId\n        ? props.intl.formatMessage(messages['id.verification.id.photo.title.camera'])\n        : props.intl.formatMessage(messages['id.verification.id.photo.title.upload'])}\n    >\n      <div>\n        {idPhotoFile && !useCameraForId && (\n          <ImagePreview\n            src={idPhotoFile}\n            alt={props.intl.formatMessage(messages['id.verification.id.photo.preview.alt'])}\n          />\n        )}\n\n        {useCameraForId ? (\n          <div>\n            <p>\n              {props.intl.formatMessage(messages['id.verification.id.photo.instructions.camera'])}\n            </p>\n            <Camera onImageCapture={setIdPhotoFile} isPortrait={false} />\n          </div>\n        ) : (\n          <div style={{ marginBottom: '1.25rem' }}>\n            <p data-testid=\"upload-text\">\n              {props.intl.formatMessage(messages['id.verification.id.photo.instructions.upload'])}\n              <SupportedMediaTypes />\n            </p>\n            <ImageFileUpload onFileChange={setIdPhotoFile} intl={props.intl} />\n          </div>\n        )}\n      </div>\n      {useCameraForId && <CameraHelp />}\n      <CollapsibleImageHelp />\n      <div className=\"action-row\" style={{ visibility: idPhotoFile ? 'unset' : 'hidden' }}>\n        <Link to={nextPanelSlug} className=\"btn btn-primary\" data-testid=\"next-button\">\n          {props.intl.formatMessage(messages['id.verification.next'])}\n        </Link>\n      </div>\n    </BasePanel>\n  );\n};\n\nTakeIdPhotoPanel.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(TakeIdPhotoPanel);\n","import React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Collapsible } from '@edx/paragon';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\n\nimport messages from './IdVerification.messages';\nimport ImageFileUpload from './ImageFileUpload';\nimport IdVerificationContext from './IdVerificationContext';\nimport ImagePreview from './ImagePreview';\nimport SupportedMediaTypes from './SupportedMediaTypes';\n\nconst CameraHelpWithUpload = (props) => {\n  const { setIdPhotoFile, idPhotoFile, userId } = useContext(IdVerificationContext);\n  const [hasUploadedImage, setHasUploadedImage] = useState(false);\n\n  const setAndTrackIdPhotoFile = (image) => {\n    sendTrackEvent('edx.id_verification.upload_id', {\n      category: 'id_verification',\n      user_id: userId,\n    });\n    setHasUploadedImage(true);\n    setIdPhotoFile(image);\n  };\n\n  return (\n    <div>\n      <Collapsible\n        styling=\"card\"\n        title={props.intl.formatMessage(messages['id.verification.id.photo.unclear.question'])}\n        data-testid=\"collapsible\"\n        className=\"mb-4 shadow\"\n        defaultOpen={props.isOpen}\n      >\n        {idPhotoFile && hasUploadedImage && <ImagePreview src={idPhotoFile} alt={props.intl.formatMessage(messages['id.verification.id.photo.preview.alt'])} />}\n        <p>\n          {props.intl.formatMessage(messages['id.verification.id.photo.instructions.upload'])}\n          <SupportedMediaTypes />\n        </p>\n        <ImageFileUpload onFileChange={setAndTrackIdPhotoFile} intl={props.intl} />\n      </Collapsible>\n    </div>\n  );\n};\n\nCameraHelpWithUpload.propTypes = {\n  intl: intlShape.isRequired,\n  isOpen: PropTypes.bool,\n};\n\nCameraHelpWithUpload.defaultProps = {\n  isOpen: false,\n};\n\nexport default injectIntl(CameraHelpWithUpload);\n","import React, { useState, useContext, useEffect } from 'react';\nimport { getConfig, history } from '@edx/frontend-platform';\nimport {\n  Alert, Hyperlink, Form, Button, Spinner,\n} from '@edx/paragon';\nimport { Link } from 'react-router-dom';\nimport { injectIntl, intlShape, FormattedMessage } from '@edx/frontend-platform/i18n';\n\nimport { submitIdVerification } from '../data/service';\nimport { useNextPanelSlug } from '../routing-utilities';\nimport BasePanel from './BasePanel';\nimport IdVerificationContext from '../IdVerificationContext';\nimport ImagePreview from '../ImagePreview';\n\nimport messages from '../IdVerification.messages';\nimport CameraHelpWithUpload from '../CameraHelpWithUpload';\nimport SupportedMediaTypes from '../SupportedMediaTypes';\n\nconst SummaryPanel = (props) => {\n  const panelSlug = 'summary';\n  const nextPanelSlug = useNextPanelSlug(panelSlug);\n  const {\n    facePhotoFile,\n    idPhotoFile,\n    profileDataManager,\n    nameOnAccount,\n    idPhotoName,\n    stopUserMedia,\n    setReachedSummary,\n  } = useContext(IdVerificationContext);\n  const nameToBeUsed = idPhotoName || nameOnAccount || '';\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submissionError, setSubmissionError] = useState(null);\n\n  useEffect(() => setReachedSummary(true), [setReachedSummary]);\n\n  function renderManagedProfileMessage() {\n    if (!profileDataManager) {\n      return null;\n    }\n\n    return (\n      <p id=\"profile-manager-warning\">\n        <FormattedMessage\n          id=\"id.verification.account.name.summary.alert\"\n          defaultMessage=\"Your account settings are managed by {managerTitle}. If the name on your photo ID does not match the name on your account, please contact your {profileDataManager} administrator or {support} for help.\"\n          description=\"Alert message informing the user their account data is managed by a third party.\"\n          values={{\n            managerTitle: <strong>{profileDataManager}</strong>,\n            profileDataManager,\n            support: (\n              <Hyperlink destination={getConfig().SUPPORT_URL} target=\"_blank\">\n                {props.intl.formatMessage(messages['id.verification.support'])}\n              </Hyperlink>\n            ),\n          }}\n        />\n      </p>\n    );\n  }\n\n  // eslint-disable-next-line react/no-unstable-nested-components\n  const SubmitButton = () => {\n    const handleClick = async () => {\n      setIsSubmitting(true);\n      const verificationData = {\n        facePhotoFile,\n        idPhotoFile,\n        courseRunKey: sessionStorage.getItem('courseRunKey'),\n      };\n      if (idPhotoName) {\n        verificationData.idPhotoName = idPhotoName;\n      } else {\n        /**\n         * If learner has not entered an idPhotoName on the GetNameIdPanel,\n         * use the current nameOnAccount when submitting IDV.\n         */\n        verificationData.idPhotoName = nameOnAccount;\n      }\n      const result = await submitIdVerification(verificationData);\n      if (result.success) {\n        stopUserMedia();\n        history.push(nextPanelSlug);\n      } else {\n        stopUserMedia();\n        setIsSubmitting(false);\n        setSubmissionError(result);\n      }\n    };\n    return (\n      <Button\n        title=\"Confirmation\"\n        disabled={isSubmitting}\n        onClick={handleClick}\n        data-testid=\"submit-button\"\n      >\n        {props.intl.formatMessage(messages['id.verification.review.confirm'])}\n      </Button>\n    );\n  };\n\n  function getError() {\n    if (submissionError.status === 400) {\n      if (submissionError.message.includes('face_image')) {\n        return props.intl.formatMessage(messages['id.verification.submission.alert.error.face']);\n      }\n      if (submissionError.message.includes('Photo ID image')) {\n        return props.intl.formatMessage(messages['id.verification.submission.alert.error.id']);\n      }\n      if (submissionError.message.includes('Name')) {\n        return props.intl.formatMessage(messages['id.verification.submission.alert.error.name']);\n      }\n      if (submissionError.message.includes('unsupported format')) {\n        return (\n          <>\n            {props.intl.formatMessage(messages['id.verification.submission.alert.error.unsupported'])}\n            <SupportedMediaTypes />\n          </>\n        );\n      }\n    }\n    return (\n      <FormattedMessage\n        id=\"idv.submission.alert.error\"\n        defaultMessage={`\n          We encountered a technical error while trying to submit ID verification.\n          This might be a temporary issue, so please try again in a few minutes.\n          If the problem persists, please go to {support_link} for help.\n        `}\n        values={{\n          support_link: (\n            <Alert.Link href=\"https://support.edx.org/hc/en-us\">\n              {props.intl.formatMessage(\n                messages['id.verification.review.error'],\n                { siteName: getConfig().SITE_NAME },\n              )}\n            </Alert.Link>\n          ),\n        }}\n      />\n    );\n  }\n\n  return (\n    <BasePanel\n      name={panelSlug}\n      title={props.intl.formatMessage(messages['id.verification.review.title'])}\n    >\n      {submissionError && (\n        <Alert\n          variant=\"danger\"\n          data-testid=\"submission-error\"\n          dismissible\n          onClose={() => setSubmissionError(null)}\n        >\n          {getError()}\n        </Alert>\n      )}\n      <p>\n        {props.intl.formatMessage(messages['id.verification.review.description'])}\n      </p>\n      <div className=\"row mb-4\">\n        <div className=\"col-6\">\n          <label htmlFor=\"photo-of-face\" className=\"font-weight-bold\">\n            {props.intl.formatMessage(messages['id.verification.review.portrait.label'])}\n          </label>\n          <ImagePreview\n            id=\"photo-of-face\"\n            src={facePhotoFile}\n            alt={props.intl.formatMessage(messages['id.verification.review.portrait.alt'])}\n          />\n          <Link\n            className=\"btn btn-outline-primary\"\n            to={{\n              pathname: 'take-portrait-photo',\n              state: { fromSummary: true },\n            }}\n            data-testid=\"portrait-retake\"\n          >\n            {props.intl.formatMessage(messages['id.verification.review.portrait.retake'])}\n          </Link>\n        </div>\n        <div className=\"col-6\">\n          <label htmlFor=\"photo-of-id/edit\" className=\"font-weight-bold\">\n            {props.intl.formatMessage(messages['id.verification.review.id.label'])}\n          </label>\n          <ImagePreview\n            id=\"photo-of-id\"\n            src={idPhotoFile}\n            alt={props.intl.formatMessage(messages['id.verification.review.id.alt'])}\n          />\n          <Link\n            className=\"btn btn-outline-primary\"\n            to={{\n              pathname: 'take-id-photo',\n              state: { fromSummary: true },\n            }}\n            data-testid=\"id-retake\"\n          >\n            {props.intl.formatMessage(messages['id.verification.review.id.retake'])}\n          </Link>\n        </div>\n      </div>\n      <CameraHelpWithUpload />\n      <div className=\"form-group\">\n        <label htmlFor=\"name-to-be-used\" className=\"font-weight-bold\">\n          {props.intl.formatMessage(messages['id.verification.name.label'])}\n        </label>\n        {renderManagedProfileMessage()}\n        <div className=\"d-flex\">\n          <Form.Control\n            id=\"name-to-be-used\"\n            type=\"text\"\n            disabled\n            value={nameToBeUsed}\n            onChange={() => {}}\n            aria-describedby={profileDataManager ? 'profile-manager-warning' : null}\n          />\n          {!profileDataManager && (\n            <Link\n              className=\"btn btn-link ml-3 px-0\"\n              to={{\n                pathname: 'get-name-id',\n                state: { fromSummary: true },\n              }}\n            >\n              <FormattedMessage\n                id=\"id.verification.account.name.edit\"\n                defaultMessage=\"Edit {sr}\"\n                description=\"Button to edit name, with clarifying information for screen readers.\"\n                values={{\n                  sr: <span className=\"sr-only\">Name</span>,\n                }}\n              />\n            </Link>\n          )}\n        </div>\n      </div>\n      <SubmitButton />{' '}\n      {isSubmitting && <Spinner animation=\"border\" variant=\"primary\" />}\n    </BasePanel>\n  );\n};\n\nSummaryPanel.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(SummaryPanel);\n","import React, { useContext, useEffect } from 'react';\nimport { getConfig } from '@edx/frontend-platform';\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport { useRedirect } from '../../hooks';\n\nimport IdVerificationContext from '../IdVerificationContext';\nimport messages from '../IdVerification.messages';\n\nimport BasePanel from './BasePanel';\n\nconst SubmittedPanel = (props) => {\n  const { userId } = useContext(IdVerificationContext);\n  const { location: returnUrl, text: returnText } = useRedirect();\n  const panelSlug = 'submitted';\n\n  useEffect(() => {\n    sendTrackEvent('edx.id_verification.submitted', {\n      category: 'id_verification',\n      user_id: userId,\n    });\n  }, [userId]);\n\n  return (\n    <BasePanel\n      name={panelSlug}\n      title={props.intl.formatMessage(messages['id.verification.submitted.title'])}\n    >\n      <p>\n        {props.intl.formatMessage(messages['id.verification.submitted.text'])}\n      </p>\n      <a\n        className=\"btn btn-primary\"\n        href={`${getConfig().LMS_BASE_URL}/${returnUrl}`}\n        data-testid=\"return-button\"\n      >\n        {props.intl.formatMessage(messages[returnText])}\n      </a>\n    </BasePanel>\n  );\n};\n\nSubmittedPanel.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(SubmittedPanel);\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Route, Switch, Redirect, useRouteMatch, useLocation,\n} from 'react-router-dom';\nimport camelCase from 'lodash.camelcase';\nimport qs from 'qs';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Button, ModalDialog, ActionRow } from '@edx/paragon';\nimport { getConfig } from '@edx/frontend-platform';\nimport { idVerificationSelector } from './data/selectors';\nimport './getUserMediaShim';\n\nimport IdVerificationContextProvider from './IdVerificationContextProvider';\nimport { VerifiedNameContextProvider } from './VerifiedNameContext';\nimport ReviewRequirementsPanel from './panels/ReviewRequirementsPanel';\nimport RequestCameraAccessPanel from './panels/RequestCameraAccessPanel';\nimport PortraitPhotoContextPanel from './panels/PortraitPhotoContextPanel';\nimport TakePortraitPhotoPanel from './panels/TakePortraitPhotoPanel';\nimport IdContextPanel from './panels/IdContextPanel';\nimport GetNameIdPanel from './panels/GetNameIdPanel';\nimport TakeIdPhotoPanel from './panels/TakeIdPhotoPanel';\nimport SummaryPanel from './panels/SummaryPanel';\nimport SubmittedPanel from './panels/SubmittedPanel';\n\nimport messages from './IdVerification.messages';\n\n// eslint-disable-next-line react/prefer-stateless-function\nconst IdVerificationPage = (props) => {\n  const { path } = useRouteMatch();\n  const { search } = useLocation();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // Save query params in order to route back to the correct location later\n  useEffect(() => {\n    if (search) {\n      const parsedQueryParams = qs.parse(search, {\n        ignoreQueryPrefix: true,\n        interpretNumericEntities: true,\n      });\n      Object.entries(parsedQueryParams).forEach(([key, value]) => {\n        sessionStorage.setItem(camelCase(key), value);\n      });\n    }\n  }, [search]);\n\n  return (\n    <>\n      {/* If user reloads, redirect to the beginning of the process */}\n      <Redirect to={`${path}/review-requirements`} />\n      <div className=\"page__id-verification container-fluid py-5\">\n        <div className=\"row\">\n          <div className=\"col-lg-6 col-md-8\">\n            <VerifiedNameContextProvider>\n              <IdVerificationContextProvider>\n                <Switch>\n                  <Route path={`${path}/review-requirements`} component={ReviewRequirementsPanel} />\n                  <Route path={`${path}/request-camera-access`} component={RequestCameraAccessPanel} />\n                  <Route path={`${path}/portrait-photo-context`} component={PortraitPhotoContextPanel} />\n                  <Route path={`${path}/take-portrait-photo`} component={TakePortraitPhotoPanel} />\n                  <Route path={`${path}/id-context`} component={IdContextPanel} />\n                  <Route path={`${path}/get-name-id`} component={GetNameIdPanel} />\n                  <Route path={`${path}/take-id-photo`} component={TakeIdPhotoPanel} />\n                  <Route path={`${path}/summary`} component={SummaryPanel} />\n                  <Route path={`${path}/submitted`} component={SubmittedPanel} />\n                </Switch>\n              </IdVerificationContextProvider>\n            </VerifiedNameContextProvider>\n          </div>\n          <div className=\"col-lg-6 col-md-4 pt-md-0 pt-4 text-right\">\n            <Button variant=\"link\" className=\"px-0\" onClick={() => setIsModalOpen(true)}>\n              Privacy Information\n            </Button>\n          </div>\n        </div>\n        <ModalDialog\n          isOpen={isModalOpen}\n          title=\"Id modal\"\n          onClose={() => setIsModalOpen(false)}\n          size=\"lg\"\n          hasCloseButton={false}\n        >\n          <ModalDialog.Header>\n            <ModalDialog.Title data-testid=\"Id-modal\">\n              {props.intl.formatMessage(messages['id.verification.privacy.title'])}\n            </ModalDialog.Title>\n          </ModalDialog.Header>\n          <ModalDialog.Body>\n            <div className=\"p-3\">\n              <h6>\n                {props.intl.formatMessage(\n                  messages['id.verification.privacy.need.photo.question'],\n                  { siteName: getConfig().SITE_NAME },\n                )}\n              </h6>\n              <p>{props.intl.formatMessage(messages['id.verification.privacy.need.photo.answer'])}</p>\n              <h6>\n                {props.intl.formatMessage(\n                  messages['id.verification.privacy.do.with.photo.question'],\n                  { siteName: getConfig().SITE_NAME },\n                )}\n              </h6>\n              <p>\n                {props.intl.formatMessage(\n                  messages['id.verification.privacy.do.with.photo.answer'],\n                  { siteName: getConfig().SITE_NAME },\n                )}\n              </p>\n            </div>\n          </ModalDialog.Body>\n          <ModalDialog.Footer className=\"p-2\">\n            <ActionRow>\n              <ModalDialog.CloseButton variant=\"link\">\n                Close\n              </ModalDialog.CloseButton>\n            </ActionRow>\n          </ModalDialog.Footer>\n        </ModalDialog>\n\n      </div>\n    </>\n  );\n};\n\nIdVerificationPage.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default connect(idVerificationSelector, {})(injectIntl(IdVerificationPage));\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  'account.settings.coaching.consent.welcome.header': {\n    id: 'account.settings.coaching.consent.welcome.header',\n    defaultMessage: 'Let’s get started.',\n    description: 'The welcome header for consent form.',\n  },\n  'account.settings.coaching.consent.welcome.subheader': {\n    id: 'account.settings.coaching.consent.welcome.subheader',\n    defaultMessage: \"We're here for you from start to finish\",\n    description: 'The welcome subheader for consent form.',\n  },\n  'account.settings.coaching.consent.description': {\n    id: 'account.settings.coaching.consent.description',\n    defaultMessage: \"MicroBachelors programs include coaching that focuses on your career, education, and how you'll achieve results through one-on-one communication with an experienced professional. If you’re interested, provide the information below and click “Submit,” and our coaching partner will connect with you via email and/or text message to help you move forward. Terms and conditions apply.*\",\n    description: 'Text describing what Coaching is.',\n  },\n  'account.settings.coaching.consent.text-messaging.disclaimer': {\n    id: 'account.settings.coaching.consent.text-messaging.disclaimer',\n    defaultMessage: '* Coaching services are included at no additional cost to learners with US phone numbers. Coaching includes recurring text messages. Message and data rates may apply. Text STOP to opt-out.',\n    description: 'Text describing what Coaching is.',\n  },\n  'account.settings.coaching.consent.accept-coaching': {\n    id: 'account.settings.coaching.consent.accept-coaching',\n    defaultMessage: 'Sign up for coaching',\n    description: 'Text to confirm coaching enablement',\n  },\n  'account.settings.coaching.consent.decline-coaching': {\n    id: 'account.settings.coaching.consent.decline-coaching',\n    defaultMessage: 'I prefer not to be contacted with free coaching services',\n    description: 'Text to decline coaching enablement',\n  },\n  'account.settings.coaching.consent.label.name': {\n    id: 'account.settings.coaching.consent.label.name',\n    defaultMessage: 'Please confirm your name',\n    description: 'Label for name input',\n  },\n  'account.settings.coaching.consent.label.phone-number': {\n    id: 'account.settings.coaching.consent.label.phone-number',\n    defaultMessage: 'Enter your mobile number',\n    description: 'Label for mobile phone number input',\n  },\n  'account.settings.coaching.consent.success.header': {\n    id: 'account.settings.coaching.consent.success.header',\n    defaultMessage: 'Success!',\n    description: 'Heading announcing that submission succeeded',\n  },\n  'account.settings.coaching.consent.success.message': {\n    id: 'account.settings.coaching.consent.success.message',\n    defaultMessage: \"You're signed up for coaching. You can expect a message via email or SMS in the coming days.\",\n    description: 'Text announcing that you have signed up and will receive texts',\n  },\n  'account.settings.coaching.consent.success.continue': {\n    id: 'account.settings.coaching.consent.success.continue',\n    defaultMessage: 'Start my course',\n    description: 'Text that the user will be sent back to the courseware',\n  },\n  'account.settings.coaching.managed.support': {\n    id: 'account.settings.coaching.managed.support',\n    defaultMessage: 'support',\n    description: 'website support',\n  },\n});\n\nexport default messages;\n","import React from 'react';\n\nimport { injectIntl, intlShape, FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { Form, Button, Hyperlink } from '@edx/paragon';\n\nimport PropTypes from 'prop-types';\n\nimport Alert from '../Alert';\nimport messages from './CoachingConsent.messages';\n\nconst ErrorMessage = (props) => <div className=\"alert-warning mb-2\">{props.message}</div>;\n\nconst ManagedProfileAlert = ({ profileDataManager }) => (\n  <Alert className=\"alert alert-primary\" role=\"alert\">\n    <FormattedMessage\n      id=\"account.settings.coaching.managed.alert\"\n      defaultMessage=\"Your name is managed by {managerTitle}. Contact your administrator for help.\"\n      description=\"Alert message informing the user their account data is managed by a third party\"\n      values={{\n        managerTitle: <b>{profileDataManager}</b>,\n      }}\n    />\n  </Alert>\n);\nconst CoachingForm = (props) => (\n  <div className=\"col-12 col-md-6 col-xl-5 mx-auto mt-4 p-5 shadow-lg\">\n    <h2 className=\"h2\">\n      {props.intl.formatMessage(messages['account.settings.coaching.consent.welcome.header'])}\n    </h2>\n    <p>{props.intl.formatMessage(messages['account.settings.coaching.consent.description'])}</p>\n    <div>\n      <form onSubmit={props.onSubmit}>\n        <div className=\"py-3\">\n          {!!props.profileDataManager && (\n          <ManagedProfileAlert profileDataManager={props.profileDataManager} />\n          )}\n          <ErrorMessage message={props.formErrors.full_name} />\n          <label className=\"h6\" htmlFor=\"fullName\">\n            {props.intl.formatMessage(messages['account.settings.coaching.consent.label.name'])}\n          </label>\n          <Form.Control\n            type=\"text\"\n            name=\"full-name\"\n            id=\"fullName\"\n            disabled={!!props.profileDataManager}\n            defaultValue={props.formValues.name}\n          />\n        </div>\n        <div className=\"py-3\">\n          <ErrorMessage message={props.formErrors.phone_number} />\n          <label className=\"h6\" htmlFor=\"phoneNumber\">\n            {props.intl.formatMessage(messages['account.settings.coaching.consent.label.phone-number'])}\n          </label>\n          <Form.Control\n            type=\"text\"\n            name=\"phone_number\"\n            id=\"phoneNumber\"\n            defaultValue={props.formValues.phone_number}\n          />\n        </div>\n        <div className=\" py-3\">\n          <p className=\"small font-italic\">\n            {props.intl.formatMessage(messages['account.settings.coaching.consent.text-messaging.disclaimer'])}\n          </p>\n        </div>\n        <ErrorMessage message={props.formErrors.coaching} />\n        <div className=\"d-flex flex-column align-items-center\">\n          <Button variant=\"outline-primary\" className=\"w-100\" type=\"submit\">\n            {props.intl.formatMessage(messages['account.settings.coaching.consent.accept-coaching'])}\n          </Button>\n        </div>\n        <div className=\"mt-3\">\n          <Hyperlink\n            className=\"mt-3 text-dark btn-link small\"\n            destination={props.redirectUrl}\n            onClick={props.declineCoaching}\n          >\n            {props.intl.formatMessage(messages['account.settings.coaching.consent.decline-coaching'])}\n          </Hyperlink>\n        </div>\n      </form>\n    </div>\n  </div>\n);\n\nCoachingForm.defaultProps = {\n  formErrors: {\n    coaching: '',\n    name: '',\n    phone_number: '',\n  },\n};\n\nCoachingForm.propTypes = {\n  intl: intlShape.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  declineCoaching: PropTypes.func.isRequired,\n  formValues: PropTypes.shape({\n    name: PropTypes.string,\n    phone_number: PropTypes.string,\n    coaching: PropTypes.shape({\n      coaching_consent: PropTypes.bool.isRequired,\n      user: PropTypes.number.isRequired,\n      eligible_for_coaching: PropTypes.bool.isRequired,\n      consent_form_seen: PropTypes.bool.isRequired,\n    }),\n  }).isRequired,\n  formErrors: PropTypes.shape({\n    coaching: PropTypes.string,\n    full_name: PropTypes.string,\n    phone_number: PropTypes.string,\n  }),\n  redirectUrl: PropTypes.string.isRequired,\n  profileDataManager: PropTypes.string.isRequired,\n};\n\nErrorMessage.defaultProps = {\n  message: '',\n};\n\nErrorMessage.propTypes = {\n  message: PropTypes.string,\n};\n\nManagedProfileAlert.propTypes = {\n  profileDataManager: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(CoachingForm);\n","var _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nconst SvgLogo = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: 1168,\n  height: 540\n}, props), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"none\",\n  fillRule: \"nonzero\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#209FDA\",\n  d: \"M1166.82 85.5V0H953.76v85.5h48.42l-86.32 106.48-86.4-106.48h48.64V0H718.92v95.72l137.56 169.54-137.56 169.7v17.06h65.58v87.62h93.6v-87.62h-54.18l92-113.5h.02l92.1 113.5h-54.28v87.62h213.06v-87.62h-39.96L975.32 265.26l145.7-179.76z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#026BA4\",\n  d: \"M664.02 0v85.5h46.6l8.3 10.22V0zM718.92 452.02v-17.06l-13.84 17.06h-41.06v87.62H784.5v-87.62z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#78212E\",\n  d: \"M322 411.86h75.66a207.66 207.66 0 0 1-37.1 60 209.02 209.02 0 0 1-38.56-60M360.56 189.28a208.3 208.3 0 0 0-46.96 83.86 122.64 122.64 0 0 1 8.58 21.56h74.88a120 120 0 0 1 8.8-21.24 209.04 209.04 0 0 0-45.3-84.18ZM322.18 294.7a128.5 128.5 0 0 1 .56 69.7h73.66a122.66 122.66 0 0 1 .6-69.7h-74.82Zm0 0h-13.5a210.32 210.32 0 0 0-.34 69.7h14.4a128.5 128.5 0 0 0-.56-69.7Z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#8A8C8F\",\n  d: \"M710.62 85.5h-46.6V.02h-88V85.5h56.84v73.7a201.18 201.18 0 0 0-118.2-37.72 208.42 208.42 0 0 0-154.1 67.8 209.04 209.04 0 0 1 45.24 84.18c21.144-39.959 62.652-64.95 107.86-64.94 67.4 0 119.22 54.64 119.22 122v.68c-.34 67.08-52 121.36-119.22 121.36-45.183.033-86.684-24.907-107.86-64.82a120.82 120.82 0 0 1-9.4-23.24h-88a204.12 204.12 0 0 0 5.26 23.56 207.34 207.34 0 0 0 8.4 23.9h75.6a207.66 207.66 0 0 1-37.1 60 208.42 208.42 0 0 0 154.1 67.8 200.54 200.54 0 0 0 149.36-65.42v-22.3h41.04l13.84-17.08V95.74l-8.28-10.24Zm-77.74 416.4v37.84h31.14v-65.56a202 202 0 0 1-31.14 27.72ZM313.6 273.14a203.1 203.1 0 0 0-4.92 21.56h13.5a122.64 122.64 0 0 0-8.58-21.56Z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#B72768\",\n  d: \"M410.4 294.7c-1.2-7.2-2.74-14.3-4.6-21.24a120 120 0 0 0-8.8 21.24 122.66 122.66 0 0 0-.6 69.7h14.32a223.18 223.18 0 0 0-.32-69.7ZM209.06 121.48c-101.637.008-188.552 73.092-206 173.22H91.4c15.736-51.233 63.065-86.196 116.66-86.18 44.579-.185 85.436 24.831 105.54 64.62a208.3 208.3 0 0 1 46.96-83.86 200.72 200.72 0 0 0-151.5-67.8Zm88.42 290.38a117.18 117.18 0 0 1-89.42 40.72c-54.369.018-102.188-35.942-117.26-88.18h217.54a210.32 210.32 0 0 1 .34-69.7H3.06a211.76 211.76 0 0 0-.34 69.7c16.61 101.042 103.942 175.195 206.34 175.2a200.72 200.72 0 0 0 151.5-67.86 209.02 209.02 0 0 1-38.56-60l-24.52.12Z\"\n}))));\nexport { SvgLogo as ReactComponent };\nexport default __webpack_public_path__ + \"36e7c65a02369e28ecc7ad327c4bfceb.svg\";","import React from 'react';\n\nimport { getConfig, getQueryParameters } from '@edx/frontend-platform';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Hyperlink } from '@edx/paragon';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport get from 'lodash.get';\nimport { getAuthenticatedHttpClient, getAuthenticatedUser } from '@edx/frontend-platform/auth';\n\nimport PageLoading from '../PageLoading';\nimport CoachingConsentForm from './CoachingConsentForm';\nimport messages from './CoachingConsent.messages';\nimport LogoSVG from '../../logo.svg';\nimport { fetchSettings } from '../data/actions';\nimport { coachingConsentPageSelector } from '../data/selectors';\n\nconst Logo = ({ src, alt, ...attributes }) => <img src={src} alt={alt} {...attributes} />;\n\nconst SuccessMessage = (props) => (\n  <div className=\"col-12 col-lg-6 shadow-lg mx-auto mt-4 p-5\">\n    <FontAwesomeIcon className=\"text-success\" icon={faCheck} size=\"5x\" />\n    <div className=\"h3\">{props.header}</div>\n    <div>{props.message}</div>\n    <Hyperlink destination={props.continueUrl} className=\"d-block p-2 my-3 text-center text-white bg-primary rounded\">\n      {props.continue}\n    </Hyperlink>\n  </div>\n);\n\nconst AutoRedirect = (props) => {\n  window.location.href = props.redirectUrl;\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  return <></>;\n};\n\nconst VIEWS = {\n  NOT_LOADED: 'NOT_LOADED',\n  LOADED: 'LOADED',\n  SUCCESS: 'SUCCESS',\n  SUCCESS_PENDING: 'SUCCESS_PENDING',\n  DECLINED: 'DECLINED',\n  DECLINE_PENDING: 'DECLINE_PENDING',\n};\n\nclass CoachingConsent extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    // Used to redirect back to the courseware.\n    const nextUrl = this.sanitizeForwardingUrl(getQueryParameters().next);\n    this.state = {\n      redirectUrl: nextUrl || `${getConfig().LMS_BASE_URL}/dashboard/`,\n      formErrors: {},\n      formSubmitted: false,\n      declineSubmitted: false,\n      submissionSuccess: false,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.declineCoaching = this.declineCoaching.bind(this);\n    this.patchUsingCoachingConsentForm = this.patchUsingCoachingConsentForm.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchSettings();\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const fullName = e.target.fullName.value;\n    const phoneNumber = e.target.phoneNumber.value;\n    const body = {\n      coaching_consent: true,\n      consent_form_seen: true,\n      phone_number: phoneNumber,\n      full_name: fullName,\n    };\n    this.setState({\n      formErrors: {},\n      formSubmitted: true,\n      declineSubmitted: false,\n    }, () => this.patchUsingCoachingConsentForm(body));\n  }\n\n  sanitizeForwardingUrl(url) {\n    // Redirect to root of MFE if invalid next param is sent\n    return url && url.startsWith(getConfig().LMS_BASE_URL) ? url : `${getConfig().LMS_BASE_URL}/dashboard/`;\n  }\n\n  async patchUsingCoachingConsentForm(body) {\n    const { userId } = getAuthenticatedUser();\n    const requestUrl = `${getConfig().LMS_BASE_URL}/api/coaching/v1/coaching_consent/${userId}/`;\n    let formErrors = {};\n    const data = await getAuthenticatedHttpClient()\n      .patch(requestUrl, body)\n      .catch((error) => {\n        if (get(error, 'customAttributes.httpErrorResponseData')) {\n          formErrors = JSON.parse(error.customAttributes.httpErrorResponseData);\n        } else {\n          formErrors = { full_name: 'Something went wrong. Please try again.' };\n        }\n        this.setState({\n          submissionSuccess: false,\n          formErrors,\n          formSubmitted: false,\n        });\n      });\n    if (get(data, 'status') === 200) {\n      this.setState({ submissionSuccess: true });\n    }\n  }\n\n  declineCoaching(e) {\n    e.preventDefault();\n    const body = {\n      coaching_consent: false,\n      consent_form_seen: true,\n    };\n    this.setState({\n      formErrors: {},\n      formSubmitted: false,\n      declineSubmitted: true,\n    }, () => this.patchUsingCoachingConsentForm(body));\n  }\n\n  renderView(currentView) {\n    switch (currentView) {\n      case VIEWS.NOT_LOADED:\n        return <PageLoading srMessage=\"\" />;\n      case VIEWS.LOADED:\n        return (\n          <CoachingConsentForm\n            onSubmit={this.handleSubmit}\n            declineCoaching={this.declineCoaching}\n            formErrors={this.state.formErrors}\n            formValues={this.props.formValues}\n            redirectUrl={this.state.redirectUrl}\n            profileDataManager={this.props.profileDataManager}\n          />\n        );\n      case VIEWS.SUCCESS_PENDING:\n        return <PageLoading srMessage=\"Submitting...\" />;\n      case VIEWS.SUCCESS:\n        return (\n          <SuccessMessage\n            continueUrl={this.state.redirectUrl}\n            header={this.props.intl.formatMessage(messages['account.settings.coaching.consent.success.header'])}\n            message={this.props.intl.formatMessage(messages['account.settings.coaching.consent.success.message'])}\n            continue={this.props.intl.formatMessage(messages['account.settings.coaching.consent.success.continue'])}\n          />\n        );\n      case VIEWS.DECLINE_PENDING:\n        return <PageLoading srMessage=\"Redirecting...\" />;\n      case VIEWS.DECLINED:\n        return <AutoRedirect redirectUrl={this.state.redirectUrl} />;\n      default:\n        // eslint-disable-next-line react/jsx-no-useless-fragment\n        return <></>;\n    }\n  }\n\n  render() {\n    const { loaded } = this.props;\n    const formHasErrors = Object.keys(this.state.formErrors).length > 0;\n    let currentView = null;\n    // This amount of logic was making the template very hard to read, so I broke it out into views.\n    if (!loaded) {\n      currentView = VIEWS.NOT_LOADED;\n    } else if (this.state.formSubmitted && !formHasErrors) {\n      if (this.state.submissionSuccess) {\n        currentView = VIEWS.SUCCESS;\n      } else {\n        currentView = VIEWS.SUCCESS_PENDING;\n      }\n    } else if (this.state.declineSubmitted && !formHasErrors) {\n      if (this.state.submissionSuccess) {\n        currentView = VIEWS.DECLINED;\n      } else {\n        currentView = VIEWS.DECLINE_PENDING;\n      }\n    } else {\n      currentView = VIEWS.LOADED;\n    }\n\n    return (\n      <main>\n        <div className=\"w-100 d-flex justify-content-center align-items-center shadow coaching-header\">\n          <Logo\n            className=\"logo\"\n            src={LogoSVG}\n            alt=\"Logo\"\n          />\n        </div>\n        {this.renderView(currentView)}\n      </main>\n    );\n  }\n}\n\nLogo.defaultProps = {\n  src: '',\n  alt: '',\n};\n\nLogo.propTypes = {\n  src: PropTypes.string,\n  alt: PropTypes.string,\n};\n\nSuccessMessage.defaultProps = {\n  header: '',\n  message: '',\n  continueUrl: '',\n  continue: '',\n};\n\nSuccessMessage.propTypes = {\n  header: PropTypes.string,\n  message: PropTypes.string,\n  continueUrl: PropTypes.string,\n  continue: PropTypes.string,\n};\n\nAutoRedirect.defaultProps = {\n  redirectUrl: '',\n};\n\nAutoRedirect.propTypes = {\n  redirectUrl: PropTypes.string,\n};\n\nCoachingConsent.defaultProps = {\n  loaded: false,\n  profileDataManager: null,\n};\n\nCoachingConsent.propTypes = {\n  intl: intlShape.isRequired,\n  loaded: PropTypes.bool,\n  formValues: PropTypes.shape({\n    name: PropTypes.string,\n    phone_number: PropTypes.string,\n    coaching: PropTypes.shape({\n      coaching_consent: PropTypes.bool.isRequired,\n      user: PropTypes.number.isRequired,\n      eligible_for_coaching: PropTypes.bool.isRequired,\n      consent_form_seen: PropTypes.bool.isRequired,\n    }),\n  }).isRequired,\n  formErrors: PropTypes.shape({\n    coaching: PropTypes.shape({}),\n  }).isRequired,\n  confirmationValues: PropTypes.shape({\n    coaching: PropTypes.shape({}),\n    name: PropTypes.shape({}),\n    phone_number: PropTypes.shape({}),\n  }).isRequired,\n  fetchSettings: PropTypes.func.isRequired,\n  profileDataManager: PropTypes.string,\n};\n\nexport default connect(coachingConsentPageSelector, {\n  fetchSettings,\n})(injectIntl(CoachingConsent));\n","import { messages as headerMessages } from '@edx/frontend-component-header';\nimport { messages as footerMessages } from '@edx/frontend-component-footer';\nimport { messages as paragonMessages } from '@edx/paragon';\nimport arMessages from './messages/ar.json';\nimport deMessages from './messages/de.json';\nimport es419Messages from './messages/es_419.json';\nimport faIRMessages from './messages/fa_IR.json';\nimport frMessages from './messages/fr.json';\nimport frCAMessages from './messages/fr_CA.json';\nimport hiMessages from './messages/hi.json';\nimport itMessages from './messages/it.json';\nimport ptMessages from './messages/pt.json';\nimport ruMessages from './messages/ru.json';\nimport ukMessages from './messages/uk.json';\nimport zhcnMessages from './messages/zh_CN.json';\nimport dedeCAMessages from './messages/de_DE.json';\nimport ititCAMessages from './messages/it_IT.json';\nimport ptptCAMessages from './messages/pt_PT.json';\n// no need to import en messages-- they are in the defaultMessage field\n\nconst appMessages = {\n  ar: arMessages,\n  'es-419': es419Messages,\n  'fa-ir': faIRMessages,\n  fr: frMessages,\n  'zh-cn': zhcnMessages,\n  pt: ptMessages,\n  it: itMessages,\n  de: deMessages,\n  hi: hiMessages,\n  'fr-ca': frCAMessages,\n  ru: ruMessages,\n  uk: ukMessages,\n  'de-de': dedeCAMessages,\n  'it-it': ititCAMessages,\n  'pt-pt': ptptCAMessages,\n};\n\nexport default [\n  headerMessages,\n  paragonMessages,\n  footerMessages,\n  appMessages,\n];\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  'account.page.title': {\n    id: 'account.page.title',\n    defaultMessage: 'Account | {siteName}',\n    description: 'Title tag',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport messages from './messages';\n\nconst Head = ({ intl }) => (\n  <Helmet>\n    <title>\n      {intl.formatMessage(messages['account.page.title'], { siteName: getConfig().SITE_NAME })}\n    </title>\n    <link rel=\"shortcut icon\" href={getConfig().FAVICON_URL} type=\"image/x-icon\" />\n  </Helmet>\n);\n\nHead.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(Head);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const messages = defineMessages({\n  notificationHeading: {\n    id: 'notification.preference.heading',\n    defaultMessage: 'Notifications',\n    description: 'Notification title',\n  },\n  notificationAppTitle: {\n    id: 'notification.preference.app.title',\n    defaultMessage: `{\n        key, select,\n        discussion {Discussions}\n        coursework {Course Work}\n        other {{key}}\n    }`,\n    description: 'Display text for Notification Types',\n  },\n  notificationTitle: {\n    id: 'notification.preference.title',\n    defaultMessage: `{\n        text, select,\n        core {Core}\n        newPost {New Post}\n        newComment {New Comment}\n        newResponse {New Response}\n        newCommentOnPost {New Comment On Post}\n        newResponseOnComment {New Response On Comment}\n        newAssignment {New Assignment}\n        newGrade {New Grade}\n        other {{text}}\n    }`,\n    description: 'Display text for Notification Types',\n  },\n  notificationHelpType: {\n    id: 'notification.preference.help.type',\n    defaultMessage: 'Type',\n    description: 'Display text for type',\n  },\n  notificationHelpWeb: {\n    id: 'notification.preference.help.web',\n    defaultMessage: 'Web',\n    description: 'Display text for web',\n  },\n  notificationHelpEmail: {\n    id: 'notification.preference.help.email',\n    defaultMessage: 'Email',\n    description: 'Display text for email',\n  },\n  notificationHelpPush: {\n    id: 'notification.preference.help.push',\n    defaultMessage: 'Push',\n    description: 'Display text for push',\n  },\n  loadMoreCourses: {\n    id: 'notification.preference.load.more.courses',\n    defaultMessage: 'Load more courses',\n    description: 'Load more button to load more courses',\n  },\n});\n","import React, { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Container, Icon, Spinner, Button,\n} from '@edx/paragon';\nimport { ArrowForwardIos } from '@edx/paragon/icons';\nimport { fetchCourseList } from './data/thunks';\nimport { selectCourseListStatus, selectCourseList, selectPagination } from './data/selectors';\nimport {\n  IDLE_STATUS,\n  LOADING_STATUS,\n  SUCCESS_STATUS,\n} from '../constants';\nimport { messages } from './messages';\nimport { NotFoundPage } from '../account-settings';\n\nconst NotificationCourses = ({ intl }) => {\n  const dispatch = useDispatch();\n  const coursesList = useSelector(selectCourseList());\n  const courseListStatus = useSelector(selectCourseListStatus());\n  const { hasMore, currentPage } = useSelector(selectPagination());\n\n  const loadMore = useCallback((page = 1, pageSize = 10) => {\n    dispatch(fetchCourseList(page, pageSize));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (courseListStatus === IDLE_STATUS) { loadMore(); }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (courseListStatus === SUCCESS_STATUS && coursesList.length === 0) {\n    return <NotFoundPage />;\n  }\n\n  return (\n    <Container size=\"md\">\n      <h2 className=\"notification-heading mt-6 mb-5.5\">\n        {intl.formatMessage(messages.notificationHeading)}\n      </h2>\n      <div data-testid=\"courses-list\">\n        {coursesList.map(course => (\n          <Link\n            key={course.id}\n            to={`/notifications/${course.id}`}\n          >\n            <div className=\"mb-4 d-flex text-gray-700\">\n              <span className=\"ml-0 mr-auto\">\n                {course.name}\n              </span>\n              <span className=\"ml-auto mr-0\">\n                <Icon src={ArrowForwardIos} />\n              </span>\n            </div>\n          </Link>\n        ))}\n      </div>\n      {courseListStatus === LOADING_STATUS ? (\n        <div className=\"d-flex\">\n          <Spinner\n            variant=\"primary\"\n            animation=\"border\"\n            className=\"mx-auto my-auto\"\n            size=\"lg\"\n            data-testid=\"loading-spinner\"\n          />\n        </div>\n      ) : hasMore && (\n        <Button variant=\"primary\" className=\"w-100 bg-primary-500\" onClick={() => loadMore(currentPage + 1)}>\n          {intl.formatMessage(messages.loadMoreCourses)}\n        </Button>\n      )}\n    </Container>\n  );\n};\n\nNotificationCourses.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(NotificationCourses);\n","import { Form } from '@edx/paragon';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ToggleSwitch = ({\n  name,\n  value,\n  disabled,\n  onChange,\n}) => (\n  <Form.Switch\n    name={name}\n    checked={value}\n    disabled={disabled}\n    onChange={onChange}\n  />\n);\n\nToggleSwitch.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.bool.isRequired,\n  disabled: PropTypes.bool,\n  onChange: PropTypes.func,\n};\n\nToggleSwitch.defaultProps = {\n  onChange: () => null,\n  disabled: false,\n};\n\nexport default React.memo(ToggleSwitch);\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Icon, OverlayTrigger, Tooltip } from '@edx/paragon';\nimport { InfoOutline } from '@edx/paragon/icons';\nimport { messages } from './messages';\nimport ToggleSwitch from './ToggleSwitch';\nimport {\n  selectPreference,\n  selectPreferenceNonEditableChannels,\n  selectSelectedCourseId,\n} from './data/selectors';\nimport { updatePreferenceToggle } from './data/thunks';\n\nconst NotificationPreferenceRow = ({ appId, preferenceName }) => {\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const courseId = useSelector(selectSelectedCourseId());\n  const preference = useSelector(selectPreference(appId, preferenceName));\n  const nonEditable = useSelector(selectPreferenceNonEditableChannels(appId, preferenceName));\n\n  const onToggle = useCallback((event) => {\n    const {\n      checked,\n      name: notificationChannel,\n    } = event.target;\n    dispatch(updatePreferenceToggle(\n      courseId,\n      appId,\n      preferenceName,\n      notificationChannel,\n      checked,\n    ));\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [appId, preferenceName]);\n\n  const tooltipId = `${preferenceName}-tooltip`;\n  return (\n    <div className=\"d-flex flex-row mb-3\" data-testid=\"notification-preference\">\n      <span className=\"d-flex align-items-center col-8 px-0\">\n        {intl.formatMessage(messages.notificationTitle, { text: preferenceName })}\n        {\n          preference.info !== '' && (\n            <OverlayTrigger\n              id={tooltipId}\n              className=\"d-inline\"\n              placement=\"top\"\n              overlay={(\n                <Tooltip id={tooltipId}>\n                  {preference.info}\n                </Tooltip>\n              )}\n            >\n              <span className=\"ml-2\">\n                <Icon src={InfoOutline} />\n              </span>\n            </OverlayTrigger>\n          )\n        }\n      </span>\n      <span className=\"d-flex col-4 px-0\">\n        {\n          ['web', 'email', 'push'].map((channel) => (\n            <span\n              id={`${preferenceName}-${channel}`}\n              className={classNames(\n                { 'ml-0 mr-auto': channel === 'web' },\n                { 'mx-auto': channel === 'email' },\n                { 'ml-auto mr-0': channel === 'push' },\n              )}\n            >\n              <ToggleSwitch\n                name={channel}\n                value={preference[channel]}\n                onChange={onToggle}\n                disabled={nonEditable.includes(channel)}\n              />\n            </span>\n          ))\n        }\n      </span>\n    </div>\n  );\n};\n\nNotificationPreferenceRow.propTypes = {\n  appId: PropTypes.string.isRequired,\n  preferenceName: PropTypes.string.isRequired,\n};\n\nexport default React.memo(NotificationPreferenceRow);\n","import React, { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Collapsible } from '@edx/paragon';\nimport { messages } from './messages';\nimport ToggleSwitch from './ToggleSwitch';\nimport {\n  selectPreferenceAppToggleValue,\n  selectPreferencesOfApp,\n  selectSelectedCourseId,\n} from './data/selectors';\nimport NotificationPreferenceRow from './NotificationPreferenceRow';\nimport { updateAppPreferenceToggle } from './data/thunks';\n\nconst NotificationPreferenceApp = ({ appId }) => {\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const courseId = useSelector(selectSelectedCourseId());\n  const appPreferences = useSelector(selectPreferencesOfApp(appId));\n  const appToggle = useSelector(selectPreferenceAppToggleValue(appId));\n\n  const preferences = useMemo(() => (\n    appPreferences.map(preference => (\n      <NotificationPreferenceRow\n        key={preference.id}\n        appId={appId}\n        preferenceName={preference.id}\n      />\n    ))), [appId, appPreferences]);\n\n  const onChangeAppSettings = useCallback((event) => {\n    dispatch(updateAppPreferenceToggle(courseId, appId, event.target.checked));\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [appId]);\n\n  if (!courseId) {\n    return null;\n  }\n  return (\n    <Collapsible.Advanced open={appToggle} data-testid=\"notification-app\">\n      <Collapsible.Trigger>\n        <div className=\"d-flex\">\n          <span className=\"ml-0 mr-auto\">\n            {intl.formatMessage(messages.notificationAppTitle, { key: appId })}\n          </span>\n          <span id={`${appId}-app-toggle`} className=\"ml-auto mr-0\">\n            <ToggleSwitch\n              name={appId}\n              value={appToggle}\n              onChange={onChangeAppSettings}\n            />\n          </span>\n        </div>\n        <hr />\n      </Collapsible.Trigger>\n      <Collapsible.Body>\n        <div className=\"d-flex flex-row notification-help-text\">\n          <span className=\"col-8 px-0\">{intl.formatMessage(messages.notificationHelpType)}</span>\n          <span className=\"d-flex col-4 px-0\">\n            <span className=\"ml-0 mr-auto\">{intl.formatMessage(messages.notificationHelpWeb)}</span>\n            <span className=\"mx-auto\">{intl.formatMessage(messages.notificationHelpEmail)}</span>\n            <span className=\"ml-auto mr-0 pr-2.5\">{intl.formatMessage(messages.notificationHelpPush)}</span>\n          </span>\n        </div>\n        <div className=\"mt-3 pb-5\">\n          { preferences }\n        </div>\n      </Collapsible.Body>\n    </Collapsible.Advanced>\n  );\n};\n\nNotificationPreferenceApp.propTypes = {\n  appId: PropTypes.string.isRequired,\n};\n\nexport default React.memo(NotificationPreferenceApp);\n","import React, { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Container, Icon, Spinner } from '@edx/paragon';\nimport { ArrowBack } from '@edx/paragon/icons';\nimport {\n  selectCourseListStatus,\n  selectCourse,\n  selectPreferenceAppsId,\n  selectNotificationPreferencesStatus,\n  selectCourseList,\n} from './data/selectors';\nimport { fetchCourseList, fetchCourseNotificationPreferences } from './data/thunks';\nimport { messages } from './messages';\nimport NotificationPreferenceApp from './NotificationPreferenceApp';\nimport {\n  FAILURE_STATUS,\n  IDLE_STATUS,\n  LOADING_STATUS,\n  SUCCESS_STATUS,\n} from '../constants';\nimport { NotFoundPage } from '../account-settings';\n\nconst NotificationPreferences = () => {\n  const { courseId } = useParams();\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const courseStatus = useSelector(selectCourseListStatus());\n  const coursesList = useSelector(selectCourseList());\n  const course = useSelector(selectCourse(courseId));\n  const notificationStatus = useSelector(selectNotificationPreferencesStatus());\n  const preferenceAppsIds = useSelector(selectPreferenceAppsId());\n  const isLoading = notificationStatus === LOADING_STATUS || courseStatus === LOADING_STATUS;\n\n  const preferencesList = useMemo(() => (\n    preferenceAppsIds.map(appId => (\n      <NotificationPreferenceApp appId={appId} key={appId} />\n    ))\n  ), [preferenceAppsIds]);\n\n  useEffect(() => {\n    if ([IDLE_STATUS, FAILURE_STATUS].includes(courseStatus)) {\n      dispatch(fetchCourseList());\n    }\n    dispatch(fetchCourseNotificationPreferences(courseId));\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [courseId]);\n\n  if (\n    (courseStatus === SUCCESS_STATUS && coursesList.length === 0)\n    || (notificationStatus === FAILURE_STATUS && coursesList.length !== 0)\n  ) {\n    return <NotFoundPage />;\n  }\n\n  return (\n    <Container size=\"md\">\n      <h2 className=\"notification-heading mt-6 mb-5.5\">\n        {intl.formatMessage(messages.notificationHeading)}\n      </h2>\n      <div className=\"h-100\">\n        <div className=\"d-flex mb-4\">\n          <Link to=\"/notifications\">\n            <Icon className=\"d-inline-block align-bottom ml-1\" src={ArrowBack} />\n          </Link>\n          <span className=\"notification-course-title ml-auto mr-auto\">\n            {course?.name}\n          </span>\n        </div>\n        {preferencesList}\n        {isLoading && (\n        <div className=\"d-flex\">\n          <Spinner\n            variant=\"primary\"\n            animation=\"border\"\n            className=\"mx-auto my-auto\"\n            size=\"lg\"\n            data-testid=\"loading-spinner\"\n          />\n        </div>\n        )}\n      </div>\n    </Container>\n  );\n};\n\nexport default NotificationPreferences;\n","import 'core-js/stable';\nimport 'regenerator-runtime/runtime';\n\nimport 'formdata-polyfill';\nimport { AppProvider, ErrorPage } from '@edx/frontend-platform/react';\nimport {\n  subscribe, initialize, APP_INIT_ERROR, APP_READY, mergeConfig,\n} from '@edx/frontend-platform';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Header from '@edx/frontend-component-header';\nimport Footer from '@edx/frontend-component-footer';\n\nimport configureStore from './data/configureStore';\nimport AccountSettingsPage, { NotFoundPage } from './account-settings';\nimport IdVerificationPage from './id-verification';\nimport CoachingConsent from './account-settings/coaching/CoachingConsent';\nimport messages from './i18n';\n\nimport './index.scss';\nimport Head from './head/Head';\nimport NotificationCourses from './notification-preferences/NotificationCourses';\nimport NotificationPreferences from './notification-preferences/NotificationPreferences';\n\nsubscribe(APP_READY, () => {\n  ReactDOM.render(\n    <AppProvider store={configureStore()}>\n      <Head />\n      <Switch>\n        <Route path=\"/coaching_consent\" component={CoachingConsent} />\n        <div className=\"d-flex flex-column\" style={{ minHeight: '100vh' }}>\n          <Header />\n          <main className=\"flex-grow-1\">\n            <Switch>\n              <Route path=\"/notifications/:courseId\" component={NotificationPreferences} />\n              <Route path=\"/notifications\" component={NotificationCourses} />\n              <Route path=\"/id-verification\" component={IdVerificationPage} />\n              <Route exact path=\"/\" component={AccountSettingsPage} />\n              <Route path=\"/notfound\" component={NotFoundPage} />\n              <Route path=\"*\" component={NotFoundPage} />\n            </Switch>\n          </main>\n          <Footer />\n        </div>\n      </Switch>\n    </AppProvider>,\n    document.getElementById('root'),\n  );\n});\n\nsubscribe(APP_INIT_ERROR, (error) => {\n  ReactDOM.render(<ErrorPage message={error.message} />, document.getElementById('root'));\n});\n\ninitialize({\n  messages,\n  requireAuthenticatedUser: true,\n  hydrateAuthenticatedUser: true,\n  handlers: {\n    config: () => {\n      mergeConfig({\n        SUPPORT_URL: process.env.SUPPORT_URL,\n        COACHING_ENABLED: (process.env.COACHING_ENABLED || false),\n        ENABLE_DEMOGRAPHICS_COLLECTION: (process.env.ENABLE_DEMOGRAPHICS_COLLECTION || false),\n        DEMOGRAPHICS_BASE_URL: process.env.DEMOGRAPHICS_BASE_URL,\n        ENABLE_COPPA_COMPLIANCE: (process.env.ENABLE_COPPA_COMPLIANCE || false),\n        ENABLE_DOB_UPDATE: (process.env.ENABLE_DOB_UPDATE || false),\n        MARKETING_EMAILS_OPT_IN: (process.env.MARKETING_EMAILS_OPT_IN || false),\n        PASSWORD_RESET_SUPPORT_LINK: process.env.PASSWORD_RESET_SUPPORT_LINK,\n      }, 'App loadConfig override handler');\n    },\n  },\n});\n"],"names":["defineMessages","id","defaultMessage","description","AsyncActionType","constructor","topic","name","this","BASE","BEGIN","SUCCESS","FAILURE","RESET","FORBIDDEN","getModuleState","state","originalPath","path","length","key","shift","undefined","Error","handleFailure","error","failureAction","arguments","failureRedirectPath","fieldErrors","put","logError","message","history","push","unpackFieldErrors","Object","entries","reduce","acc","_ref","k","v","user_message","handleRequestError","unpackFunction","response","data","field_errors","apiError","create","FETCH_SETTINGS","SAVE_SETTINGS","SAVE_MULTIPLE_SETTINGS","FETCH_TIME_ZONES","SAVE_PREVIOUS_SITE_LANGUAGE","OPEN_FORM","CLOSE_FORM","UPDATE_DRAFT","RESET_DRAFTS","BEGIN_NAME_CHANGE","fetchSettings","type","fetchSettingsBegin","fetchSettingsSuccess","values","thirdPartyAuthProviders","profileDataManager","timeZones","verifiedNameHistory","payload","fetchSettingsFailure","openForm","formId","closeForm","updateDraft","value","beginNameChange","saveSettings","commitValues","saveSettingsBegin","saveSettingsSuccess","confirmationValues","saveSettingsReset","saveSettingsFailure","_ref2","errors","savePreviousSiteLanguage","previousSiteLanguage","saveMultipleSettings","settingsArray","form","saveMultipleSettingsBegin","saveMultipleSettingsSuccess","saveMultipleSettingsFailure","_ref3","fetchTimeZones","country","fetchTimeZonesSuccess","FETCH_SITE_LANGUAGES","fetchSiteLanguagesBegin","fetchSiteLanguagesSuccess","siteLanguageList","fetchSiteLanguagesFailure","defaultState","loading","loaded","loadingError","action","_objectSpread","code","released","async","getSiteLanguageList","patchPreferences","username","params","processedParams","snakeCaseObject","convertKeyNames","pref_lang","getAuthenticatedHttpClient","patch","getConfig","LMS_BASE_URL","headers","postSetLang","formData","FormData","append","post","handleFetchSiteLanguages","call","e","saga","takeEvery","storePath","siteLanguageSelector","siteLanguageListSelector","createSelector","siteLanguage","siteLanguageOptionsSelector","map","label","compareVerifiedNamesByCreatedDate","a","b","aTimeSinceEpoch","Date","created","getTime","storeName","accountSettingsSelector","editableFieldNameSelector","props","verifiedNameSettingsSelector","accountSettings","results","useVerifiedNameForCerts","use_verified_name_for_certs","sortedVerifiedNameHistorySelector","verifiedNameSettings","Array","isArray","sort","mostRecentVerifiedNameSelector","sortedHistory","mostRecentApprovedVerifiedNameValueSelector","mostRecentVerifiedName","approvedVerifiedNames","filter","status","approvedVerifiedName","verifiedName","valuesSelector","mostRecentApprovedVerifiedNameValue","keys","includes","verified_name","draftsSelector","drafts","previousSiteLanguageSelector","editableFieldErrorSelector","editableFieldConfirmationValuesSelector","isEditingSelector","openFormId","confirmationValuesSelector","errorSelector","nameChangeModalSelector","nameChangeModal","saveStateSelector","saveState","editableFieldSelector","createStructuredSelector","confirmationValue","isEditing","profileDataManagerSelector","staticFieldsSelector","staticFields","chooseFormValue","draft","committed","formValuesSelector","formValues","forEach","transformTimeZonesToOptions","timeZoneArr","time_zone","timeZonesSelector","countryTimeZonesSelector","countryTimeZones","activeAccountSelector","is_active","previousValue","betaLanguageBannerSelector","accountSettingsPageSelector","siteLanguageOptions","committedValues","formErrors","timeZoneOptions","countryTimeZoneOptions","activeAccount","isActive","tpaProviders","thirdPartyAuth","providers","certPreferenceSelector","originalFullName","originalVerifiedName","coachingConsentPageSelector","demographicsSectionSelector","nameChangeSelector","nameChange","PageLoading","Component","renderSrMessage","srMessage","_jsx","className","children","render","style","height","role","propTypes","PropTypes","isRequired","JumpNav","intl","displayDemographicsLink","stickToTop","useWindowSize","width","breakpoints","small","minWidth","showPreferences","useSelector","notificationPreferences","_jsxs","classNames","Scrollspy","items","currentClassName","NavHashLink","to","formatMessage","messages","ENABLE_DEMOGRAPHICS_COLLECTION","_Fragment","Link","target","rel","Icon","src","OpenInNew","intlShape","injectIntl","DELETE_ACCOUNT","CONFIRMATION","CANCEL","deleteAccountBegin","deleteAccountSuccess","deleteAccountFailure","reason","Alert","icon","defaultProps","PrintingInstructions","actionLink","Hyperlink","destination","SITE_NAME","FormattedMessage","ConfirmationModal","getShortErrorMessageId","renderError","errorType","headerMessageId","detailsMessageId","FontAwesomeIcon","faExclamationCircle","onCancel","onChange","onSubmit","password","open","passwordFieldId","invalidMessage","deleteAccountModalText2MessageKey","AlertModal","isOpen","title","onClose","footerNode","ActionRow","Button","variant","onClick","faExclamationTriangle","siteName","ValidationFormGroup","for","invalid","htmlFor","Input","SuccessModal","ModalLayer","ModalCloseButton","BeforeProceedingBanner","instructionMessageId","supportArticleUrl","DeleteAccount","React","super","_defineProperty","deleteAccount","setState","deleteAccountCancel","trim","deleteAccountReset","global","location","LOGOUT_URL","hasLinkedTPA","isVerifiedAccount","canDelete","deleteAccountText2MessageKey","optInInstructionMessageId","MARKETING_EMAILS_OPT_IN","deleteAccountConfirmation","disabled","ConnectedConfirmationModal","handleSubmit","handleCancel","handlePasswordChange","ConnectedSuccessModal","handleFinalClose","connect","oldStatus","postDeleteAccount","formurlencoded","catch","handleDeleteAccount","onChildExit","htmlNode","contains","document","activeElement","enteringChild","previousSibling","nextSibling","focusableElements","querySelectorAll","focus","SwitchContent","expression","cases","getContent","caseKey","default","TransitionReplace","CertificatePreference","fieldName","dispatch","useDispatch","checked","setChecked","useState","modalIsOpen","setModalIsOpen","useEffect","Form","Checkbox","handleCheckboxChange","ModalDialog","size","hasCloseButton","isFullscreenOnMobile","preventDefault","Header","Title","Body","Group","Label","RadioSet","Radio","Footer","CloseButton","commonMessages","StatefulButton","labels","disabledStates","EditableField","emptyLabel","userSuppliedValue","confirmationMessageDefinition","helpText","onEdit","isEditable","isGrayedOut","others","_objectWithoutProperties","_excluded","handleEdit","editing","get","controlId","isInvalid","Control","Text","Feedback","hasIcon","faPencilAlt","rawValue","finalValue","renderValue","EditableSelectField","options","selectOptions","option","as","selectedOption","find","RESET_PASSWORD","resetPasswordBegin","resetPasswordSuccess","resetPasswordForbidden","ConfirmationAlert","email","technicalSupportLink","PASSWORD_RESET_SUPPORT_LINK","RequestInProgressAlert","ResetPassword","resetPassword","postResetPassword","handleResetPassword","REQUEST_NAME_CHANGE","requestNameChangeBegin","requestNameChangeSuccess","requestNameChangeFailure","NameChangeModal","targetFormId","useHistory","getAuthenticatedUser","verifiedNameInput","setVerifiedNameInput","confirmedWarning","setConfirmedWarning","resetLocalState","useCallback","handleClose","renderTitle","encodeURIComponent","draftProfileName","requestNameChange","profileName","Col","placeholder","general_error","DISCONNECT_AUTH","disconnectAuthBegin","providerId","disconnectAuthSuccess","disconnectAuthFailure","disconnectAuthReset","ThirdPartyAuth","currentTarget","getAttribute","disconnectionStatuses","disconnectUrl","disconnectAuth","renderUnconnectedProvider","url","renderConnectedProvider","hasError","onClickDisconnect","renderProvider","connectUrl","connected","renderNoProviders","getThirdPartyAuthProviders","connect_url","disconnect_url","postDisconnectAuth","handleDisconnectAuth","getCoachingPreferences","userId","coaching_consent","user","eligible_for_coaching","consent_form_seen","TO","FROM","DEMOGRAPHICS_FIELDS","convertData","dataObject","direction","converted","newValue","ethnicityData","ethnicity","convertEthnicity","replace","createDemographicsError","JSON","parse","customAttributes","httpErrorResponseData","demographics_gender","gender_description","demographics_work_status","work_status_description","demographicsError","httpErrorType","getDemographics","requestUrl","DEMOGRAPHICS_BASE_URL","httpErrorStatus","postDemographics","demographics_gender_description","demographics_income","demographics_learner_education_level","demographics_parent_education_level","demographics_military_history","demographics_work_status_description","demographics_current_work_sector","demographics_future_work_sector","demographics_user_ethnicity","getDemographicsOptions","SOCIAL_PLATFORMS","unpackAccountResponseData","unpackedData","platformData","social_links","platform","social_link","language_proficiencies","getAccount","getPreferences","getTimeZones","forCountry","country_code","getProfileDataManager","userRoles","split","enterprise","enterprise_customer","sync_learner_profile_data","shouldDisplayDemographicsQuestions","display","getVerifiedNameHistory","client","postVerifiedName","Accept","getSettings","account","preferences","coaching","shouldDisplayDemographicsQuestionsResponse","demographics","demographicsOptions","Promise","all","COACHING_ENABLED","shouldDisplayDemographicsSection","patchSettings","preferenceKeys","coachingKeys","demographicsKeys","certificateKeys","accountCommitValues","omit","preferenceCommitValues","pick","coachingCommitValues","demographicsCommitValues","pickBy","isDemographicsKey","certCommitValues","patchRequests","isEmpty","commitData","packedData","year_of_birth","packAccountCommitData","unpackedFieldErrors","_ref4","patchAccount","phone_number","patchCoachingPreferences","convertedCommitValues","patchDemographics","postValues","postVerifiedNameConfig","assign","postNameChange","handleRequestNameChange","profile_name","err","YEAR_OF_BIRTH_OPTIONS","currentYear","getFullYear","years","startYear","reverse","COPPA_COMPLIANCE_YEAR","EDUCATION_LEVELS","GENDER_OPTIONS","COUNTRY_STATES_MAP","CA","US","getStatesList","toUpperCase","DECLINED","BetaLanguageBanner","getSiteLanguageEntry","languageCode","l","getTransifexLink","getTransifexURLPath","tokenizedCode","savedLanguage","context","locale","isSavedLanguageReleased","noPreviousLanguageSet","previousLanguage","beta_language","handleRevertLanguage","previous_language","contextType","AppContext","EmailField","OneTimeDismissibleAlert","dismissed","setDismissed","localStorage","getItem","dismissible","setItem","show","Heading","header","body","DOBModal","close","toggle","useToggle","monthValue","setMonthValue","yearValue","setYearValue","handleChange","handleComplete","field_name","field_value","padding","month","year","CoachingToggle","Switch","helperText","Checkboxes","selected","setSelected","index","isFirst","isChecked","autoFocus","event","handleToggle","newSelected","i","concat","DemographicsSection","memoize","hasRetrievedDemographicsOptions","demographicsGenderOptions","addDefaultOption","actions","POST","gender","choices","display_name","demographicsEthnicityOptions","user_ethnicity","child","demographicsIncomeOptions","income","demographicsMilitaryHistoryOptions","military_history","demographicsEducationLevelOptions","learner_education_level","demographicsWorkStatusOptions","work_status","demographicsWorkSectorOptions","current_work_sector","ethnicities","matchingOption","join","field","messageId","renderDemographicsServiceIssueWarning","tabIndex","ref","alertRef","editableFieldProps","handleEditableFieldChange","getApiOptions","showSelfDescribe","showWorkStatusDescribe","forwardRef","MARKETING_SITE_BASE_URL","hidden","ethnicityFieldDisplay","Actions","fetchNotificationPreferenceSuccess","courseId","fetchNotificationPreferenceFailed","updatePreferenceValue","appId","preferenceName","notificationChannel","updateAppToggle","normalizePreferences","responseData","notificationPreferenceConfig","appKeys","apps","enabled","nonEditable","flatPreferences","notificationTypes","preferenceId","web","info","flat","fetchCourseList","page","pageSize","getCourseList","normalizedData","camelCaseObject","courseList","enrollment","course","displayName","pagination","count","currentPage","hasMore","Boolean","next","totalPages","numPages","AccountSettingsPage","concatTimeZoneOptions","group","countryOptions","getCountryList","stateOptions","languageProficiencyOptions","getLanguageList","yearOfBirthOptions","educationLevelOptions","genderOptions","proctoredExamId","messageString","valueOf","CheckCircle","href","willCertNameChange","WarningFilled","verifiedNameRecord","proctored_exam_attempt_id","renderVerifiedNameSuccessMessage","renderVerifiedNameFailureMessage","renderVerifiedNameSubmittedMessage","color","messageStr","duplicateTpaProvider","getQueryParameters","duplicate_provider","pathname","navLinkRefs","componentDidMount","fetchSiteLanguages","sendTrackingLogEvent","visibility","user_id","authenticatedUser","componentDidUpdate","prevProps","locationHash","hash","current","window","scrollTo","offsetTop","isManagedProfile","renderDuplicateTpaProviderMessage","provider","renderManagedProfileMessage","managerTitle","support","SUPPORT_URL","renderEmptyStaticFieldMessage","renderNameChangeModal","NameChange","renderSecondaryEmailField","secondary_email_enabled","secondary_email","renderDemographicsSection","renderContent","getLocalizedOptions","showState","getLocalizedTimeZoneOptions","findIndex","shouldUpdateDOB","ENABLE_COPPA_COMPLIANCE","ENABLE_DOB_UPDATE","toString","renderVerifiedNameMessage","pending_name_change","renderFullNameHelpText","handleSubmitProfileName","renderVerifiedNameIcon","renderVerifiedNameHelpText","handleSubmitVerifiedName","level_of_education","social_link_linkedin","social_link_facebook","social_link_twitter","renderLoading","deleteAccountReducer","siteLanguageReducer","resetPasswordReducer","nameChangeReducer","thirdPartyAuthReducer","dispatcherIsOpenForm","handleFetchSettings","roles","_yield$call","handleSaveSettings","savedValues","getLocale","prefLang","publish","LOCALE_CHANGED","handleRtl","delay","handleSaveMultipleSettings","savedSettings","handleFetchTimeZones","deleteAccountSaga","siteLanguageSaga","resetPasswordSaga","nameChangeSaga","thirdPartyAuthSaga","NotFoundPage","maxWidth","IDLE_STATUS","LOADING_STATUS","SUCCESS_STATUS","FAILURE_STATUS","courses","selectedCourse","preference","app","rootSaga","accountSettingsSaga","sagaMiddleware","createSagaMiddleware","configureStore","initialState","store","createStore","combineReducers","accountSettingsStoreName","accountSettingsReducer","notificationPreferencesReducer","ENVIRONMENT","loggerMiddleware","createLogger","collapsed","composeWithDevTools","applyMiddleware","thunkMiddleware","compose","composeMiddleware","run","hasGetUserMediaSupport","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","useAsyncCall","asyncFunc","setData","currData","useRedirect","redirect","setRedirect","text","sessionStorage","getExistingIdVerification","requestConfig","expires","canVerify","can_verify","getEnrollments","constraints","resolve","reject","MEDIA_ACCESS","PENDING","UNSUPPORTED","DENIED","GRANTED","ERROR_REASONS","VERIFIED_MODES","AccessBlocked","VerifiedNameContext","createContext","VerifiedNameContextProvider","verifiedNameHistoryData","verifiedNames","names","applicableNames","getMostRecentApprovedOrPendingVerifiedName","useMemo","verifiedNameHistoryCallStatus","Provider","IdVerificationContextProvider","useContext","idVerificationData","enrollmentsData","facePhotoFile","setFacePhotoFile","idPhotoFile","setIdPhotoFile","idPhotoName","setIdPhotoName","mediaStream","setMediaStream","mediaAccess","setMediaAccess","setProfileDataManager","thirdPartyManager","useCameraForId","setUseCameraForId","reachedSummary","setReachedSummary","existingIdVerification","mode","contextValue","nameOnAccount","tryGetUserMedia","stream","video","getTracks","track","stop","stopUserMedia","loadingStatuses","IdVerificationContext","SLUGS","panelSteps","useNextPanelSlug","originSlug","nextIndex","indexOf","BasePanel","focusOnMount","headingRef","useRef","redirectSlug","slug","indexOfCurrentPanel","useVerificationRedirectSlug","Redirect","ReviewRequirementsPanel","panelSlug","nextPanelSlug","sendTrackEvent","category","allow","exampleCard","alt","EnableCameraDirectionsPanel","browserName","UnsupportedCameraDirectionsPanel","RequestCameraAccessPanel","returnUrl","returnText","Bowser","userAgent","browser","returnLink","clickAllow","CameraHelp","Collapsible","styling","defaultOpen","isPortrait","PortraitPhotoContextPanel","Camera","model","estimateFaces","then","predictions","shouldDetect","dataUri","showDetections","requestAnimationFrame","detectFromVideoFrame","canvasContext","canvasRef","getContext","clearRect","canvas","prediction","start","topLeft","end","bottomRight","features","landmarks","isInPosition","j","x","y","isInRange","isInRangeForPortrait","isInRangeForID","strokeStyle","lineWidth","strokeRect","giveFeedback","fillStyle","fillRect","cameraPhoto","videoRef","setDetection","bind","videoHasLoaded","isFinishedLoadingDetection","shouldGiveFeedback","feedback","CameraPhoto","startCamera","FACING_MODES","USER","stopCamera","startDetection","sendEvent","setVideoHasLoaded","getGridPosition","coordinates","messageBase","getSizeFactor","sizeFactor","settings","getCameraSettings","videoWidth","videoHeight","ratio","setTimeout","loadModelPromise","blazeface","eventName","numFaces","rightEye","isCorrect","currentFeedback","newFeedback","takePhoto","reset","config","playShutterClick","getDataUri","onImageCapture","Audio","shutter","play","cameraFlashClass","textAlign","marginBottom","Check","marginLeft","float","Spinner","animation","autoPlay","onLoadedData","WebkitTransform","transform","playsInline","accessKey","TakePortraitPhotoPanel","mounted","setMounted","IdContextPanel","GetNameIdPanel","nameInputRef","nameOnAccountValue","fromSummary","ImagePreview","objectFit","SupportedMediaTypes","SUPPORTED_TYPES","ImageFileUpload","onFileChange","setError","errorTypes","files","fileObject","startsWith","fileReader","FileReader","addEventListener","result","readAsDataURL","accept","marginTop","CollapsibleImageHelp","handleClick","TakeIdPhotoPanel","CameraHelpWithUpload","hasUploadedImage","setHasUploadedImage","image","SummaryPanel","nameToBeUsed","isSubmitting","setIsSubmitting","submissionError","setSubmissionError","SubmitButton","verificationData","courseRunKey","keyMap","postData","jsKey","apiKey","urlEncodedPostData","qs","success","String","submitIdVerification","support_link","getError","sr","SubmittedPanel","IdVerificationPage","useRouteMatch","search","useLocation","isModalOpen","setIsModalOpen","parsedQueryParams","ignoreQueryPrefix","interpretNumericEntities","camelCase","Route","component","ErrorMessage","ManagedProfileAlert","CoachingForm","full_name","defaultValue","redirectUrl","declineCoaching","Logo","attributes","SuccessMessage","faCheck","continueUrl","continue","AutoRedirect","VIEWS","CoachingConsent","nextUrl","sanitizeForwardingUrl","formSubmitted","declineSubmitted","submissionSuccess","patchUsingCoachingConsentForm","fullName","phoneNumber","renderView","currentView","CoachingConsentForm","formHasErrors","LogoSVG","appMessages","ar","arMessages","es419Messages","faIRMessages","fr","frMessages","pt","ptMessages","it","itMessages","de","deMessages","hi","hiMessages","frCAMessages","ru","ruMessages","uk","ukMessages","headerMessages","paragonMessages","footerMessages","Head","Helmet","FAVICON_URL","notificationHeading","notificationAppTitle","notificationTitle","notificationHelpType","notificationHelpWeb","notificationHelpEmail","notificationHelpPush","loadMoreCourses","NotificationCourses","coursesList","courseListStatus","loadMore","Container","ArrowForwardIos","ToggleSwitch","NotificationPreferenceRow","useIntl","selectPreference","selectPreferences","selectPreferenceNonEditableChannels","onToggle","updatePreferenceToggle","notificationApp","notificationType","patchData","snakeCase","patchPreferenceToggle","tooltipId","OverlayTrigger","placement","overlay","Tooltip","InfoOutline","channel","NotificationPreferenceApp","appPreferences","selectPreferencesOfApp","appToggle","selectPreferenceApp","selectPreferenceAppToggleValue","onChangeAppSettings","updateAppPreferenceToggle","patchAppPreferenceToggle","Advanced","Trigger","NotificationPreferences","useParams","courseStatus","selectCourseList","selectCourse","notificationStatus","preferenceAppsIds","isLoading","preferencesList","updateSelectedCourse","getCourseNotificationPreferences","fetchCourseNotificationPreferences","ArrowBack","subscribe","APP_READY","ReactDOM","AppProvider","minHeight","exact","getElementById","APP_INIT_ERROR","ErrorPage","initialize","requireAuthenticatedUser","hydrateAuthenticatedUser","handlers","mergeConfig","process"],"sourceRoot":""}